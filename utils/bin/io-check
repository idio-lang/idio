#! /usr/bin/env bash

# Copyright (c) 2015-2022 Ian Fitchet <idf@idio-lang.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

#
# io-check -- verify the stdin/out/err are what they should be
#

# -e should only apply to read (write?) and broken pipes
set -ue

usage ()
{
    (
	echo "usage: $0 [options]"
	echo "where options are:"
	echo "	-i S		stdin is from S"
	echo "	-o D		stdout is to D"
	echo "	-e D		stderr is to D"
	echo
	echo "S/D can be:"
	echo "  null		/dev/null"
	echo "  pipe		a pipe descriptor"
	echo "  NUM		file descriptor NUM"
    ) >&2
}

pid=$$

opt_input=
opt_output=
opt_error=

while getopts "e:i:o:" opt ; do
    case "${opt}" in
    e)
	opt_error=${OPTARG}
	;;
    i)
	opt_input=${OPTARG}
	;;
    o)
	opt_output=${OPTARG}
	;;
    *)
	usage
	exit 1
	;;
    esac
done

error ()
{
    echo $* >&2
    lsof -a -p ${pid} -d 0-2
    exit 1
}

inode ()
{
    case "${OS}" in
	*BSD)
	    stat -f %i $1
	    ;;
	*)
	    stat -c %i $1
	    ;;
    esac
}

stat_file ()
{
    stat_ino=
    var_file=
    case "${fd}" in
    0)
	var_file="${opt_input}"
	;;
    1)
	var_file="${opt_output}"
	;;
    2)
	var_file="${opt_error}"
	;;
    esac

    case "${var_file}" in
    /*)
	stat_ino=$(inode $PWD${var_file})

	if [[ ${stat_ino} = ${inode[fd]} ]] ; then
	    file=$PWD${var_file}
	fi
	;;
    esac
}

_uname=( $(uname -mrps) )
OS=${_uname[0]}

case "${OS}" in
*BSD)
    dev_null_dev=$(stat -f 0x%Xr /dev/null)
    ;;
esac

typeset -a stdio ftype rdev inode

lsof_data ()
{
    typeset fd file

    # whoops!
    #
    # while ... < <(...)
    #
    # causes the shell's own stdin to be a pipe (from the process
    # substitution) for the duration of the while loop, ie. we're
    # reporting a Bash side-effect not The Truth.

    tmpfile=/tmp/${0##*/}.$$

    # Grr.  GitLab CI (using Docker) causes lsof to whine about nsfs
    # file systems which occludes the actual errors
    #
    # /run/docker is only readable by root so add -w
    lsof -w -a -p ${pid} -d 0-2 -F ftnri > ${tmpfile}

    while read line ; do
	case "${line}" in
	p${pid}) ;;
	f[0-2])
	    fd="${line#f}"
	    ;;
	t*)
	    ftype[fd]="${line#t}"
	    case "${ftype[fd]}" in
	    FIFO)
		ftype[fd]=PIPE
		;;
	    esac
	    ;;
	r*)
	    rdev[fd]="${line#r}"
	    ;;
	i*)
	    inode[fd]="${line#i}"
	    ;;
	n*)
	    file="${line#n}"

	    # Normalise the output of lsof.
	    #
	    # pipe: On CentOS it reports "pipe" for a pipe 'device'.
	    # On FreeBSD/Darwin it reports "->0x..." with a 64bit hex
	    # number.
	    #
	    # /dev/null: On FreeBSD /dev/null is just a regular
	    # /dev/fd/n.  However, the device should match the output
	    # from stat(1).
	    #
	    # "something (something else)"
	    #
	    # On FreeBSD for a not-old-enough file (one we've just
	    # created) we might get this format: "mountpoint
	    # (filesystem)".
	    #
	    # An NFS filesystem might also return "/path/to/file
	    # (host:mountpoint)"

	    case "${OS}" in
	    FreeBSD|Darwin)
		case "${file}" in
		"->0x"*)
		    file=pipe
		    ;;
		esac
		;;
	    esac
	    case "${OS}" in
	    FreeBSD)
		case "${file}" in
		/dev/fd/*)
		    case "${ftype[fd]}" in
		    VCHR)
			if [[ ${rdev[fd]} = ${dev_null_dev} ]] ; then
			    file=/dev/null
			fi
			;;
		    esac
		    ;;
		*" ("*")")
		    # FreeBSD hasn't looked the file name up yet, we
		    # probably have a value that looks like
		    # "mount-point (filesystem)"
		    #
		    # Obviously, if the target file really is of the
		    # form "something (something else)" then this
		    # isn't the best approach.  My advice would be to
		    # change your test.
		    #
		    # What we can do is if the expected entity is a
		    # file, "/file", then stat(1) it and compare the
		    # inode of the stat()'d file with the inode
		    # associated with the file descriptor from lsof.
		    # If the inodes match then fix the "found" file to
		    # be a construction of the current working
		    # directory and the expected file name.
		    #
		    # We ought to derive the directory from the lsof
		    # reported device but there's a limit...

		    stat_file
		    ;;
		esac
		;;
	    *)
		case "${file}" in
		*" ("*")")
		    stat_file
		    ;;
		esac
		;;
	    esac

	    case "${file}" in
	    ${tmpfile})
		error "WARNING: stdio[${fd}]=${file} == tmpfile==${tmpfile} ??"
		;;
	    esac
	    stdio[fd]="${file}"
	    ;;
	esac
    done < ${tmpfile}

    rm -f ${tmpfile}
}

lsof_data

if [[ ${opt_input} ]] ; then
    case "${opt_input}" in
    null)
	if [[ ${stdio[0]} != /dev/null ]] ; then
	    error "stdin: != /dev/null"
	fi
	;;
    pipe)
	if [[ ${ftype[0]} != PIPE ]] ; then
	    error "stdin: != pipe"
	fi
	;;
    [0-2])
	if [[ ${stdio[0]} != ${stdio[opt_input]} ]] ; then
	    error "stdin: stdio[0]=${stdio[0]} != stdio[${opt_input}]=${stdio[${opt_input}]}"
	fi
	;;
    /*)
	if [[ ! ${stdio[0]} =~ .*${opt_input}$ ]] ; then
	    error "stdin: ${stdio[0]} !~ .*${opt_input}$"
	fi
	;;
    *)
	read line
	case "$line" in
	"${opt_input}") ;;
	*)
	    error "stdin: read => $line != ${opt_input}"
	    ;;
	esac
	;;
    esac
fi

if [[ ${opt_output} ]] ; then
    case "${opt_output}" in
    null)
	if [[ ${stdio[1]} != /dev/null ]] ; then
	    error "stdout: != /dev/null"
	fi
	;;
    pipe)
	if [[ ${ftype[1]} != PIPE ]] ; then
	    error "stdout: != pipe"
	fi
	;;
    [0-2])
	if [[ ${stdio[1]} != ${stdio[opt_output]} ]] ; then
	    error "stdout: stdio[1]=${stdio[1]} != stdio[${opt_output}]=${stdio[${opt_output}]}"
	fi
	;;
    /*)
	if [[ ! ${stdio[1]} =~ .*${opt_output}$ ]] ; then
	    error "stdout: ${stdio[1]} !~ .*${opt_output}$"
	fi
	;;
    *)
	echo "${opt_output}"
	;;
    esac
fi

if [[ ${opt_error} ]] ; then
    case "${opt_error}" in
    null)
	if [[ ${stdio[2]} != /dev/null ]] ; then
	    error "stderr: != /dev/null"
	fi
	;;
    pipe)
	if [[ ${ftype[2]} != PIPE ]] ; then
	    error "stderr: != pipe"
	fi
	;;
    [0-2])
	if [[ ${stdio[2]} != ${stdio[opt_error]} ]] ; then
	    error "stderr: stdio[2]=${stdio[2]} != stdio[${opt_error}]=${stdio[${opt_error}]}"
	fi
	;;
    /*)
	if [[ ! ${stdio[2]} =~ .*${opt_error}$ ]] ; then
	    error "stderr: ${stdio[2]} !~ .*${opt_error}$"
	fi
	;;
    *)
	echo "${opt_output}" >&2
	;;
    esac
fi
