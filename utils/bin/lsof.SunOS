#! /usr/bin/env bash

# Copyright (c) 2015-2022 Ian Fitchet <idf@idio-lang.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

# lsof.SunOS -- a poor man's lsof cobbled from pfiles

handle_EXIT ()
{
    if [[ ${pfiles_file} && -f ${pfiles_file} ]] ; then
	rm -f ${pfiles_file}
    fi
}

usage ()
{
    cat << EOF >&2

${0##*/} replicates *some* of the functionality of lsof(1) using
pfiles(1) in SunOS.  Enough to allow the testing to work.

If your distribution of SunOS has lsof then you should be using it
rather than this script!

usage: $0 [options]
where options are:
  -a		ignored
  -d FDS	list of file descriptors, eg. 0-2
  -F FIELDS	fields for output
  -p PID	process ID to test, default is this script
  -w		ignored

  -h		this message
EOF
}

_uname=( $(uname -mrpsv) )
OS=${_uname[0]}
OS_VER=${_uname[2]}

case "${OS}" in
SunOS) ;;
*)
    echo "$0: SunOS only" >&2
    exit 1
    ;;
esac


opt_p=$$
opt_d=
opt_F=

while getopts "ap:d:hF:w" opt ; do
    case "${opt}" in
    a)
	;;
    d)
	opt_d=${OPTARG}
	;;
    F)
	opt_F=${OPTARG}
	;;
    h)
	usage
	exit 0
	;;
    p)
	opt_p=${OPTARG}
	;;
    w)
	;;
    *)
	usage
	exit 1
	;;
    esac
done

pfiles_file=/tmp/${0##*/}.$$.pfiles

pfiles ${opt_p} > ${pfiles_file}

# lsof generic output

# COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
# bash    2845  idf    0u   CHR  136,0      0t0    3 /dev/pts/0

if [[ ! ${opt_F} ]] ; then
    printf "%-7s %5s %4s %4s %5s %9s %8s %10s %s\n" COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
fi

(
    read pid command rest
    pid=${pid%:}

    if [[ ${opt_F} ]] ; then
	echo p${pid}
    fi

    read			# current rlimit

    # sys/stat.h gives the full list of mode types of
    # which we cover "enough" to avoid trouble

    # 0: S_IFCHR mode:0620 dev:548,0 ino:705874198 uid:101 gid:7 rdev:241,1

    while read fd ftype mode dev ino uid gid rdev ; do
	fd=${fd%:}

	p=
	if [[ ${opt_d} ]] ; then
	    case "${fd}" in
	    [${opt_d}])
		p=1
		;;
	    esac
	else
	    p=1
	fi

	if [[ ${opt_F} && ! ${p} ]] ; then
	    continue
	fi

	case "${opt_F}" in
	*f*)
	    echo f${fd}
	    ;;
	esac

	case "${ftype}" in
	S_IFCHR|S_IFREG)
	    case "${opt_F}" in
	    *t*)
		echo t${ftype#S_IF}
		;;
	    esac
	    read rest # O_* flags

	    # sometimes there's no name and it's straight into offset
	    #
	    # where there is a name, patch up /dev/null to consistency
	    offset=
	    read file
	    case "${file}" in
	    /devices/pseudo/mm@0:null)
		file=/dev/null
		;;
	    offset:*)
		offset="${file}"
		file=
	    esac
	    case "${opt_F}" in
	    *n*)
		echo n${file}
		;;
	    esac
	    if [[ ! ${offset} ]] ; then
		case "${OS_VER}" in
		11.*) ;;
		*)
		    read offset
		    ;;
		esac
	    fi
	    ;;
	S_IFIFO)
	    ftype=PIPE
	    offset=-
	    file=pipe
	    case "${opt_F}" in
	    *t*)
		echo t${ftype}
		;;
	    esac
	    read rest # O_* flags
	    case "${opt_F}" in
	    *n*)
		echo npipe
		;;
	    esac
	    ;;
	S_IFDOOR)
	    read rest # O_* flags
	    case "${rest}" in
	    *" door to nscd["*) ;;
	    *)
		read rest # filename
		case "${OS_VER}" in
		11.*)
		    read peer
		    ;;
		esac
		;;
	    esac
	    ;;
	*)
	    echo "unexpected ftype: '${ftype}'" >&2
	    pfiles ${opt_p} >&2
	    set >&2
	    exit 1
	    ;;
	esac

	case "${opt_F}" in
	*r*)
	    echo r${rdev#rdev:}
	    ;;
	esac

	case "${opt_F}" in
	*i*)
	    echo i${ino#ino:}
	    ;;
	esac

	if [[ ${opt_F} ]] ; then
	    continue
	fi

	if [[ ${p} ]] ; then
	    printf "%-7s %5s %4s %4s %5s %9s %8s %10s %s\n" ${command} ${pid} ${uid#uid:} ${fd} ${ftype#S_IF} ${dev#dev:} ${offset#offset:} ${ino#ino:} ${file}
	fi
    done
) < ${pfiles_file}

rm -f ${pfiles_file}
