#! /usr/bin/env bash

# Copyright (c) 2021 Ian Fitchet <idf@idio-lang.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

# 
# gen-idio-system -- create a system-specific header/Makefile
#

# We're looking to source/discover/create a few interesting variables
# and make them easy for C source code and Makefiles to include.

# 1. an Idio version number and derivatives of it

# 2. an ARCH in the multiarch guise.  For systems not in the multiarch
# way we need to figure something out that is approximately the same

# 3. a default/fallback system library directory which is where to
# look for library files if we were started as /usr/bin/idio

# file-hierarchy(7) describes $libdir which can be
# /usr/lib{64}/{multiarch-tuple} -- or not

set -ue

note ()
{
    :
}

usage () 
{
    cat << EOF >&2

${0##*/} generates a system-specific header/makefile
  -P PREFIX	prefix [${opt_prefix}]

  -v		verbose
EOF
}

opt_prefix=idio
opt_verbose=

while getopts "hP:v" opt ; do
    case "${opt}" in
    h)
	usage
	exit 0
	;;
    P)
	opt_prefix=${OPTARG}
	;;
    v)
	opt_verbose=1
	;;
    *)
	usage
	exit 1
	;;
    esac
done

######################################################################

# 1.2.a.3
version=$(cat version)

IFS=.
version_a=( ${version} )

# 1.2
version_mm="${version_a[*]:0:2}"
unset IFS

# build date
build_date=$(date +%Y-%m-%dT%H:%M:%S%z)

uname_a=( $(uname -mrps) )

# -dumpmachine works for gcc and clang and returns the GNU triplet
DUMPMACHINE=$( ${CC} -dumpmachine )

# gcc -print-multiarch only works for gcc >= 4.9 and can return a
# blank line (Fedora, SunOS)
MULTIARCH=

# gcc-8 on some systems
case "${CC}" in
gcc*)
    if [[ ${CC} ]] && ! MULTIARCH=$(${CC} -print-multiarch) 2>/dev/null ; then
	:
    fi
    ;;
esac

libdir=/usr/lib

case "${uname_a[0]}" in
*BSD)
    libdir=/usr/local/lib
    ;;
*)
    # this might not be generic
    case "${uname_a[2]}" in
    x86_64)
	if [[ -d /usr/lib64 ]] ; then
	    libdir=/usr/lib64
	fi
	;;
    esac
    ;;
esac

if type -p systemd-path ; then
    libdir=$(systemd-path system-library-arch)
else

    case "${MULTIARCH}" in
    "")
	libdir=${libdir}/${DUMPMACHINE}
	;;
    *)
	libdir=${libdir}/${MULTIARCH}
	;;
    esac
fi

######################################################################

var_PREFIX=$( echo ${opt_prefix} | tr '[a-z]' '[A-Z]' )
var_header=${opt_prefix}-system.h

cat <<EOF > ${var_header}
/*
 * generated by ${0##*/} on $(date)
 */

/*
 * ${var_header}
 *
 */

#ifndef ${var_PREFIX}_SYSTEM_H
#define ${var_PREFIX}_SYSTEM_H

#define ${var_PREFIX}_SYSTEM_VERSION	"${version}"
#define ${var_PREFIX}_SYSTEM_VERSION_MM	"${version_mm}"
#define ${var_PREFIX}_SYSTEM_BUILD_DATE	"${build_date}"
#define ${var_PREFIX}_SYSTEM_LIBDIR	"${libdir}"

#endif

EOF

cat <<EOF > Makefile.system
#
# generated by ${0##*/} on $(date)
#

${var_PREFIX}_SYSTEM_VERSION	:= ${version}
${var_PREFIX}_SYSTEM_VERSION_MM	:= ${version_mm}
${var_PREFIX}_SYSTEM_BUILD_DATE	:= ${build_date}
${var_PREFIX}_SYSTEM_LIBDIR	:= ${libdir}

EOF
