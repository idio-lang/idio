#! /usr/bin/env bash

# Copyright (c) 2021-2022 Ian Fitchet <idf@idio-lang.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

#
# gen-idio-system -- create a system-specific header/Makefile
#

# We're looking to source/discover/create a few interesting variables
# and make them easy for C source code and Makefiles to include.

# 1. an Idio version number and derivatives of it

# 2. an ARCH in the multiarch guise.  For systems not in the multiarch
# way we need to figure something out that is approximately the same,
# say, a GNU triplet

# 3. a default/fallback system library directory which is where to
# look for library files if we were started as /usr/bin/idio

# file-hierarchy(7) describes $libdir which can be
# /usr/lib{64}/{multiarch-tuple} -- or not -- onto which we want to
# append /idio for /usr/lib64/idio or /usr/lib/x86_64-linux-gnu/idio,
# say.

handle_EXIT ()
{
    if [[ ${tmpdir:+X} = X ]] ; then
	cd /
	rm -rf ${tmpdir}
    fi
}

trap handle_EXIT EXIT

set -ue

note ()
{
    :
}

# The tests for IDIO_HAVE_* are generic (barring the test code itself)
idio_have ()
{
    feature=$1
    shift

    # Old Bash's don't have ${feature^^}
    FEATURE=IDIO_HAVE_$(echo ${feature} | tr '[a-z]' '[A-Z]')

    names+=(${FEATURE})

    # older Bash's don't support declare -g so resort to eval
    eval ${FEATURE}=1

    if ! ${CC} -o ${tmpdir}/a.out ${PROG_LIB}/config-tests/have-${feature}.c ${1+"$@"} >/dev/null 2>&1 ; then
	eval ${FEATURE}=
    fi
}

usage ()
{
    cat << EOF >&2

${0##*/} generates a system-specific header/makefile
  -M NAME	module [${opt_module}]

  -v		verbose
EOF
}

PROG_DIR=${0%/*}
PROG_TOP=${PROG_DIR%/*}
PROG_LIB=${PROG_TOP}/lib

opt_module=idio
opt_verbose=

while getopts "hM:v" opt ; do
    case "${opt}" in
    h)
	usage
	exit 0
	;;
    M)
	opt_module=${OPTARG}
	;;
    v)
	opt_verbose=1
	;;
    *)
	usage
	exit 1
	;;
    esac
done

shift $(( OPTIND - 1 ))

######################################################################

uname_a=( $(uname -mrps) )

######################################################################
#
# date and time

# We'd like a GNU date for the -d flag (which is on a non-standard
# PATH in SunOS).  The *BSDs and Mac OS don't have GNU date but do
# have a -r{seconds} flag.

case "${uname_a[0]}" in
*BSD|Darwin)
    # we're going to generate more than one date output so use a
    # consistent date input
    now=$(date +%s)

    # build date and timestamp using a consistent {now}
    build_date=$(date -r "${now}" +%Y-%m-%d)

    # timestamp should be RFC3339/ISO8601 and whilst FreeBSD date
    # supports the -Iseconds flag for ISO8601 (and OpenBSD doesn't)
    # we can't rely on it as it likes to use T/nothing rather than T/Z
    # anyway.
    #
    # whole seconds -- as fractional seconds can't be generated
    build_timestamp=$(date -r "${now}" +%Y-%m-%dT%H:%M:%SZ%z)
    ;;
*)
    busybox=
    case "${uname_a[0]}" in
    SunOS)
	PATH=/usr/gnu/bin:$PATH
	;;
    Linux)
	if test -h /bin/ls ; then
	    case "$(readlink /bin/ls)" in
	    */busybox)
		busybox=1
		;;
	    esac
	fi
	;;
    esac

    # we're going to generate more than one date output so use a
    # consistent date input (including zone information otherwise it
    # gets added again!)
    if [[ ${busybox} ]] ; then
	now=$(date +%Y%m%d%H%M.%S)
    else
	now=$(date +'%Y-%m-%d %H:%M:%SZ%z')
    fi

    # build date and timestamp using a consistent {now}
    build_date=$(date -d "${now}" +%Y-%m-%d)

    # timestamp should be RFC3339/ISO8601 and whilst GNU date
    # variously supports flags for those we can't rely on it as
    # --rfc-3339 likes to use SPACE/nothing rather than T/Z.
    #
    # whole seconds -- as fractional seconds can't be portably
    # generated
    build_timestamp=$(date -d "${now}" +%Y-%m-%dT%H:%M:%SZ%z)
    ;;
esac

######################################################################
#
# ARCH

# -dumpmachine works for gcc and clang and returns the GNU triplet
DUMPMACHINE=$( ${CC} -dumpmachine )

# gcc -print-multiarch only works for gcc >= 4.9 and can return a
# blank line (Fedora, SunOS)
MULTIARCH=

# gcc-8 on some systems
case "${CC}" in
gcc*)
    if [[ ${CC} ]] && ! MULTIARCH=$(${CC} -print-multiarch 2>/dev/null) ; then
	:
    fi
    ;;
esac

case "${MULTIARCH}" in
"")
    MULTIARCH=${DUMPMACHINE}
    ;;
esac

bindir=/usr/bin
libdir=/usr/lib

if type -p systemd-path >/dev/null 2>&1 ; then
    libdir=$(systemd-path system-library-arch)
else
    case "${uname_a[0]}" in
    NetBSD)
	bindir=/usr/pkg/bin
	libdir=/usr/pkg/lib
	;;
    *BSD|Darwin)
	bindir=/usr/local/bin
	libdir=/usr/local/lib
	;;
    *)
	case "${uname_a[2]}" in
	x86_64)
	    if [[ -d /usr/lib64 ]] ; then
		libdir=/usr/lib64
	    fi
	    ;;
	esac

	# Hopeful...
	if [[ -d ${libdir}/${DUMPMACHINE} ]] ; then
	    libdir=${libdir}/${DUMPMACHINE}
	fi

	;;
    esac
fi

[[ -d ${libdir} ]]

######################################################################
#
# Idio versions

# 1.2.a.3
version=$(cat version)

IFS=.
version_a=( ${version} )

# 1.2 from 1.2.a.3
version_mm="${version_a[*]:0:2}"

# 1 from 1.2.a.3
version_m="${version_a[*]:0:1}"
unset IFS

######################################################################
#
# git commit

git_toplevel=$(git rev-parse --show-toplevel)
git_asm_file=${git_toplevel}/src/vm-asm.h
git_compiler_file=${git_toplevel}/src/compile.c

git_commit=$(git rev-parse --short=7 HEAD)
git_asm_commit=$(git log -n 1 --pretty=format:%h -- ${git_asm_file})
git_compiler_commit=$(git log -n 1 --pretty=format:%h -- ${git_compiler_file})
git_describe=$(git describe --tags || true)

# dirty working directory?
# https://stackoverflow.com/questions/3878624/how-do-i-programmatically-determine-if-there-are-uncommitted-changes

if ! git diff-files --quiet --ignore-submodules -- ; then
    # unstaged changes in the working tree
    git_commit="${git_commit}*"
elif ! git diff-index --cached --quiet HEAD --ignore-submodules -- ; then
    # uncommitted changes in the index
    git_commit="${git_commit}+"
fi

if ! git diff-files --quiet --ignore-submodules -- ${git_asm_file} ; then
    git_asm_commit="${git_asm_commit}*"
elif ! git diff-index --cached --quiet HEAD --ignore-submodules -- ${git_asm_file} ; then
    git_asm_commit="${git_asm_commit}+"
fi

if ! git diff-files --quiet --ignore-submodules -- ${git_compiler_file} ; then
    git_compiler_commit="${git_compiler_commit}*"
elif ! git diff-index --cached --quiet HEAD --ignore-submodules -- ${git_compiler_file} ; then
    git_compiler_commit="${git_compiler_commit}+"
fi

######################################################################

case "$(uname -s)" in
Darwin)
    tmpdir=$(mktemp -d /tmp/${0##*/}.XXXXXX)
    ;;
*)
    tmpdir=$(mktemp -d)
    ;;
esac

######################################################################

# _FORTIFY_SOURCE=3 or _FORTIFY_SOURCE=2 ?

# Everything tested to date supports _FORTIFY_SOURCE=2.

names+=(IDIO_CC_FORTIFY_SOURCE)
cat <<EOF > ${tmpdir}/test.c
#include <sys/types.h>
int main (int argc, char **argv)
{
    return 0;
}
EOF

IDIO_CC_FORTIFY_SOURCE=3
if ! ${CC} -o ${tmpdir}/a.out -Werror -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=${IDIO_CC_FORTIFY_SOURCE} ${tmpdir}/test.c >/dev/null 2>&1 ; then
    IDIO_CC_FORTIFY_SOURCE=2
fi

######################################################################

# Everything has libcurl.so but we need to check we have the headers
# too!  We want to know here, where we generate Makefile.system, so
# that we can choose to include the extension or not.
#
# There's a further complication in that we rely on
# curl_easy_option_by_name() which is only in v7.73.0 and later.

# libcurl-devel / libcurl4-openssl-dev

LIBCURL_CFLAGS=
LIBCURL_LIBS=-lcurl
if type -p curl-config >/dev/null 2>&1 ; then
    LIBCURL_CFLAGS=$(curl-config --cflags)
    LIBCURL_LIBS=$(curl-config --libs)
fi
idio_have libcurl_dev ${LIBCURL_CFLAGS} ${LIBCURL_LIBS}

######################################################################

# Everything has zlib but we need to check we have the headers too!
# We want to know here, where we generate Makefile.system, so that we
# can choose to include the extension or not.

# zlib1g-dev

ZLIB_CFLAGS=
ZLIB_LIBS=-lz
idio_have zlib_dev ${ZLIB_CFLAGS} ${ZLIB_LIBS}

######################################################################
#
# CC

CC_path=$(type -p ${CC})

######################################################################

var_MODULE=$( echo -n ${opt_module} | tr '[a-z]' '[A-Z]' | tr -c '[A-Z0-9]' _)
var_header=${opt_module}-system.h

# Bah!  The extensions want a generic name, MODULE_* so the make rules
# can work whereas we want a unique IDIO_ set of names for
# program-wide use.
var_name=${var_MODULE}
case "${opt_module}" in
idio) ;;
*)
    var_name=MODULE
;;
esac

cat <<EOF > ${var_header}
/*
 * generated by ${0##*/} on $(date)
 */

/*
 * ${var_header}
 *
 */

#ifndef ${var_MODULE}_SYSTEM_H
#define ${var_MODULE}_SYSTEM_H

#define ${var_MODULE}_SYSTEM_VERSION		"${version}"
#define ${var_MODULE}_SYSTEM_VERSION_MM		"${version_mm}"
#define ${var_MODULE}_SYSTEM_BUILD_DATE		"${build_date}"
#define ${var_MODULE}_SYSTEM_BUILD_TIMESTAMP	"${build_timestamp}"
#define ${var_MODULE}_SYSTEM_LIBDIR		"${libdir}/idio"
#define ${var_MODULE}_SYSTEM_ARCH		"${MULTIARCH}"
#define ${var_MODULE}_BUILD_COMMIT		"${git_commit}"
#define ${var_MODULE}_BUILD_ASM_COMMIT		"${git_asm_commit}"
#define ${var_MODULE}_BUILD_COMPILER_COMMIT	"${git_compiler_commit}"
#define ${var_MODULE}_BUILD_DESCRIBE		"${git_describe}"

#endif
EOF

cat <<EOF > Makefile.system
#
# generated by ${0##*/} on $(date) for ${var_MODULE}
#

${var_name}_NAME			:= ${opt_module}

${var_name}_SYSTEM_VERSION		:= ${version}
${var_name}_SYSTEM_VERSION_MM		:= ${version_mm}
${var_name}_SYSTEM_VERSION_M		:= ${version_m}
${var_name}_SYSTEM_BUILD_DATE		:= ${build_date}
${var_name}_SYSTEM_BUILD_TIMESTAMP	:= ${build_timestamp}
${var_name}_SYSTEM_BINDIR		:= ${bindir}
${var_name}_SYSTEM_LIBDIR		:= ${libdir}/idio
${var_name}_SYSTEM_ARCH		:= ${MULTIARCH}
${var_name}_SYSTEM_ARCH		:= ${MULTIARCH}

EOF

case "${opt_module}" in
idio)
    cat <<EOF >> Makefile.system
# Some systems get upset if _FORTIFY_SOURCE is already defined
FORTIFY_CFLAGS			:= -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=${IDIO_CC_FORTIFY_SOURCE}

IDIO_LIBCURL_DEV		:= ${IDIO_HAVE_LIBCURL_DEV}
IDIO_ZLIB_DEV			:= ${IDIO_HAVE_ZLIB_DEV}
EOF
    ;;
esac

if [[ $# -ne 0 ]] ; then
    cat <<EOF > $1
;
; generated by ${0##*/} on $(date)
;

${var_MODULE}_VERSION			:= "${version}"
${var_MODULE}_MM_VERSION			:= "${version_mm}"
${var_MODULE}_M_VERSION			:= "${version_m}"
${var_MODULE}_BUILD_DATE			:= "${build_date}"
${var_MODULE}_BUILD_TIMESTAMP		:= "${build_timestamp}"
${var_MODULE}_SYSTEM_BINDIR		:= "${bindir}"
${var_MODULE}_SYSTEM_LIBDIR		:= "${libdir}/idio"
${var_MODULE}_SYSTEM_ARCH		:= "${MULTIARCH}"
${var_MODULE}_BUILD_COMMIT		:= "${git_commit}"
${var_MODULE}_BUILD_ASM_COMMIT		:= "${git_asm_commit}"
${var_MODULE}_BUILD_COMPILER_COMMIT	:= "${git_compiler_commit}"
${var_MODULE}_BUILD_DESCRIBE		:= "${git_describe}"
${var_MODULE}_BUILD_CC			:= "${CC}"
${var_MODULE}_BUILD_CC_PATH		:= "${CC_path}"
${var_MODULE}_BUILD_CC_VERSION		:= "$(${CC} --version)"

EOF
fi
