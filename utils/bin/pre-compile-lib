#! /usr/bin/env idio

#*

Copyright (c) 2022 Ian Fitchet <idf(at)idio-lang.org>

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

------------------------------

pre-compile-lib

We're looking to walk down a hierarchy of .idio files and compile
them.

*#

module pre-compilation
export (
	 pre-compilation-restore-operator!
)

import evaluate compile operator

lib-dir := #f

(regex-case IDIO_CMD_PATH
	    ("(.*)/bin/idio" {
	      lib-dir = append-string r.1 "/lib/idio/" IDIO_MM_VERSION
	    })
	    (else {
	      eprintf "%s: cannot determine library directory from %s\n" ARGV0 IDIO_CMD_PATH
	      exit 1
	    }))

printf "%s: working in %s\n" ARGV0 lib-dir

#*

Houston, we Houston, we have a problem. have a problem.

The problem is with the definition of operators, or, more practically,
the re-definition of operators as we attempt to pre-compile files that
have already been evaluated and run.

We have gifted the reader with the ability to rewrite the source code
according to the rules of operators.  Which is now a problem for us as
we're asking the reader to read the contents of the source files
*again*.

The canonical example is

define-infix-operator + ...

which the reader, as it has a full set of operators at its disposal,
assiduously rewrites as

+ define-infix-operator ...

we process that, now regular function call, come to run it and
binary-+ complains that "'define-infix-operator' a symbol is not a
number".  True, very true.

This rewriting is effective even during the first pass as the ordering
of the definition of operators is important.

So, we need to defeat the reader's use of *user-defined*
operators (ie. delete the user-defined operators from the list of
operators) and we need to ensure that we process the source files in
the same order as the main engine would.

Remember, if we have deleted the *user-defined* operators then, uh,
duh, we can't use them thereafter in this file!

But wait!  We're only pre-compiling code, including operators.  That
is, we're not running the code and (re-)installing the operators for
the reader to use in subsequent files.  Gah!

So what we really need is to archive the operators then, as we see the
source code where we would run and install the operator, craftily copy
the saved operator back.  Madness!

*#

em := find-module 'evaluate
%set-module-imports! em (append (module-imports em) (list (list (find-module 'pre-compilation))))

;; NOTICE last chance to use infix operators
saved-iol := *infix-operator-list*
saved-iog := *infix-operator-group*
saved-pol := *postfix-operator-list*
saved-pog := *postfix-operator-group*

define (trim-operator-list l) {
  fold-left (function (r v) {
    if (primitive? (pt v)) {
      pair v r
    } r
  }) #n l
}

define (trim-operator-group l) {
  fold-left (function (r pri-grp) {
    := grp (trim-operator-list (pt pri-grp))
    if (pair? grp) {
      pair (pair (ph pri-grp) grp) r
    } r
  }) #n l
}

;; WARNING loss of operators pending -- for the rest of this file!!
= *infix-operator-list* (trim-operator-list *infix-operator-list*)

= *infix-operator-group* (trim-operator-group *infix-operator-group*)

= *postfix-operator-list* (trim-operator-list *postfix-operator-list*)

= *postfix-operator-group* (trim-operator-group *postfix-operator-group*)

define (pre-compilation-restore-operator! name pri kind) {
  := ols #f
  := ol  #f
  := sol #f
  := ogs #f
  := og  #f
  := sog #f

  (case kind
   ((infix) {
     = ols '*infix-operator-list*
     = ol   *infix-operator-list*
     = sol saved-iol
     = ogs '*infix-operator-group*
     = og   *infix-operator-group*
     = sog saved-iog
   })
   ((postfix) {
     = ols '*postfix-operator-list*
     = ol   *postfix-operator-list*
     = sol saved-pol
     = ogs '*postfix-operator-group*
     = og   *postfix-operator-group*
     = sog saved-pog
   })
   (else {
     error/type ^rt-parameter-value-error 'pre-compilation-restore-operator! "unexpected kind" kind
   }))

  := om (find-module 'operator)

  ;; this code is more or less copy-operator!
  := new (assq name ol)

  if new {
    error/type ^rt-parameter-value-error 'pre-compilation-restore-operator! "operator already defined" name
  }

  ;; (name & {func})
  := orig (assq name sol)

  if orig {
    ;; (name & {func})
    := proc (pair name (pt orig))

    set-symbol-value! ols (pair proc ol) om

    ;; (pri proc ...)
    := pri-grp (assq pri og)

    if pri-grp {
      set-pt! pri-grp (pair proc (pt pri-grp))
    } {
      ;; (pri proc)
      := pri-proc (list pri proc)

      define (og-loop c p) {
	if (null? c) {
	  ;; (og (pri proc))
	  set-symbol-value! ogs (append og (list pri-proc)) om
	} {
	  := c-pri (phh c)
	  if (lt c-pri pri) {
	    if (null? p) {
	      set-symbol-value! ogs (pair pri-proc c) om
	    } {
	      set-pt! p (pair pri-proc c)
	    }
	  } {
	    og-loop (pt c) c
	  }
	}
      }

      og-loop og #n
    }
  } {
    error/type ^rt-parameter-value-error 'pre-compilation-restore-operator! "operator not previously saved" name
  }

  ;eprintf "iopt %s\n" (infix-operator-precedence-table)
  ;eprintf "popt %s\n\n" (postfix-operator-precedence-table)
}

compile-file (append-string lib-dir "/bootstrap.idio")
#*
for fn in (append  (list (append-string lib-dir "/bootstrap.idio"))
		   (glob (append-string lib-dir "/bootstrap/*.idio"))) {
  printf "Compiling %s\n" fn
  compile-file fn
  printf "\n\n"
}
*#

for fn in (glob (append-string lib-dir "/*.idio")) {
  printf "Compiling %s\n" fn
  (pattern-case fn
		;; skip the bootstrap which we ran above
		("*/bootstrap.idio" #f)

		(else {
		  compile-file fn
		}))
  printf "\n\n"
}

;Local Variables:
;mode: Idio
;coding: utf-8-unix
;End:
