#! /usr/bin/env bash

# Copyright (c) 2015, 2020, 2021 Ian Fitchet <idf@idio-lang.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

# 
# auto-exit -- die deterministically
#

# -e should only apply to read (write?) and broken pipes
set -ue

note ()
{
    :
}

usage () 
{
    cat << EOF >&2

${0##*/} is a utility script whose purpose is to interact with its
environment (reading, writing, sleeping) before exiting in a
deterministic way: a specific exit status or a simulated signal.

usage: $0 [options]
where options are:
  -E STATUS	exit with STATUS
  -K SIGNAL	kill self with SIGNAL
  -r NUM	read NUM lines (-s N seconds apart)
  -s NUM	sleep for NUM seconds
  -t NUM	set read's timeout to NUM seconds, '' for default [${opt_timeout}]
  -o NUM	write NUM lines to stdout (-s N seconds apart)
  -e NUM	write NUM lines to stderr (-s N seconds apart)

  -I FILE	use FILE for input
  -O FILE	use FILE for output

  -v		verbose
EOF
}

opt_exit=0
opt_kill=
opt_read=
opt_sleep=0
opt_timeout=
opt_verbose=
opt_write_out_lines=
opt_write_err_lines=

var_write_out_name=stdout

while getopts "E:e:hI:K:O:o:r:s:t:v" opt ; do
    case "${opt}" in
    E)
	opt_exit=${OPTARG}
	;;
    e)
	opt_write_err_lines=${OPTARG}
	;;
    h)
	usage
	exit 0
	;;
    I)
	exec 0<${OPTARG}
	;;
    K)
	opt_kill=${OPTARG}
	;;
    O)
	var_write_out_name=${OPTARG}
	exec >${OPTARG}
	;;
    o)
	opt_write_out_lines=${OPTARG}
	;;
    r)
	opt_read=${OPTARG}
	;;
    s)
	opt_sleep=${OPTARG}
	;;
    t)
	opt_timeout=${OPTARG}
	;;
    v)
	opt_verbose=1
	;;
    *)
	usage
	exit 1
	;;
    esac
done

if [[ ${opt_verbose} ]] ; then
    note ()
    {
	echo "$@"
    }
fi

var_read=1
var_write_out_lines=1
var_write_err_lines=1

if [[ ${opt_read} || $opt_write_out_lines || $opt_write_err_lines ]] ; then
    while [[ ${opt_read} || ${opt_write_out_lines} || ${opt_write_err_lines} ]] ; do
	if [[ ${opt_write_out_lines} ]] ; then
	    if [[ ${opt_write_out_lines} -gt 0 ]] ; then
		echo "${0##*/}: $$: wrote line ${var_write_out_lines} to ${var_write_out_name}"
		var_write_out_lines=$(( var_write_out_lines + 1 ))
		opt_write_out_lines=$(( opt_write_out_lines - 1 ))
	    else
		opt_write_out_lines=
	    fi
	fi
	if [[ ${opt_write_err_lines} ]] ; then
	    if [[ ${opt_write_err_lines} -gt 0 ]] ; then
		echo "${0##*/}: $$: wrote line ${var_write_err_lines} stderr" >&2
		var_write_err_lines=$(( var_write_err_lines + 1 ))
		opt_write_err_lines=$(( opt_write_err_lines - 1 ))
	    else
		opt_write_err_lines=
	    fi
	fi
	sleep $opt_sleep
	if [[ ${opt_read} ]] ; then
	    if [[ ${opt_read} -gt 0 ]] ; then
		read ${opt_timeout:+-t ${opt_timeout}} line
		note "${0##*/}: $$: read #${var_read} '${line}'"
		var_read=$(( var_read + 1 ))
		opt_read=$(( opt_read - 1 ))
	    else
		opt_read=
	    fi
	fi
    done
else
    if [[ ${opt_sleep} -gt 0 ]] ; then
	note "${0##*/}: $$: sleep ${opt_sleep}"
    fi
    sleep $opt_sleep
fi

if [[ ${opt_kill} ]] ; then
    note "${0##*/}: $$: kill -${opt_kill} $$"
    kill -${opt_kill} $$
fi

if [[ ${opt_exit} -ne 0 ]] ; then
    note "${0##*/}: $$: exit ${opt_exit}"
fi
exit ${opt_exit}
