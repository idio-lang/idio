#! /usr/bin/env bash

# Copyright (c) 2021-2022 Ian Fitchet <idf@idio-lang.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

# 
# gen-idio-config -- create a system-specific header
#

# This is a poor man's autoconf.

handle_EXIT ()
{
    if [[ ${tmpdir:+X} = X ]] ; then
	cd /
	rm -rf ${tmpdir}
    fi
}

trap handle_EXIT EXIT

set -ue

note ()
{
    :
}

usage () 
{
    cat << EOF >&2

${0##*/} generates a system-specific header/makefile
  -M NAME	module [${opt_module}]

  -v		verbose
EOF
}

opt_module=idio
opt_verbose=

while getopts "hM:v" opt ; do
    case "${opt}" in
    h)
	usage
	exit 0
	;;
    M)
	opt_module=${OPTARG}
	;;
    v)
	opt_verbose=1
	;;
    *)
	usage
	exit 1
	;;
    esac
done

shift $(( OPTIND - 1 ))

######################################################################
#
# pseudo-autoconf

case "$(uname -s)" in
Darwin)
    tmpdir=$(mktemp -d /tmp/${0##*/}.XXXXXX)
    ;;
*)
    tmpdir=$(mktemp -d)
    ;;
esac

names=()

##############################

# Mac OS 10.5.8 doesn't have strnlen(3)

names+=(IDIO_HAVE_STRNLEN)
cat <<EOF > ${tmpdir}/test.c
#define _GNU_SOURCE
#include <stdlib.h>
#include <string.h>

int main (int argc, char **argv)
{
    size_t strnlen_r = strnlen ("hello", 2);
    return 0;
}
EOF

IDIO_HAVE_STRNLEN=1
if ! ${CC} -o ${tmpdir}/a.out ${tmpdir}/test.c >/dev/null 2>&1 ; then
    IDIO_HAVE_STRNLEN=0
fi

##############################

# SunOS (OpenIndiana) and Mac OS don't have memrchr(3)

names+=(IDIO_HAVE_MEMRCHR)
cat <<EOF > ${tmpdir}/test.c
#define _GNU_SOURCE
#include <stdlib.h>
#include <string.h>

int main (int argc, char **argv)
{
    char *memrchr_r = memrchr ("hello", 'h', 5);
    return 0;
}
EOF

IDIO_HAVE_MEMRCHR=1
if ! ${CC} -o ${tmpdir}/a.out ${tmpdir}/test.c >/dev/null 2>&1 ; then
    IDIO_HAVE_MEMRCHR=0
fi

##############################

names+=(IDIO_HAVE_PTSNAME_R)
cat <<EOF > ${tmpdir}/test.c
#define _GNU_SOURCE
#include <stdlib.h>

int main (int argc, char **argv)
{
    char buf[512];
    ptsname_r (0, buf, 512);
    return 0;
}
EOF

IDIO_HAVE_PTSNAME_R=1
if ! ${CC} -o ${tmpdir}/a.out ${tmpdir}/test.c >/dev/null 2>&1 ; then
    IDIO_HAVE_PTSNAME_R=0
fi

##############################

# Mac OS 10.5.8 reports POLLNVAL for (pseudo-terminal) devices.  Mac
# OS 10.15.7 doesn't (even if the manual page suggests that it
# should).

names+=(IDIO_CAN_POLL_DEVICE)
cat <<EOF > ${tmpdir}/test.c
#define _GNU_SOURCE
#include <fcntl.h>
#include <poll.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#if defined (__sun) && defined (__SVR4)
#include <stropts.h>
#endif


int main (int argc, char **argv)
{
    int mfd = posix_openpt (O_RDWR | O_NOCTTY);

    if (-1 == mfd) {
	perror ("posix_openpt");
	exit (1);
    }

    if (grantpt (mfd) == -1) {
	perror ("grantpt");
	exit (1);
    }

    if (unlockpt (mfd) == -1) {
	perror ("unlockpt");
	exit (1);
    }

    char *sn = ptsname (mfd);

    if (NULL == sn) {
	perror ("ptsname");
	exit (1);
    }

    int sfd = open (sn, O_RDWR | O_NOCTTY);

    if (-1 == sfd) {
	perror ("open");
	exit (1);
    }

#if defined (__sun) && defined (__SVR4)
    if (ioctl (sfd, I_PUSH, "ptem") == -1) {
	perror ("ioctl (I_PUSH, ptem)");
	exit (1);
    }

    if (ioctl (sfd, I_PUSH, "ldterm") == -1) {
	perror ("ioctl (I_PUSH, ldterm)");
	exit (1);
    }
#endif

    struct pollfd fds[1];

    fds[0].fd = sfd;
    fds[0].events = POLLIN;

    int poll_r = poll (fds, 1, 1);

    if (fds[0].revents & POLLNVAL) {
	exit (1);
    }

    close (sfd);
    close (mfd);

    return 0;
}
EOF

IDIO_CAN_POLL_DEVICE=1
if ! ${CC} -o ${tmpdir}/a.out ${tmpdir}/test.c >/dev/null 2>&1 ; then
    IDIO_CAN_POLL_DEVICE=0
elif ! ${tmpdir}/a.out >/dev/null 2>&1 ; then
    IDIO_CAN_POLL_DEVICE=0
fi

##############################

# Mac OS 10.5.8 doesn't have clock_gettime(2) but there is a
# workaround

names+=(IDIO_HAVE_CLOCK_GETTIME)
cat <<EOF > ${tmpdir}/test.c
#define _GNU_SOURCE
#include <time.h>

int main (int argc, char **argv)
{
    struct timespec ts;
    clock_gettime (CLOCK_MONOTONIC, &ts);
    return 0;
}
EOF

IDIO_HAVE_CLOCK_GETTIME=1
if ! ${CC} -o ${tmpdir}/a.out ${tmpdir}/test.c >/dev/null 2>&1 ; then
    IDIO_HAVE_CLOCK_GETTIME=0
fi

######################################################################

var_MODULE=$( echo ${opt_module} | tr '[a-z]' '[A-Z]' )
var_header=${opt_module}-config.h

cat <<EOF > ${var_header}
/*
 * generated by ${0##*/} on $(date)
 */

/*
 * ${var_header}
 *
 */

#ifndef ${var_MODULE}_CONFIG_H
#define ${var_MODULE}_CONFIG_H

EOF

case "${opt_module}" in
idio)
    (
	for name in ${names[*]} ; do
	    case "${!name}" in
	    1)
		printf "#define %-30s 1\n" ${name}
		;;
	    *)
		printf "#undef  %s\n" ${name}
		;;
	    esac
	done
    ) >> ${var_header}
    ;;
esac

cat <<EOF >> ${var_header}

#endif
EOF

