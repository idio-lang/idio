#! /usr/bin/env bash

# Copyright (c) 2021-2022 Ian Fitchet <idf@idio-lang.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

#
# gen-idio-config -- create a system-specific header
#

# This is a poor man's autoconf.

handle_EXIT ()
{
    if [[ ${tmpdir:+X} = X ]] ; then
	cd /
	rm -rf ${tmpdir}
    fi
}

trap handle_EXIT EXIT

note ()
{
    :
}

# before set -e !!
PKG_CONFIG=$(type -p pkg-config 2>&1)

set -ue

# The pkg-config tests are generic (apart from libcurl...)
idio_pkg_config ()
{
    feature=$1
    shift

    def_cflags=
    def_libs=
    if [[ $# -gt 0 ]] ; then
	def_libs=$1
    fi
    if [[ $# -gt 1 ]] ; then
	def_cflags=$2
    fi

    # Old Bash's don't have ${feature^^}
    FEATURE=$(echo ${feature} | tr '[a-z]' '[A-Z]')

    # older Bash's don't support declare -g so resort to eval
    eval ${FEATURE}_CFLAGS=
    eval ${FEATURE}_LIBS=

    if [[ ${PKG_CONFIG} ]] ; then
	if pkg-config ${feature} ; then
	    eval ${FEATURE}_CFLAGS=\"$(pkg-config --cflags ${feature})\"
	    eval ${FEATURE}_LIBS=\"$(pkg-config --libs ${feature})\"
	fi
    fi

    var=${FEATURE}_LIBS
    if [[ ! ${!var} ]] ; then
	case "${feature}" in
	libcurl)
	    if type -p curl-config >/dev/null 2>&1 ; then
		eval ${FEATURE}_CFLAGS=\"$(curl-config --cflags)\"
		eval ${FEATURE}_LIBS=\"$(curl-config --libs)\"
	    fi
	    ;;
	esac
    fi

    if [[ ! ${!var} ]] ; then
	eval ${FEATURE}_CFLAGS=\"${def_cflags}\"
	eval ${FEATURE}_LIBS=\"${def_libs}\"
    fi
}

# The tests for IDIO_HAVE_* are generic (barring the test code itself)
idio_have ()
{
    feature=$1

    # Old Bash's don't have ${feature^^}
    FEATURE=IDIO_HAVE_$(echo ${feature} | tr '[a-z]' '[A-Z]')

    names+=(${FEATURE})

    # older Bash's don't support declare -g so resort to eval
    eval ${FEATURE}=1

    if ! ${CC} -o ${tmpdir}/a.out ${PROG_LIB}/config-tests/have-${feature}.c >/dev/null 2>&1 ; then
	eval ${FEATURE}=0
    fi

    printf "%-20s %s\n" ${feature} ${!FEATURE}
}

# The tests for IDIO_NO_* are generic (barring the test code itself)
idio_no ()
{
    feature=$1
    shift

    # Old Bash's don't have ${feature^^}
    FEATURE=IDIO_NO_$(echo ${feature} | tr '[a-z]' '[A-Z]')

    names+=(${FEATURE})

    # older Bash's don't support declare -g so resort to eval
    eval ${FEATURE}=

    if ! ${CC} -o ${tmpdir}/a.out ${PROG_LIB}/config-tests/have-${feature}.c ${1+"$@"} >/dev/null 2>&1 ; then
	eval ${FEATURE}=1
    fi

    printf "%-20s " ${feature}
    if [[ ${!FEATURE} ]] ; then
	echo no
    else
	echo yes
    fi
}

usage ()
{
    cat << EOF >&2

${0##*/} generates a system-specific header/makefile
  -M NAME	module [${opt_module}]

  -v		verbose
EOF
}

PROG_DIR=${0%/*}
PROG_TOP=${PROG_DIR%/*}
PROG_LIB=${PROG_TOP}/lib

opt_module=idio
opt_verbose=

while getopts "hM:v" opt ; do
    case "${opt}" in
    h)
	usage
	exit 0
	;;
    M)
	opt_module=${OPTARG}
	;;
    v)
	opt_verbose=1
	;;
    *)
	usage
	exit 1
	;;
    esac
done

shift $(( OPTIND - 1 ))

######################################################################

uname_a=( $(uname -mrps) )

######################################################################
#
# pseudo-autoconf

case "${uname_a[0]}" in
Darwin)
    tmpdir=$(mktemp -d /tmp/${0##*/}.XXXXXX)
    ;;
*)
    tmpdir=$(mktemp -d)
    ;;
esac

names=()

##############################

# Mac OS 10.5.8 doesn't have strnlen(3)

idio_have strnlen

##############################

# SunOS (OpenIndiana) and Mac OS don't have memrchr(3)

idio_have memrchr

##############################

# SunOS, OpenBSD, Mac OS X 10.5.8 do not have ptsname_r

idio_have ptsname_r

##############################

# Mac OS 10.5.8 reports POLLNVAL for (pseudo-terminal) devices.  Mac
# OS 10.15.7 doesn't (even if the manual page suggests that it
# should).

names+=(IDIO_NO_POLL_DEVICE)

IDIO_NO_POLL_DEVICE=0
if ! ${CC} -o ${tmpdir}/a.out ${PROG_LIB}/config-tests/can-poll-device.c >/dev/null 2>&1 ; then
    echo "Failed to compile IDIO_NO_POLL_DEVICE test" >&2
    exit 1
elif ! ${tmpdir}/a.out >/dev/null 2>&1 ; then
    IDIO_NO_POLL_DEVICE=1
fi

if [[ ${IDIO_NO_POLL_DEVICE} -eq 0 ]] ; then

    # WSL1 anomalous behaviour wants us to go a step further.
    #
    # Here, suppose a command running under a pty can have output
    # something and quit.  If everything is a bit slow then, assuming
    # we only now call poll(2) with both output and closed-output
    # pending, WSL1 only reports POLLHUP and does not report
    # POLLIN|POLLHUP.
    #
    # If you slow everything down some more (strace -f -e trace
    # write=all ...) then some gap appears where you'll get a POLLIN
    # and then a POLLHUP.
    #
    # It's somewhat annoying as, everywhere else, a POLLHUP on its own
    # means the other end of the pty has gone away.  If the other end
    # goes away with data pending you'll get POLLIN|POLLHUP for as
    # long as there is data pending and we (will have) handled the
    # POLLIN first.

    # We can't blindly ignore POLLHUP and rely on read(2) returning 0
    # because if nothing was output, perfectly valid for /bin/true,
    # and we have a POLLHUP then read(2) will return EIO.
    #
    # So we could look to capture EIO at every turn.  In the case of
    # the expect code in Idio-land by using trap -- hint: very
    # expensive.  Or we could have the read(2) wrapper code in
    # src/libc-api.c return some sentinel value for EIO which then
    # requires that every caller be aware that the sentinel value is
    # possible.  Or we could special-case WSL1 (and any others) at the
    # one-off cost of an extra clause in this script to identify the
    # issue.

    # Somewhat compounding the issue is that OpenBSD 6 and NetBSD 9
    # will both set IDIO_POLLHUP_OCCLUDES_POLLIN even though they pass
    # all the (problematic on WSL1) expect tests.

    # XXX We only want to say that IDIO_POLLHUP_OCCLUDES_POLLIN if it
    # really does occlude it in which case that's the only time that
    # we can exit (0).  Any other failure is, um, a success.

    names+=(IDIO_POLLHUP_OCCLUDES_POLLIN)

    # NB The logic of these tests are reversed with respect to similar
    # tests.  Only if we can definitively prove that POLLHUP occludes
    # POLLIN can we set the value.

    IDIO_POLLHUP_OCCLUDES_POLLIN=0
    if ! ${CC} -o ${tmpdir}/a.out ${PROG_LIB}/config-tests/test-POLLHUP-occludes-POLLIN.c >/dev/null 2>&1 ; then
	echo "Failed to compile IDIO_POLLHUP_OCCLUDES_POLLIN test" >&2
	exit 1
    elif ${tmpdir}/a.out >/dev/null 2>&1 ; then
	IDIO_POLLHUP_OCCLUDES_POLLIN=1
    fi
fi

##############################

# Mac OS 10.5.8 doesn't have clock_gettime(2) but there is a
# workaround

idio_no clock_gettime

##############################

# Oracle Solaris 11.4 and Alpine/musl don't have REG_STARTEND

idio_no REG_STARTEND

##############################

# SunOS never had the termios->c_[io]speed fields and Alpine/musl
# doesn't either

idio_no termios_speeds

##############################

# SunOS, Mac OS and NetBSD do not have setresgid/setresuid

idio_no set_saved_ids

##############################

# futimes and futimesat are alternately available on some systems

# SunOS does not have futimes

idio_no futimes

# Mac OS, OpenBSD and NetBSD do not have futimesat

idio_no futimesat

# XXX WSL1: ENOSYS: Function not implemented

case "${uname_a[1]}" in
*-Microsoft)
    if ! ${tmpdir}/a.out ${tmpdir}/a.out >/dev/null 2>&1 ; then
	eval IDIO_NO_FUTIMESAT=1
    fi
    ;;
esac

######################################################################

# Mac OS 10.5.8

idio_no faccessat
idio_no fchmodat
idio_no fchownat
idio_no fstatat
idio_no linkat
idio_no mkdirat
idio_no openat
idio_no readlinkat
idio_no renameat
idio_no symlinkat
idio_no unlinkat

######################################################################

# sqlite3_open_v2() in 3.5.0
# sqlite3_close_v2() in 3.7.14
# sqlite3_bind_blob64() in 3.8.7
# sqlite3_bind_text64() in 3.8.7

idio_pkg_config sqlite3 -lsqlite3
case "${uname_a[0]}" in
FreeBSD)
    SQLITE3_CFLAGS="${SQLITE3_CFLAGS} -I/usr/local/include"
    SQLITE3_LIBS="${SQLITE3_LIBS} -L/usr/local/lib"
    ;;
esac

idio_no sqlite3_open_v2 ${SQLITE3_CFLAGS} ${SQLITE3_LIBS}
idio_no sqlite3_close_v2 ${SQLITE3_CFLAGS} ${SQLITE3_LIBS}
idio_no sqlite3_bind_blob64 ${SQLITE3_CFLAGS} ${SQLITE3_LIBS}
idio_no sqlite3_bind_text64 ${SQLITE3_CFLAGS} ${SQLITE3_LIBS}

######################################################################

var_MODULE=$( echo ${opt_module} | tr '[a-z]' '[A-Z]' )
var_header=${opt_module}-config.h

cat <<EOF > ${var_header}
/*
 * generated by ${0##*/} on $(date)
 */

/*
 * ${var_header}
 *
 */

#ifndef ${var_MODULE}_CONFIG_H
#define ${var_MODULE}_CONFIG_H

EOF

case "${opt_module}" in
idio)
    (
	for name in ${names[*]} ; do
	    case "${!name}" in
	    1)
		printf "#define %-30s 1\n" ${name}
		;;
	    *)
		printf "#undef  %s\n" ${name}
		;;
	    esac
	done
    ) >> ${var_header}
    ;;
esac

cat <<EOF >> ${var_header}

#endif
EOF
