#! /usr/bin/env bash

# Copyright (c) 2021-2023 Ian Fitchet <idf@idio-lang.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

# lsof.BSD -- a poor man's lsof cobbled from fstat

handle_EXIT ()
{
    if [[ ${fstat_file} && -f ${fstat_file} ]] ; then
	rm -f ${fstat_file}
    fi
}

usage ()
{
    cat << EOF >&2

${0##*/} replicates *some* of the functionality of lsof(1) using
fstat(1) in *BSD.  Enough to allow the testing to work.

If your distribution of *BSD has lsof (unlikely on OpenBSD):

# pkg_add lsof
Can't find lsof
Obsolete package: lsof (ancient software that doesn't work)

then you should be using it rather than this script!

usage: $0 [options]
where options are:
  -a		ignored
  -d FDS	list of file descriptors, eg. 0-2
  -F FIELDS	fields for output
  -p PID	process ID to test, default is this script
  -w		ignored

  -h		this message
EOF
}

_uname=( $(uname -mrps) )
OS=${_uname[0]}

case "${OS}" in
*BSD) ;;
*)
    echo "$0: *BSD only" >&2
    exit 1
    ;;
esac


opt_p=$$
opt_d=
opt_F=

while getopts "ap:d:hF:w" opt ; do
    case "${opt}" in
    a)
	;;
    d)
	opt_d=${OPTARG}
	;;
    F)
	opt_F=${OPTARG}
	;;
    h)
	usage
	exit 0
	;;
    p)
	opt_p=${OPTARG}
	;;
    w)
	;;
    *)
	usage
	exit 1
	;;
    esac
done

fstat_file=/tmp/${0##*/}.$$.fstat

fstat -p ${opt_p} > ${fstat_file}

# fstat generic output: it's a wild ride

# OpenBSD

# USER     CMD          PID   FD MOUNT        INUM  MODE         R/W    SZ|DV
# idf      sshd       57119 text /usr       129712  -r-xr-xr-x     r   961184
# idf      sshd       57119   wd /               2  drwxr-xr-x     r      512
# idf      sshd       57119    0 /           62298  crw-rw-rw-    rw     null
# idf      sshd       57119    1 /           62298  crw-rw-rw-    rw     null
# idf      sshd       57119    2 /           62298  crw-rw-rw-    rw     null
# idf      sshd       57119    3* unix stream 0x0
# idf      sshd       57119    4* internet stream tcp 0x0 here:22 <-- there:54441
# idf      sshd       57119    5 pipe 0x0 state:
# idf      sshd       57119    6* unix stream 0x0
# idf      sshd       57119    7 pipe 0x0 state:
# idf      sshd       57119    8* internet stream tcp 0x0 127.0.0.1:6010
# idf      sshd       57119    9* internet6 stream tcp 0x0 [::1]:6010
# idf      sshd       57119   10* unix stream 0x0 /tmp/ssh-EgDr0AwZEq/agent.57119
# idf      sshd       57119   11 /           61631  crw-rw-rw-   rwe    ptyp0
# idf      sshd       57119   13 /           61631  crw-rw-rw-   rwe    ptyp0
# idf      sshd       57119   14 /           61631  crw-rw-rw-    rw    ptyp0

# idf      fstat      12759    0 pipe 0x0 state: E

# FreeBSD

# USER     CMD          PID   FD MOUNT       INUM MODE         SZ|DV R/W
# idf      bash        8748   wd  /         1422903 drwxrwxr-x     512 r

# idf      idio.0.3   68882   90* pipe ffffa000665c35d0 <-> ffffa000665c3730      0 rw
# idf      idio.0.3   68882  107* local stream ffffa00028d57a00 <-> ffffa00028d57900

# Wait!  The last two columns are toggled?

# idf      sshd       36742    3* local stream ffffa00031f80100 <-> ffffa0001f4d3e00
# idf      sshd       36742    4* internet stream tcp ffff0000e33260e0
# idf      sshd       36742    5* internet6 stream tcp ffff0000e32ddca8
# idf      sshd       36742    6* local stream ffffa0001f4d3a00
# idf      sshd       36742    7* internet stream tcp ffff0000e32de0e0
# idf      sshd       36742    8* local stream ffffa0001f4d3b00
# idf      sshd       36742    9* pseudo-terminal master      pts/1 rw
# idf      sshd       36742   11* pseudo-terminal master      pts/1 rw
# idf      sshd       36742   12* pseudo-terminal master      pts/1 rw

# NetBSD

# USER     CMD          PID   FD MOUNT       INUM MODE         SZ|DV R/W
# idf      sshd         663   wd  /               2 drwxr-xr-x     512 r
# idf      sshd         663    0  /           22924 crw-rw-rw-    null rw
# idf      sshd         663    1  /           22924 crw-rw-rw-    null rw
# idf      sshd         663    2  /           22924 crw-rw-rw-    null rw
# idf      sshd         663    3* unix stream  0xffff93c1ce701d58 <-> 0xffff93c1ce701738
# idf      sshd         663    4* internet stream tcp here:54541 <-> there:ssh
# idf      sshd         663    5* pipe 0xffff93c1d32449b8 <- 0xffff93c1d3285ae8 rn
# idf      sshd         663    6* unix stream ffff93c1ce701dc8
# idf      sshd         663    7* pipe 0xffff93c1d3285ae8 -> 0xffff93c1d32449b8 wn
# idf      sshd         663    8* unix dgram  <-> /var/run/log [using]
# idf      sshd         663    9* internet6 stream tcp localhost:6010
# idf      sshd         663   10* internet stream tcp localhost:6010
# idf      sshd         663   11* unix stream  <-> /tmp/ssh-43E6JsxoKv/agent.663 [creat]
# idf      sshd         663   12  /dev/pts        4 crw-rw-rw-   ptc,0  rw
# idf      sshd         663   14  /dev/pts        4 crw-rw-rw-   ptc,0  rw
# idf      sshd         663   15  /dev/pts        4 crw-rw-rw-   ptc,0  rw

if [[ ! ${opt_F} ]] ; then
    printf "%-9s %-9s %5s %4s  %-50s %7s  %-12s %3s  %s\n" USER CMD PID FD MOUNT INUM MODE "R/W" "SZ|DV"
fi

(
    read headers

    # make the assumption that the colums are R/W then SZ_DV and
    # remember to toggle later
    toggle=
    case "${headers}" in
    *W)
	toggle=1
	;;
    esac

    printed_pid=

    while read -a fields ; do
	nfields=${#fields[*]}
	fi=0
	user=${fields[fi++]}
	cmd=${fields[fi++]}
	pid=${fields[fi++]}
	fd=${fields[fi++]}
	mount=${fields[fi++]}

	inum=
	mode=
	rw=
	sz_dv=

	# much now depends on "mount" as it can be a pipe,
	# local/internet stream ... which affect some later values.
	case "${mount}" in
	pipe)
	    # cat /dev/null | fstat -p $BASHPID | cat -
	    case "${OS}" in
	    FreeBSD)
		# idf      fstat       1547    0* pipe fffff80003e26000 <-> fffff80003e26160      0 rw
		fi=$(( fi - 1 ))
		mount=${fields[*]:fi:4}
		rw=${fields[fi+4]}
		sz_dv=${fields[fi+5]}
		;;
	    NetBSD)
		# idf      fstat       2580    1* pipe 0xffff93c1d3285ae8 -> 0xffff93c1d32449b8 w
		fi=$(( fi - 1 ))
		mount=${fields[*]:fi:4}
		# deliberately wrong - will be toggled below
		sz_dv=${fields[fi+4]}
		;;
	    OpenBSD)
		# idf      fstat      28224    0 pipe 0x0 state: E
		fi=$(( fi - 1 ))
		mount=${fields[*]:fi}
		;;
	    esac
	    ;;
	local|unix)
	    # idf      idio.0.3   68882  107* local stream ffffa00028d57a00 <-> ffffa00028d57900
	    fi=$(( fi - 1 ))
	    mount=${fields[*]:fi:5}
	    ;;
	internet|internet6)
	    # idf      sshd       30961    4* internet stream tcp 0x0 here:22 <-- there:54661
	    # idf      sshd         663    4* internet stream tcp here:54541 <-> there:ssh
	    # idf      sshd        1307    4* internet stream tcp fffffe0093bd5ca8
	    fi=$(( fi - 1 ))
	    mount=${fields[*]:fi}
	    ;;
	pseudo-terminal)
	    # idf      sshd        1307    9* pseudo-terminal master      pts/0 rw
	    fi=$(( fi - 1 ))
	    mount=${fields[*]:fi:3}
	    # deliberately wrong - will be toggled below
	    sz_dv=${fields[fi+3]}
	    ;;
	*)
	    # idf      idio.0.3   68882    6 /dev        105 crw--w----   pts/0 rw
	    inum=${fields[fi++]}
	    mode=${fields[fi++]}
	    rw=${fields[fi++]}
	    sz_dv=${fields[fi++]}
	esac

	# XXX do this before the NetBSD pipe bit as it uses ${rw}
	if [[ ${toggle} ]] ; then
	    t=${rw}
	    rw=${sz_dv}
	    sz_dv=${t}
	fi

	if [[ ! ${rw} ]] ; then
	    case "${mount}" in
	    *" <- "*|*" <-- "*)
		rw=r
		;;
	    *" -> "*|*" --> "*)
		rw=w
		;;
	    *" <-> "*)
		rw=rw
		;;
	    esac
	fi

	if [[ ${opt_F} ]] ; then
	    if [[ ! ${printed_pid} ]] ; then
		echo p${pid}
		printed_pid=1
	    fi
	fi

	case "${fd}" in
	[0-9]*\*)
	    fd=${fd%\*}
	    ;;
	esac

	p=
	if [[ ${opt_d} ]] ; then
	    case "${fd}" in
	    [${opt_d}])
		p=1
		;;
	    esac
	else
	    p=1
	fi

	if [[ ${opt_F} && ! ${p} ]] ; then
	    continue
	fi

	# One of the reasons lsof is declared obsolete is the dubious
	# mapping from inode to any extant file name.  Technically
	# correct, of course.
	#
	# In the meanwhile...
	name=UNKNOWN

	# sz_dv is SZ|DV for device
	case "${sz_dv}" in
	[0-9]*)
	    # It will be followed by an asterisk ('*') if the inode is
	    # unlinked from disk.
	    case "${inum}" in
	    *\*)
		inum=${inum%?}
		;;
	    esac

	    # I can't believe many would regard this call to find as
	    # "efficient" but we might do this for the same inode
	    # twice per invocation of lsof
	    name=$(find ${mount} -xdev -inum ${inum} 2>/dev/null)
	    case "${name}" in
	    '')
		name=inode-${inum}
		;;
	    esac
	    ;;
	null)
	    name=/dev/null
	    ;;
	*)
	    name=${sz_dv}
	    ;;
	esac

	case "${mode}" in
	-*)
	    ftype=REG
	    ;;
	d*)
	    ftype=DIR
	    ;;
	c*)
	    ftype=CHR
	    ;;
	p*)
	    ftype=PIPE
	    ;;
	*)
	    case "${mount}" in
	    pipe*)
		ftype=PIPE
		name=pipe
		;;
	    *)
		ftype=UNKNOWN
		;;
	    esac
	    ;;
	esac

	case "${opt_F}" in
	*f*)
	    echo f${fd}
	    ;;
	esac

	case "${opt_F}" in
	*t*)
	    echo t${ftype}
	    ;;
	esac

	case "${opt_F}" in
	*n*)
	    echo n${name}
	    ;;
	esac

	case "${opt_F}" in
	*i*)
	    echo i${inum}
	    ;;
	esac

	if [[ ${opt_F} ]] ; then
	    continue
	fi

	if [[ ${p} ]] ; then
	    printf "%-9s %-9s %5s %4s  %-50s %7s  %-12s %-3s  %s\n" ${user} ${cmd} ${pid} ${fd} "${mount}" "${inum:--}" "${mode:--}" "${rw:--}" "${sz_dv:--}"
	fi
    done
) < ${fstat_file}

rm -f ${fstat_file}
