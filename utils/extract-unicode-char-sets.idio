#*

Copyright (c) 2020-2021 Ian Fitchet <idf(at)idio-lang.org>

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

unicode.idio

This was going to be a port of SRFI-14 character-sets library to be
modified with John Cowan's 2019 Unicode comments,
https://srfi.schemers.org/srfi-14/contrib/unicode-2019/CharsetDefs.html
as noted in https://srfi.schemers.org/srfi-14/srfi-14.html.

However with bitsets available as an Idio type (created for this
purpose) I think we can skip it and derive the nominal SRFI-14-ish
character sets from UnicodeData.txt (and others) directly.


http://www.unicode.org/reports/tr44/

Broadly, Unicode have defined 17 Planes each with a potential for
65,536 code points.  That makes any mapping be at least 1114109
entries long.  Blocks within those Planes are assigned for groups of
code points with a common ancestry.  For example, code points U+0000
through U+007F are ASCII.  Some of those blocks are complete because
the group is well defined, eg. ASCII, whereas others include
unassigned code points leaving room for later additions.  The order in
which those blocks are assigned is (probably) an editorial whim.

Note: even though Unicode Planes 4-13 are currently unassigned, see
https://en.wikipedia.org/wiki/Plane_(Unicode), it isn't clear that
Unicode will stick to 17 planes.  Given that we have to read the
Unicode UCD files we might as well leave the actual number of Unicode
code points/Planes dynamic based on reading the files.

Further note: given that those 10 planes are unassigned, perhaps we
should invent a sparse bitset format for charsets saving at least 650k
bits per charset.

UnicodeData.txt is a long list (34k entries as of Unicode 13.0.0) of
individual code points and code point ranges (whose individual code
point properties are derivable within the range).  Each code point has
a primary Category: Letter lowercase, "Ll", Letter uppercase, "Lu",
Number digit, "Nd", Symbol Math, "Sm" etc.

The set of code points is not contiguous and the current highest
numbered code point is 10FFFD, Plane 16 Private Use, Last.

DerivedCoreProperties.txt is a fairly long list (12k lines) which
summaries collections of code points which share a common Property:
Alphabetic, Math, etc..  For example, the Property Lowercase is the
collection of the Category Ll plus the Property Other_Lowercase.

Other_Lowercase includes 00AA, FEMININE ORDINAL INDICATOR and 00BA,
MASCULINE ORDINAL INDICATOR, for example.

DerivedCoreProperties.txt defines other Properties such as
ID_Start (the first code point of an identifier) and
ID_Continue (subsequent code points for identifiers).  I'm not sure
where they get their information from as surely such a set is
language-specific?  You are welcome to read
http://www.unicode.org/reports/tr31/ to understand their thinking.

PropList.txt is a fairly short file with more Properties.  Here we're
specifically looking to pick up on the White_Space Property.

If you did trust their ID_Start then you might want to be aware of
their Other_ID_Start too.

Again, it's hard to see how they can clearly define a
Pattern_White_Space and Pattern_Syntax Properties.

GraphemeBreakProperty.txt is a fairly short file with more
breaks-between-things Properties.  

------------------------------

In the meanwhile this file, unicode.idio, serves a dual purpose.  By
default it defines the SRFI-14 char-set bitsets as derived from the
above files and loaded by discretion (unicode.ascii.idio or
unicode.full.idio).

Where did they come from?  If the need arises, set char-set:ascii to
#n (as commented out below) then the bottom section of code kicks in
and (load "unicode") will trawl through the above files and prints to
unicode.{ascii,full}.idio the current bitsets.  You can then check and
copy them over the files in .../lib.

Other generated tables include:

char-set:simple-upper-case-map and char-set:simple-lower-case-map
which use the fields (12) and (13) in UnicodeData.txt to generate
simple mappings.

Beware that these two tables are NOT symmetric.  For example:

to-lower (0130;LATIN CAPITAL LETTER I WITH DOT ABOVE)	= 0069;LATIN SMALL LETTER I
to-upper (0069;LATIN SMALL LETTER I)			= 0049;LATIN CAPITAL LETTER I
to-lower (0049;LATIN CAPITAL LETTER I)			= 0069;LATIN SMALL LETTER I

to-upper (01C8;LATIN CAPITAL LETTER L WITH SMALL LETTER J)	= 01C7;LATIN CAPITAL LETTER LJ
to-lower (01C7;LATIN CAPITAL LETTER LJ)				= 01C9;LATIN SMALL LETTER LJ
to-upper (01C9;LATIN SMALL LETTER LJ)				= 01C7;LATIN CAPITAL LETTER LJ

*#

module unicode/gen
import unicode
import SRFI-14

; The source for most of these files is
; https://www.unicode.org/Public/UCD/latest/ucd/ and
; https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt
UD := "../utils/Unicode/UnicodeData.txt"
DCP := "../utils/Unicode/DerivedCoreProperties.txt"
PL := "../utils/Unicode/PropList.txt"
GBP := "../utils/Unicode/GraphemeBreakProperty.txt"

plane-sets := '((ASCII #x80) (BMP0 #x10000) (full #x110000))

char-sets := '(
		(char-set:lower-case "Property Lowercase")
		(char-set:upper-case "Property Uppercase")
		(char-set:title-case "Category Lt")
		(char-set:letter "Property Alphabetic")
		(char-set:digit "Category Nd")
		(char-set:letter+digit "Property Alphabetic + Category Nd")
		(char-set:graphic "Category L* + Category N* + Category M* + Category S* + Category P*")
		(char-set:printing "char-set:graphic + char-set:whitespace")
		(char-set:whitespace "Property White_Space")
		(char-set:iso-control "0000..001F + 007F..009F")
		(char-set:punctuation "Category P*")
		(char-set:symbol "Category S*")
		(char-set:hex-digit "0030..0039 + 0041..0046 + 0061..0066")
		(char-set:blank "Category Zs + 0009")
		(char-set:ascii "0000..007F")
		(char-set:empty "empty")
		(char-set:full "full == ~ empty")
		(char-set:nonl "char-set:full excl. #\\{newline}")
		(char-set:control "Property Control")
		(char-set:word-constituent "char-set:letter+digit + _")
		(char-set:cased "char-set:upper-case + char-set:lower-case + char-set:title-case")

		(%char-set:letter "char-set:letter restricted to ASCII range")
		(%char-set:lower-case "char-set:lower-case restricted to ASCII range")
		(%char-set:upper-case "char-set:upper-case restricted to ASCII range")
		(%char-set:digit "char-set:digit restricted to ASCII range")
		(%char-set:letter+digit "char-set:letter+digit restricted to ASCII range")
		(%char-set:punctuation "char-set:punctuation restricted to ASCII range")
		(%char-set:symbol "char-set:symbol restricted to ASCII range")
		(%char-set:graphic "char-set:graphic restricted to ASCII range")
		(%char-set:whitespace "char-set:whitespace restricted to ASCII range")
		(%char-set:printing "char-set:printing restricted to ASCII range")
		(%char-set:iso-control "char-set:iso-control restricted to ASCII range")
		(%char-set:word-constituent "char-set:word-constituent restricted to ASCII range")

		(char-set:regional-indicator "Property Regional_Indicator")
		(char-set:extend-or-spacing-mark "Property Extend + Property SpacingMark")
		(char-set:hangul-l "Property L")
		(char-set:hangul-v "Property V")
		(char-set:hangul-t "Property T")
		(char-set:hangul-lv "Property LV")
		(char-set:hangul-lvt "Property LVT")
)

define-template (declare-base-char-sets pn & cs) {
  ps-data := assv pn plane-sets
  ps-str := symbol->string (ph ps-data)
  cs-size := pht ps-data
  nplanes := unicode->plane (integer->unicode (cs-size - 1))

  empty-sym := string->symbol (append-string (symbol->string pn) "-char-set:empty")
  full-sym := string->symbol (append-string (symbol->string pn) "-char-set:full")
  nonl-sym := string->symbol (append-string (symbol->string pn) "-char-set:nonl")
  sucm-sym := string->symbol (append-string (symbol->string pn) "-char-set:simple-upper-case-map")
  sucm-setter-sym := string->symbol (append-string "set-" (symbol->string pn) "-char-set:simple-upper-case-map")
  slcm-sym := string->symbol (append-string (symbol->string pn) "-char-set:simple-lower-case-map")
  slcm-setter-sym := string->symbol (append-string "set-" (symbol->string pn) "-char-set:simple-lower-case-map")

  #T{
    $@(map
       (function (csn) {
	 cs-str := append-string ps-str "-char-set:" (symbol->string csn)
	 cs-sym := string->symbol cs-str

	 setter-str := append-string "set-" cs-str
	 setter-sym := string->symbol setter-str

	 range-setter-str := append-string "range-" setter-str
	 range-setter-sym := string->symbol range-setter-str

	 #T{
	   
	   $cs-sym := make-sparse-char-set $cs-size
	   (do ((i 0 (i + 1)))
	    ((eq i $nplanes)
	     #n) {
	     array-ref $cs-sym.planes i
	   })

	   define ($setter-sym cp) {
	     if (lt cp $cs-size) {
	       if (integer? cp) {
		 cp = integer->unicode cp
	       }
	       char-set-set! $cs-sym cp
	     }
	   }
	   
	   define ($range-setter-sym cp last) {
	     if (gt cp last) #n {
	       $setter-sym cp
	       $range-setter-sym (cp + 1) last
	     }
	   }
	   
	 }
       })
       cs)

    $empty-sym := make-sparse-char-set $cs-size

    $full-sym := complement-char-set $empty-sym

    $nonl-sym := copy-char-set $full-sym
    
    char-set-clear! $nonl-sym #\{newline}
  
  $sucm-sym := make-hash #n #n 64

  define ($sucm-setter-sym cp cased-cp) {
    (cond
     ((integer? cp) {
       if (lt cp $cs-size) {
	 hash-set! $sucm-sym cp cased-cp
       }
     })
     ((unicode? cp) {
       if (lt (unicode->integer cp) $cs-size) {
	 hash-set! $sucm-sym cp cased-cp
       }
     }))
  }
  
  $slcm-sym := make-hash #n #n 64

  define ($slcm-setter-sym cp cased-cp) {
    (cond
     ((integer? cp) {
       if (lt cp $cs-size) {
	 hash-set! $slcm-sym cp cased-cp
       }
     })
     ((unicode? cp) {
       if (lt (unicode->integer cp) $cs-size) {
	 hash-set! $slcm-sym cp cased-cp
       }
     }))
  }
  
}
}

declare-base-char-sets ASCII lower-case upper-case title-case letter digit graphic whitespace iso-control punctuation symbol hex-digit blank ascii control regional-indicator extend-or-spacing-mark hangul-l hangul-v hangul-t hangul-lv hangul-lvt
declare-base-char-sets BMP0 lower-case upper-case title-case letter digit graphic whitespace iso-control punctuation symbol hex-digit blank ascii control regional-indicator extend-or-spacing-mark hangul-l hangul-v hangul-t hangul-lv hangul-lvt
declare-base-char-sets full lower-case upper-case title-case letter digit graphic whitespace iso-control punctuation symbol hex-digit blank ascii control regional-indicator extend-or-spacing-mark hangul-l hangul-v hangul-t hangul-lv hangul-lvt

eprintf "Parsing %s\n" UD

define (ud-parser) {
  loop :+ function () {
    if (eof? (current-input-handle)) #n {
      line := (read-line)
      ;display* line
      parts := split-string-exactly line ";"
      if (gt (string-length (ph parts)) 0) {
	cp-i := read-number (ph parts) 16
	cp-u := integer->unicode cp-i

	cat := phtt parts

	(cond
	 ((string=? cat "Lt") {
	   set-ASCII-char-set:title-case cp-i
	   set-BMP0-char-set:title-case cp-i
	   set-full-char-set:title-case cp-i
	 })
	 ((string=? cat "Nd") {
	   set-ASCII-char-set:digit cp-i
	   set-BMP0-char-set:digit cp-i
	   set-full-char-set:digit cp-i
	 })
	 ((string=? cat "Zs") {
	   set-ASCII-char-set:blank cp-i
	   set-BMP0-char-set:blank cp-i
	   set-full-char-set:blank cp-i
	 }))

	cat1 := string-ref cat 0

	(case cat1
	 ((#\L #\N #\M #\S #\P) {
	   set-ASCII-char-set:graphic cp-i
	   set-BMP0-char-set:graphic cp-i
	   set-full-char-set:graphic cp-i
	 }))

	(case cat1
	 ((#\P) {
	   set-ASCII-char-set:punctuation cp-i
	   set-BMP0-char-set:punctuation cp-i
	   set-full-char-set:punctuation cp-i
	 })
	 ((#\S) {
	   set-ASCII-char-set:symbol cp-i
	   set-BMP0-char-set:symbol cp-i
	   set-full-char-set:symbol cp-i
	 }))

	; upper & lower case mappings
	if (ge (length parts) 13) {
	  uc-cp-str := nth parts 13
	  if (gt (string-length uc-cp-str) 0) {
	    uc-cp-i := read-number uc-cp-str 16
	    uc-cp-u := integer->unicode uc-cp-i
	    set-ASCII-char-set:simple-upper-case-map cp-i uc-cp-i
	    set-BMP0-char-set:simple-upper-case-map cp-i uc-cp-i
	    set-full-char-set:simple-upper-case-map cp-i uc-cp-i
	    set-ASCII-char-set:simple-upper-case-map cp-u uc-cp-u
	    set-BMP0-char-set:simple-upper-case-map cp-u uc-cp-u
	    set-full-char-set:simple-upper-case-map cp-u uc-cp-u
	  }
	}
	if (ge (length parts) 14) {
	  lc-cp-str := nth parts 14
	  if (gt (string-length lc-cp-str) 0) {
	    lc-cp-i := read-number lc-cp-str 16
	    lc-cp-u := integer->unicode lc-cp-i
	    set-ASCII-char-set:simple-lower-case-map cp-i lc-cp-i
	    set-BMP0-char-set:simple-lower-case-map cp-i lc-cp-i
	    set-full-char-set:simple-lower-case-map cp-i lc-cp-i
	    set-ASCII-char-set:simple-lower-case-map cp-u lc-cp-u
	    set-BMP0-char-set:simple-lower-case-map cp-u lc-cp-u
	    set-full-char-set:simple-lower-case-map cp-u lc-cp-u
	  }
	}
      }
      (loop)
    }
  }
  (loop)
}

with-input-from-file UD ud-parser

define (pl-parser) {
  loop :+ function () {
    if (eof? (current-input-handle)) #n {
      line := (read-line)
      if (gt (string-length line) 0) {
	(case (string-ref line 0)
	 ((#\#) #n)
	 (else {
	   parts := split-string line "#"
	   if (gt (string-length (ph parts)) 0) {
	     dcp_parts := split-string (ph parts) ";"
	     range := map (function (cp-str) {
	       read-number cp-str 16
	     }) (split-string (ph dcp_parts) "..")
	     (case (length range)
	      ((1) (range = (list (ph range) (ph range))))
	      ((2) #n)
	      (else {
		eprintf "%s: %s elements in code point range: %s\n" (handle-location (current-input-handle)) (length range) line
		error/type ^runtime-error 'pl-parser "unexpected number of elements" line
	      }))

	     (cond
	      ((string=? (pht dcp_parts) " White_Space ") {
		range-set-ASCII-char-set:whitespace (ph range) (pht range)
		range-set-BMP0-char-set:whitespace (ph range) (pht range)
		range-set-full-char-set:whitespace (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " Regional_Indicator ") {
		range-set-ASCII-char-set:regional-indicator (ph range) (pht range)
		range-set-BMP0-char-set:regional-indicator (ph range) (pht range)
		range-set-full-char-set:regional-indicator (ph range) (pht range)
	      }))
	   }
	 }))
      }
      (loop)
    }
  }
  (loop)
}

with-input-from-file PL pl-parser

eprintf "Parsing %s\n" DCP

define (dcp-parser) {
  loop :+ function () {
    if (eof? (current-input-handle)) #n {
      line := (read-line)
      if (gt (string-length line) 0) {
	(case (string-ref line 0)
	 ((#\#) #n)
	 (else {
	   parts := split-string line "#"
	   if (gt (string-length (ph parts)) 0) {
	     dcp_parts := split-string (ph parts) ";"
	     range := map (function (cp-str) {
	       read-number cp-str 16
	     }) (split-string (ph dcp_parts) "..")
	     (case (length range)
	      ((1) (range = (list (ph range) (ph range))))
	      ((2) #n)
	      (else {
		eprintf "%s: %s elements in code point range: %s\n" (handle-location (current-input-handle)) (length range) line
		error/type ^runtime-error 'dcp-parser "unexpected number of elements" line
	      }))

	     (cond
	      ((string=? (pht dcp_parts) " Lowercase ") {
		range-set-ASCII-char-set:lower-case (ph range) (pht range)
		range-set-BMP0-char-set:lower-case (ph range) (pht range)
		range-set-full-char-set:lower-case (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " Uppercase ") {
		range-set-ASCII-char-set:upper-case (ph range) (pht range)
		range-set-BMP0-char-set:upper-case (ph range) (pht range)
		range-set-full-char-set:upper-case (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " Alphabetic ") {
		range-set-ASCII-char-set:letter (ph range) (pht range)
		range-set-BMP0-char-set:letter (ph range) (pht range)
		range-set-full-char-set:letter (ph range) (pht range)
	      }))
	   }
	 }))
      }
      (loop)
    }
  }
  (loop)
}

with-input-from-file DCP dcp-parser

eprintf "Parsing %s\n" GBP

define (gbp-parser) {
  loop :+ function () {
    if (eof? (current-input-handle)) #n {
      line := (read-line)
      if (gt (string-length line) 0) {
	(case (string-ref line 0)
	 ((#\#) #n)
	 (else {
	   parts := split-string line "#"
	   if (gt (string-length (ph parts)) 0) {
	     dcp_parts := split-string (ph parts) ";"
	     range := map (function (cp-str) {
	       read-number cp-str 16
	     }) (split-string (ph dcp_parts) "..")
	     (case (length range)
	      ((1) (range = (list (ph range) (ph range))))
	      ((2) #n)
	      (else {
		eprintf "%s: %s elements in code point range: %s\n" (handle-location (current-input-handle)) (length range) line
		error/type ^runtime-error 'gbp-parser "unexpected number of elements" line
	      }))


	     (cond
	      ((string=? (pht dcp_parts) " Control ") {
		range-set-ASCII-char-set:control (ph range) (pht range)
		range-set-BMP0-char-set:control (ph range) (pht range)
		range-set-full-char-set:control (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " Extend ") {
		range-set-ASCII-char-set:extend-or-spacing-mark (ph range) (pht range)
		range-set-BMP0-char-set:extend-or-spacing-mark (ph range) (pht range)
		range-set-full-char-set:extend-or-spacing-mark (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " SpacingMark ") {
		range-set-ASCII-char-set:extend-or-spacing-mark (ph range) (pht range)
		range-set-BMP0-char-set:extend-or-spacing-mark (ph range) (pht range)
		range-set-full-char-set:extend-or-spacing-mark (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " L ") {
		range-set-ASCII-char-set:hangul-l (ph range) (pht range)
		range-set-BMP0-char-set:hangul-l (ph range) (pht range)
		range-set-full-char-set:hangul-l (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " V ") {
		range-set-ASCII-char-set:hangul-v (ph range) (pht range)
		range-set-BMP0-char-set:hangul-v (ph range) (pht range)
		range-set-full-char-set:hangul-v (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " T ") {
		range-set-ASCII-char-set:hangul-t (ph range) (pht range)
		range-set-BMP0-char-set:hangul-t (ph range) (pht range)
		range-set-full-char-set:hangul-t (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " LV ") {
		range-set-ASCII-char-set:hangul-lv (ph range) (pht range)
		range-set-BMP0-char-set:hangul-lv (ph range) (pht range)
		range-set-full-char-set:hangul-lv (ph range) (pht range)
	      })
	      ((string=? (pht dcp_parts) " LVT ") {
		range-set-ASCII-char-set:hangul-lvt (ph range) (pht range)
		range-set-BMP0-char-set:hangul-lvt (ph range) (pht range)
		range-set-full-char-set:hangul-lvt (ph range) (pht range)
	      }))
	   }
	 }))
      }
      (loop)
    }
  }
  (loop)
}

with-input-from-file GBP gbp-parser

define-template (declare-derived-char-sets pn) {
  ps := assv pn plane-sets

  letter-sym := string->symbol (append-string (symbol->string pn) "-char-set:letter")
  digit-sym := string->symbol (append-string (symbol->string pn) "-char-set:digit")
  letter+digit-sym := string->symbol (append-string (symbol->string pn) "-char-set:letter+digit")
  graphic-sym := string->symbol (append-string (symbol->string pn) "-char-set:graphic")
  whitespace-sym := string->symbol (append-string (symbol->string pn) "-char-set:whitespace")
  printing-sym := string->symbol (append-string (symbol->string pn) "-char-set:printing")
  word-constituent-sym := string->symbol (append-string (symbol->string pn) "-char-set:word-constituent")
  upper-case-sym := string->symbol (append-string (symbol->string pn) "-char-set:upper-case")
  lower-case-sym := string->symbol (append-string (symbol->string pn) "-char-set:lower-case")
  title-case-sym := string->symbol (append-string (symbol->string pn) "-char-set:title-case")
  cased-sym := string->symbol (append-string (symbol->string pn) "-char-set:cased")
  letter-sym := string->symbol (append-string (symbol->string pn) "-char-set:letter")

  #T{
    $letter+digit-sym		:= union-char-set $letter-sym $digit-sym
    $printing-sym		:= union-char-set $graphic-sym $whitespace-sym
    $word-constituent-sym	:= copy-char-set $letter+digit-sym
    char-set-set! $word-constituent-sym (unicode->integer #\_)
    $cased-sym			:= ior-char-set $upper-case-sym $lower-case-sym $title-case-sym
  }
}

declare-derived-char-sets ASCII
declare-derived-char-sets BMP0
declare-derived-char-sets full

eprintf "Parsing %s\n" PL

define (bs-range-loop bs cp last) {
  if (gt cp last) #n {
    char-set-set! bs cp
    bs-range-loop bs (cp + 1) last
  }
}

range-set-ASCII-char-set:iso-control #x0000 #x001F
range-set-ASCII-char-set:iso-control #x007F #x009F ; obviously limited to 0x007f

range-set-BMP0-char-set:iso-control #x0000 #x001F
range-set-BMP0-char-set:iso-control #x007F #x009F

range-set-full-char-set:iso-control #x0000 #x001F
range-set-full-char-set:iso-control #x007F #x009F

range-set-ASCII-char-set:hex-digit #x0030 #x0039
range-set-ASCII-char-set:hex-digit #x0041 #x0046
range-set-ASCII-char-set:hex-digit #x0061 #x0066

range-set-BMP0-char-set:hex-digit #x0030 #x0039
range-set-BMP0-char-set:hex-digit #x0041 #x0046
range-set-BMP0-char-set:hex-digit #x0061 #x0066

range-set-full-char-set:hex-digit #x0030 #x0039
range-set-full-char-set:hex-digit #x0041 #x0046
range-set-full-char-set:hex-digit #x0061 #x0066

set-ASCII-char-set:blank #x0009
set-BMP0-char-set:blank #x0009
set-full-char-set:blank #x0009

range-set-ASCII-char-set:ascii #x0000 #x007f
range-set-BMP0-char-set:ascii #x0000 #x007f
range-set-full-char-set:ascii #x0000 #x007f

define-template (print-char-sets pn & cs) {
  pn-str := symbol->string pn

  ascii-cs-sym := string->symbol (append-string pn-str "-char-set:ascii")
  
  sucm-sym := string->symbol (append-string pn-str "-char-set:simple-upper-case-map")
  slcm-sym := string->symbol (append-string pn-str "-char-set:simple-lower-case-map")

  #T{
    $@(map
       (function (csn) {
	 csn-str := symbol->string csn
	 ascii-range := #f
	 if (eq? (string-ref csn-str 0) #\%) {
	   ascii-range = #t
	   csn-str = substring csn-str 1 (string-length csn-str)
	 }
	 
	 ; char-set:lower-case
	 cs-str := append-string (if ascii-range "%" "") "char-set:" csn-str
	 cs-sym := string->symbol cs-str

	 cs-def := assq cs-sym char-sets

	 ; ASCII-char-set:lower-case
	 qual-cs-str := append-string pn-str "-char-set:" csn-str
	 qual-cs-sym := string->symbol qual-cs-str

	 val := qual-cs-sym

	 if ascii-range {
	   val = list 'intersection-char-set ascii-cs-sym val
	 }

	 if cs-def {
	   #T{
	     
	     printf "\n; %s is %s\n%-20s = make-sparse-char-set %d %s\n" '$cs-sym $(pht cs-def) '$cs-sym $val.size $val.planes

	   }
	 }
       })
       cs)

    printf "\n; %s\n%-20s = %s\n" "Simple uppercase mapping (single character result)" "char-set:simple-upper-case-map" $sucm-sym

    printf "\n; %s\n%-20s = %s\n" "Simple lowercase mapping (single character result)" "char-set:simple-lower-case-map" $slcm-sym

  }
}

filename := "unicode.ASCII.idio"
eprintf "Creating %s\n" filename
with-output-to filename (function () {
  printf "%s\n" \
	 "#*

These char-sets are automatically generated from Unicode source files.

*#"

  print-char-sets ASCII lower-case upper-case title-case letter digit letter+digit graphic printing whitespace iso-control punctuation symbol hex-digit blank ascii empty full nonl control word-constituent cased %letter %lower-case %upper-case %digit %letter+digit %punctuation %symbol %graphic %whitespace %printing %iso-control %word-constituent regional-indicator extend-or-spacing-mark hangul-l hangul-v hangul-t hangul-lv hangul-lvt

})

filename := "unicode.BMP0.idio"
eprintf "Creating %s\n" filename
with-output-to filename (function () {
  printf "%s\n" \
	 "#*

These char-sets are automatically generated from Unicode source files.

*#"

  print-char-sets BMP0 lower-case upper-case title-case letter digit letter+digit graphic printing whitespace iso-control punctuation symbol hex-digit blank ascii empty full nonl control word-constituent cased %letter %lower-case %upper-case %digit %letter+digit %punctuation %symbol %graphic %whitespace %printing %iso-control %word-constituent regional-indicator extend-or-spacing-mark hangul-l hangul-v hangul-t hangul-lv hangul-lvt

})

filename := "unicode.full.idio"
eprintf "Creating %s\n" filename
with-output-to filename (function () {
  printf "%s\n" \
	 "#*

These char-sets are automatically generated from Unicode source files.

*#"

  print-char-sets full lower-case upper-case title-case letter digit letter+digit graphic printing whitespace iso-control punctuation symbol hex-digit blank ascii empty full nonl control word-constituent cased %letter %lower-case %upper-case %digit %letter+digit %punctuation %symbol %graphic %whitespace %printing %iso-control %word-constituent regional-indicator extend-or-spacing-mark hangul-l hangul-v hangul-t hangul-lv hangul-lvt

})
