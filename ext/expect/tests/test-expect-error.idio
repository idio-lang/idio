;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-expect-error.idio
;;

module tests/expect-error

import expect

expect-error-0 := Tests

#*

We have a bunch of test cases which should provoke some generic Idio
parameter and system errors.  So we can write a load function which
will wrapper the actual load with a trap for (^rt-parameter-error ...)
and compare the message strings.

*#

expect-error-load := {
  n := 0

  function/name expect-error-load (filename msg) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "not a string" filename)

    n = n + 1

    exp-tests := 1

    ;eprintf "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-parameter-error
	  ^system-error) (function (c) {
			    ;eprintf "expect-error #%s: %s %s\n" n msg (idio-error-location c)
			    test (idio-error-message c) msg

			    if (not (string=? (idio-error-message c) msg)) {
			      condition-report (append-string "expect-error-load: " filename) c (current-error-handle)
			    }
			    
			    trap-return 'expect-error
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "expect-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
	  }
  }
}

; we need a number, larger than an int to provoke some parameter
; validation errors
large-int := C/->integer libc/INTMAX_MAX
error-msg := sprintf "exp-send-human ms='%s': ms too large" large-int

expect-error-load "expect-errors/exp-send-human-bad-fd-type.idio" "bad parameter type: '#t' a constant is not a C/int"
expect-error-load "expect-errors/exp-send-human-bad-msg-type.idio" "bad parameter type: '#t' a constant is not a string"
expect-error-load "expect-errors/exp-send-human-exp-human-unset.idio" "exp-send-human exp-human: should be a 5-tuple"

expect-error-load "expect-errors/exp-send-human-exp-human-bad-K-type.idio" "bad parameter type: '#t' a constant is not a fixnum|bignum"
expect-error-load "expect-errors/exp-send-human-exp-human-negative-K.idio" "exp-send-human K='-3': negative K"

expect-error-load "expect-errors/exp-send-human-exp-human-bad-in-ms-type.idio" "bad parameter type: '#t' a constant is not a integer"
expect-error-load "expect-errors/exp-send-human-exp-human-negative-in-ms.idio" "exp-send-human ms='-1': negative ms"
expect-error-load "expect-errors/exp-send-human-exp-human-in-ms-too-large.idio" error-msg

expect-error-load "expect-errors/exp-send-human-exp-human-bad-out-ms-type.idio" "bad parameter type: '#t' a constant is not a integer"
expect-error-load "expect-errors/exp-send-human-exp-human-negative-out-ms.idio" "exp-send-human ms='-2': negative ms"
expect-error-load "expect-errors/exp-send-human-exp-human-out-ms-too-large.idio" error-msg

expect-error-load "expect-errors/exp-send-human-exp-human-bad-min-ms-type.idio" "bad parameter type: '#t' a constant is not a integer"
expect-error-load "expect-errors/exp-send-human-exp-human-negative-min-ms.idio" "exp-send-human ms='-4': negative ms"
expect-error-load "expect-errors/exp-send-human-exp-human-min-ms-too-large.idio" error-msg

expect-error-load "expect-errors/exp-send-human-exp-human-bad-max-ms-type.idio" "bad parameter type: '#t' a constant is not a integer"
expect-error-load "expect-errors/exp-send-human-exp-human-negative-max-ms.idio" "exp-send-human ms='-5': negative ms"
expect-error-load "expect-errors/exp-send-human-exp-human-max-ms-too-large.idio" error-msg

expect-error-load "expect-errors/exp-send-human-exp-human-bad-type.idio" "exp-send-human exp-human='(1 2 3)': 5-tuple"

expect-error-load "expect-errors/exp-send-human-exp-human-min-gt-max.idio" "exp-send-human exp-human='(1 2 3 5 4)': min-ms > max-ms"

expect-error-load "expect-errors/exp-send-human-exp-human-min-gt-in.idio" "exp-send-human exp-human='(1 2 3 10 20)': min-ms > in-ms|out-ms"
expect-error-load "expect-errors/exp-send-human-exp-human-min-gt-out.idio" "exp-send-human exp-human='(10 2 3 10 20)': min-ms > in-ms|out-ms"

expect-error-load "expect-errors/exp-send-human-exp-human-max-lt-in.idio" "exp-send-human exp-human='(10 20 3 5 5)': max-ms < in-ms|out-ms"
expect-error-load "expect-errors/exp-send-human-exp-human-max-lt-out.idio" "exp-send-human exp-human='(10 20 3 5 15)': max-ms < in-ms|out-ms"

;; all done?
Tests? (expect-error-0 + 23)
