;;
;; Copyright (c) 2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-libcurl-error.idio
;;

module tests/libcurl-error

import libcurl

libcurl-error-0 := Tests

#*

We have a bunch of test cases which should provoke an
^rt-libcurl-error or some generic Idio parameter and system errors.
So we can write a load function which will wrapper the actual load
with a trap for (^rt-libcurl-error ^rt-parameter-error ...)  and
compare the message strings.

*#

libcurl-error-load := {
  n := 0

  function/name libcurl-error-load (filename msg) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "not a string" filename)

    n = n + 1

    exp-tests := 1

    ;eprintf "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-libcurl-error
	  ^rt-bignum-conversion-error
	  ^rt-libc-format-error
	  ^rt-parameter-error
	  ^system-error) (function (c) {
			    ;eprintf "libcurl-error #%s: %s %s\n" n msg (idio-error-location c)
			    test (idio-error-message c) msg

			    if (not (string=? (idio-error-message c) msg)) {
			      condition-report (append-string "libcurl-error-load: " filename) c (current-error-handle)
			    }

			    trap-return 'libcurl-error
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "libcurl-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
	  }
  }
}

curl := (curl-easy-init)

libcurl-error-load "libcurl-errors/curl-easy-setopt-bad-reader-type.idio" "bad parameter type: '#t' a constant is not a input_handle"
libcurl-error-load "libcurl-errors/curl-easy-setopt-bad-writer-type.idio" "bad parameter type: '#t' a constant is not a output_handle"

libcurl-error-load "libcurl-errors/curl-easy-setopt-bad-curl-type.idio" "bad parameter type: '#t' a constant is not a C/pointer"
libcurl-error-load "libcurl-errors/curl-easy-setopt-invalid-curl-type.idio" "curl-easy-setopt curl='#<C/* C/pointer>' a C/pointer is not a libcurl/CURL"

libcurl-error-load "libcurl-errors/curl-easy-setopt-invalid-option-tuple.idio" "curl-easy-setopt option tuple='(#t)' a pair is not a kw arg tuple"
libcurl-error-load "libcurl-errors/curl-easy-setopt-short-option-name.idio" "curl_easy_setopt (curl, CURLOPT_, arg): short option name"
libcurl-error-load "libcurl-errors/curl-easy-setopt-invalid-option-name.idio" "curl_easy_setopt (curl, CURLOPT_foo, arg): no such option"

libcurl-error-load "libcurl-errors/curl-easy-setopt-bad-long-constant-type.idio" "curl_easy_setopt (curl, CURLOPT_SSL_VERIFYPEER, arg): long arg should be a boolean|integer|C/long"
libcurl-error-load "libcurl-errors/curl-easy-setopt-long-arg-float.idio" "curl_easy_setopt (curl, CURLOPT_SSL_VERIFYPEER, arg): long arg should be a boolean|integer|C/long"
(cond-expand
 (sizeof/pointer/32 {
   libcurl-error-load "libcurl-errors/curl-easy-setopt-long-arg-too-large.idio" "9223372036854775808 is too large for long (2147483647)"
 })
 (else {
   libcurl-error-load "libcurl-errors/curl-easy-setopt-long-arg-too-large.idio" "significand overflow"
 }))
libcurl-error-load "libcurl-errors/curl-easy-setopt-bad-long-arg-type.idio" "curl_easy_setopt (curl, CURLOPT_SSL_VERIFYPEER, arg): long arg should be a boolean|integer|C/long"

libcurl-error-load "libcurl-errors/curl-easy-setopt-bad-string-arg-format.idio" "arg: contains an ASCII NUL"
libcurl-error-load "libcurl-errors/curl-easy-setopt-bad-string-arg-type.idio" "curl_easy_setopt (curl, CURLOPT_URL, arg): arg should be a string"

libcurl-error-load "libcurl-errors/curl-easy-setopt-unhandled-option-type.idio" "curl_easy_setopt (curl, CURLOPT_POSTFIELDS, arg): cannot handle option type 3"

libcurl-error-load "libcurl-errors/curl-easy-perform-bad-curl-type.idio" "bad parameter type: '#t' a constant is not a C/pointer"
libcurl-error-load "libcurl-errors/curl-easy-perform-invalid-curl-type.idio" "curl-easy-perform curl='#<C/* C/pointer>' a C/pointer is not a libcurl/CURL"

libcurl-error-load "libcurl-errors/curl-easy-reset-bad-curl-type.idio" "bad parameter type: '#t' a constant is not a C/pointer"
libcurl-error-load "libcurl-errors/curl-easy-reset-invalid-curl-type.idio" "curl-easy-reset curl='#<C/* C/pointer>' a C/pointer is not a libcurl/CURL"

libcurl-error-load "libcurl-errors/curl-easy-cleanup-bad-curl-type.idio" "bad parameter type: '#t' a constant is not a C/pointer"
libcurl-error-load "libcurl-errors/curl-easy-cleanup-invalid-curl-type.idio" "curl-easy-cleanup curl='#<C/* C/pointer>' a C/pointer is not a libcurl/CURL"

;; all done?
Tests? (libcurl-error-0 + 20)
