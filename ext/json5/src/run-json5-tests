#! /usr/bin/env bash

# Copyright (c) 2015, 2020, 2021 Ian Fitchet <idf@idio-lang.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

# 
# run-json5-tests -- run the https://github.com/json5/json5-tests tests
#

set -ue

usage () 
{
    cat << EOF >&2

${0##*/} runs the https://github.com/json5/json5-tests JSON5 tests.

Create the test executable with:
make test

usage: $0 [options]
where options are:
  -d DIR	json5-tests directory [${opt_dir}]
  -t EXE	test executable [${opt_test}]

  -h		help
EOF
}

opt_dir=json5-tests
opt_test=./test

while getopts "d:ht:" opt ; do
    case "${opt}" in
    d)
	opt_dir=${OPTARG}
	;;
    h)
	usage
	exit 0
	;;
    t)
	opt_test=${OPTARG}
	;;
    *)
	usage
	exit 1
	;;
    esac
done

if [[ -d ${opt_dir} ]] ; then
    echo "Using tests in ${opt_dir}"
else
    echo "ERROR: tests directory ${opt_dir} does not exist" >&2
    exit 1
fi

case "${opt_test}" in
/*|./*|../*)
    LD_LIBRARY_PATH=${opt_test%/*}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
    ;;
/*|./*|../*)
    LD_LIBRARY_PATH=${PWD}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
    ;;
esac

export LD_LIBRARY_PATH

failed=()

tests=0
for td in ${opt_dir}/* ; do

    tss=( ${td}/*.json )

    if [[ -f ${tss} ]] ; then
	for ts in "${tss[@]}" ; do

	    tests=$(( tests + 1))
	    if ! ${opt_test} "${ts}" ; then
		echo "ERROR: ${ts} should pass" >&2
		failed+=("${ts}")
	    fi

	done
    fi

    tss=( ${td}/*.json5 )

    if [[ -f ${tss} ]] ; then
	for ts in "${tss[@]}" ; do

	    tests=$(( tests + 1))
	    if ! ${opt_test} "${ts}" ; then
		echo "NOTICE: should ${ts} fail?" >&2
		failed+=("${ts}")
	    fi

	done
    fi

    tss=( ${td}/*.js )

    if [[ -f ${tss} ]] ; then
	for ts in "${tss[@]}" ; do

	    tests=$(( tests + 1))
	    if ${opt_test} "${ts}" ; then
		echo "ERROR: ${ts} should fail" >&2
		failed+=("${ts}")
	    fi

	done
    fi

    tss=( ${td}/*.txt )

    if [[ -f ${tss} ]] ; then
	for ts in "${tss[@]}" ; do

	    tests=$(( tests + 1))
	    if ${opt_test} "${ts}" ; then
		echo "ERROR: ${ts} should fail" >&2
		failed+=("${ts}")
		exit 3
	    fi

	done
    fi

done

if [[ ${#failed[*]} -gt 0 ]] ; then
    echo "${#failed[*]}/${tests} tests failed:"
    for f in ${failed[*]} ; do
	echo "  ${f}"
    done
else
    echo "All ${tests} tests completed"
fi
