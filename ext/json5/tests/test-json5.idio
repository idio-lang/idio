;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-json5.idio
;;

module tests/json5

import json5

json5-0 := Tests

; We can re-use one of the https://spec.json5.org tests and in
; particular the main example, in section 1.2, where we can retrieve
; sub-elements.  Those examples are in a parallel directory to us and
; we are the first element of IDIOLIB

dirs := split-string IDIOLIB ":"
json5-dir := (regex-case
	      dirs.0
	      ("(.*)/tests" {
		r.1
	      })
	      (else {
		eprintf "json5-test: failed to match (.*)/tests in %s\n" dirs.1
		exit 1
	      }))
ex-file := append-string json5-dir "/src/examples/spec.json5.org/1.2.json5"

data := json5/parse-file ex-file

test data."lineBreaks"	"Look, Mom! No \\n's!"
test data."andIn".0	"arrays"


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; code coverage

; json5-api.c

;; 2-byte encoding (0xff < all code points <= 0xffff)
;; U+0127 LATIN SMALL LETTER H WITH STROKE

;; 4-byte encoding (any code point > 0xFFFF)
;; U+1FBF8 SEGMENTED DIGIT 8

define (json5-string & parts) {
  r := "\""
  for-each (function (p) {
	      r = append-string r p
  }) parts
  append-string r "\""
}

str-2 := make-string 1 #U+127
json-str-2 := json5-string str-2
str-4 := make-string 1 #U+1fbf8
json-str-4 := json5-string str-4

; parsing multi-width strings
test (json5/parse-string json-str-2) str-2
test (json5/parse-string json-str-4) str-4

; printing multi-width strings and arrays
test (json5/generate (list->array (list str-2 str-4))) "[\n  \"ƒß\",\n  \"üØ∏\"\n]"

; printing bignums
test (json5/generate 1.2) "1.2e+0"

;; NB pi is inexact (#i3.14...)
test (json5/generate pi) "3.14159265358979323e+0"

; printing hash tables
ht := #{}
hash-set! ht "str-2" str-2
hash-set! ht "str-4" str-4

;; we can't guarantee the order of a hash table (or JSON5 object) --
;; even of just two elements -- so we can't compare the generated
;; string to anything.  We need to save the generated string, parse it
;; back in and test known elements.
json5-str := json5/generate ht
json5-ht := json5/parse-string json5-str

test (length (hash-keys json5-ht)) (length (hash-keys ht))
test (hash-ref json5-ht "str-2") (hash-ref ht "str-2")
test (hash-ref json5-ht "str-4") (hash-ref ht "str-4")

; other JSON/JSON5 types: fixnums, constants
test (json5/generate (list->array (list 10 #n #t #f))) "[\n  10,\n  null,\n  true,\n  false\n]"

; other JSON5 types: literals
test (json5/generate (list->array (list 'Infinity '+Infinity '-Infinity 'NaN '+NaN '-NaN))) "[\n  Infinity,\n  +Infinity,\n  -Infinity,\n  NaN,\n  +NaN,\n  -NaN\n]"

; JSON5 ECMAIdentifierNames
ht := #{}
hash-set! ht 'while 'true

test (json5/generate ht) "{\n  while: true\n}"

; optional output handle
osh := (open-output-string)
json5/generate str-2 osh

; generate JSON
test (json5/generate-json str-2) json-str-2

; generate JSON to alternate handle
json5/generate-json str-2 osh

; test empty JSON array
test (json5/parse-string "[]") #[]

; test empty JSON object
test (json5/parse-string "{}") #{}

; test JSON/JSON5 values
test (json5/parse-string "[ null, true, false]") #[ #n #t #f ]

; test JSON5 literal values
test (json5/parse-string "[ Infinity, +Infinity, -Infinity, NaN, +NaN, -NaN]") #[ Infinity Infinity -Infinity NaN NaN -NaN ]

; literals can be MemberName
test (json5/parse-string "{ true: false }") #{ (#t & #f) }

; XXX #n can't be a key
test (json5/parse-string "{ null: false }") #{ ("null" & #f) }

; test JSON5 ECMAIdentifierName MemberNames -- Idio doesn't retain the
; distinction, they are just strings
test (json5/parse-string "{ while: true }") #{ ("while" & #t ) }

; 3pi is illegal unless you escape it
test (json5/parse-string "{ \\u0033pi: true }") #{ ("3pi" & #t ) }

; array -> object -> array
test (json5/parse-string "[ { while: [ true ] } ]") #[ #{ ("while" & #[ #t ] ) } ]

; neg exponent -- XXX "1e-1" -> "1.00000000000000006e-1" :-)
test (json5/parse-string "100e-1") 1.0e+1

; leading 0
test (json5/parse-string "0.") 0.0e+0

; middling 0 (parsing numbers gets...messy)
test (json5/parse-string "10") 10

; exponent middling 0 (ditto)
test (json5/parse-string "0e10") 0.0

; leading .
test (json5/parse-string ".0") 0.0e+0

; sign
test (json5/parse-string "-1") -1
test (json5/parse-string "-1.0") -1.0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; strings -- remember we're trying to create JSON string in an Idio
; string.
;
; Most of these examples use single-quoted JSON5 strings as it saves
; and extra backslash, \", at start and end.

; LineTerminatorSequence
test (json5/parse-string "'a\\\rb'") "ab"	; 'a\<CR>b'
test (json5/parse-string "'a\\\r\nb'") "ab"	; 'a\<CR><LF>b'
test (json5/parse-string "'a\\\u2028b'") "ab"	; 'a\<LS>b'
test (json5/parse-string "'a\\\u2029b'") "ab"	; 'a\<PS>b'

; SingleEscapeCharacter: ' " \ \b \f \n \r \t \v
test (json5/parse-string "'\\\'\\\"\\\\\\b\\f\\n\\r\\t\\v'") "'\"\\\b\f\n\r\t\v"

; HexEscapeSequence
test (json5/parse-string "'\\x61'") "a"

; UnicodeEscapeSequence
test (json5/parse-string "'\\u0061'") "a"
test (json5/parse-string "'\\uD83C\\uDFBC'") "\U1F3BC"

; EscapeSequence
test (json5/parse-string "'\\0'") "\x00"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Identifiers have constraints on the first and subsequent characters.
; Note that we have to use real characters here rather than
; UnicodeEscapeSequences so that we correctly test code pathways

; IdentifierStart -- including

; 0041;LATIN CAPITAL LETTER A;Lu
; 0061;LATIN SMALL LETTER A;Ll
; 01CB;LATIN CAPITAL LETTER N WITH SMALL LETTER J;Lt
; 00AA;FEMININE ORDINAL INDICATOR;Lo
; 16EE;RUNIC ARLAUG SYMBOL;Nl
json5/parse-string "{ A: 'Lu', a: 'Ll', «ã: 'Lt', ¬™: 'Lo', ·õÆ: 'Nl'}"

; IdentifierPart -- using an 'x' prefix with:

; 0041;LATIN CAPITAL LETTER A;Lu
; 0061;LATIN SMALL LETTER A;Ll
; 01CB;LATIN CAPITAL LETTER N WITH SMALL LETTER J;Lt
; 00AA;FEMININE ORDINAL INDICATOR;Lo
; 16EE;RUNIC ARLAUG SYMBOL;Nl

; 0300;COMBINING GRAVE ACCENT;Mn
; 0903;DEVANAGARI SIGN VISARGA;Mc
; 0030;DIGIT ZERO;Nd
; 005F;LOW LINE;Pc
; 200C;ZERO WIDTH NON-JOINER;Cf		x<ZWNJ>y
; 200D;ZERO WIDTH JOINER;Cf		x<ZWJ>z
json5/parse-string "{ xA: 'Lu', xa: 'Ll', x«ã: 'Lt', x¬™: 'Lo', x·õÆ: 'Nl', xÃÄ: 'Mn', x‡§É: 'Mc', x0: 'Nd', x_: 'Mc', x‚Äåy: 'ZWNJ', x‚Äçz: 'ZWJ' }"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; escape sequences that "widen" strings

; one to two byte
test (json5/parse-string "'a\\u0127b'") "aƒßb"

; one to four byte
test (json5/parse-string "'a\\uD83C\\uDFBCx'") "a\U1F3BCx"

; two to four byte

; using U+0127 at either end
test (json5/parse-string "'ƒß\\uD83C\\uDFBCƒß'") "\u127\U1F3BC\u127"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; string comparisons for Wide strings -- we're looking for JSON5
; literals which we make the call if the first letter matches, here
; the I in Infinity

; NB These are real characters in JSON5, as opposed to
; UnicodeEscapeSequences, but we can use escape codes in Idio to
; generate the string

; two byte
json5/parse-string "{ I\u0127: 10 }"

; four byte -- note must be a valid IdentifierPart so we can't use the
; musical score from earlier.  Let's go with
; 1030D;OLD ITALIC LETTER EN;Lo
json5/parse-string "{ I\U1030D: 10 }"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; block comment

test (json5/parse-string "/* with * and / */ 10") 10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; parse-fd -- use ex-file from above
ex-fh := open-input-file ex-file

data := json5/parse-fd (file-handle-fd ex-fh)

test data."lineBreaks"	"Look, Mom! No \\n's!"
test data."andIn".0	"arrays"

close-handle ex-fh

;; some leading zero parse issues if the 0 is immediately before a
;; value terminator -- from densely packed strings
v := json5/parse-string "0"
test v 0
d := json5/parse-string "{comma:0,array:[0],object:{key:0}}"
test d."comma" 0
test d."array".0 0
test d."object"."key" 0

;; all done?
Tests? (json5-0 + 49)

;Local Variables:
;mode: Idio
;coding: utf-8-unix
;End:
