;;
;; Copyright (c) 2021, 2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-json5-error.idio
;;

module tests/json5-error

import json5

json5-error-0 := Tests

#*

We have a bunch of test cases which should provoke a ^rt-json5-error
or ^rt-json5-value-error and some generic Idio parameter and system
errors.  So we can write a load function which will wrapper the actual
load with a trap for (^rt-json5-error ...) and compare the message
strings.

*#

json5-error-load := {
  n := 0

  function/name json5-error-load (filename msg) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "not a string" filename)

    n = n + 1

    exp-tests := 1

    ;eprintf "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-json5-error
	  ^rt-parameter-error
	  ^system-error) (function (c) {
			    ;eprintf "json5-error #%s: %s %s\n" n msg (idio-error-location c)
			    test (idio-error-message c) msg

			    if (not (string=? (idio-error-message c) msg)) {
			      condition-report (append-string "json5-error-load: " filename) c (current-error-handle)
			    }
			    
			    trap-return 'json5-error
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "json5-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
	  }
  }
}

; json5-api.c
json5-error-load "json5-errors/parse-string-bad-string-value.idio" "json5/parse-string is='.' a string is not a regular string"

json5-error-load "json5-errors/generate-hash-bad-key-type.idio" "json5/generate member name='#t' a constant is not a JSON5-compatible value"

json5-error-load "json5-errors/generate-bad-constant-value-1.idio" "json5/generate value='(void)' a constant is not a JSON5-compatible value"
json5-error-load "json5-errors/generate-bad-constant-value-2.idio" "json5/generate value='a' a unicode is not a JSON5-compatible value"

; JSON5 only
json5-error-load "json5-errors/generate-bad-symbol-value-ECMAIdentifierPart.idio" "json5/generate symbol='part*invalid' a symbol is not a JSON5-compatible value (ECMAIdentifierPart)"
json5-error-load "json5-errors/generate-bad-symbol-value-ECMAIdentifierStart.idio" "json5/generate symbol='*invalid' a symbol is not a JSON5-compatible value (ECMAIdentifierStart)"

; JSON only
json5-error-load "json5-errors/generate-json-bad-value-symbol.idio" "json5/generate-json value='invalid' a symbol is not a JSON-compatible value"

json5-error-load "json5-errors/generate-bad-value-type.idio" "json5/generate value='#<PRIM read>' a primitive is not a JSON5-compatible value"

; json5-parser.c
json5-error-load "json5-errors/parse-array-invalid-value.idio" "json5/parse array at 0: invalid value at 2"
json5-error-load "json5-errors/parse-unterminated-array-1.idio" "json5/parse array at 0: no more tokens: expected ']'"
json5-error-load "json5-errors/parse-array-bad-sequence-1.idio" "json5/parse array at 0: expected ',' or ']' at 7"
json5-error-load "json5-errors/parse-array-bad-sequence-2.idio" "json5/parse array at 0: expected ',' or ']' at 7"
json5-error-load "json5-errors/parse-unterminated-array-2.idio" "json5/parse array at 0: expected ']' (no more tokens)"

json5-error-load "json5-errors/parse-object-MemberName-only.idio" "json5/parse object at 0: expected more tokens at 7"
json5-error-load "json5-errors/parse-object-MemberName-colon.idio" "json5/parse object at 0: expected more tokens at 8"
json5-error-load "json5-errors/parse-object-bad-MemberName-type.idio" "json5/parse object at 0: MemberName: expected ECMAIdentifier|string"
json5-error-load "json5-errors/parse-object-no-colon.idio" "json5/parse object at 0: expected ':'"
json5-error-load "json5-errors/parse-object-invalid-value.idio" "json5/parse object at 0: invalid value at 8"
json5-error-load "json5-errors/parse-unterminated-object-1.idio" "json5/parse object at 0: expected '}'"
json5-error-load "json5-errors/parse-object-bad-sequence.idio" "json5/parse object at 0: expected ',' or '}'"
json5-error-load "json5-errors/parse-unterminated-object-2.idio" "json5/parse object at 0: expected '}' (no more tokens)"

json5-error-load "json5-errors/parse-bad-punctuation-rbrace.idio" "json5/parse: unexpected punctuation at 0: '}'"
json5-error-load "json5-errors/parse-bad-punctuation-rbracket.idio" "json5/parse: unexpected punctuation at 0: ']'"
json5-error-load "json5-errors/parse-bad-punctuation-colon.idio" "json5/parse: unexpected punctuation at 0: ':'"
json5-error-load "json5-errors/parse-bad-punctuation-comma.idio" "json5/parse: unexpected punctuation at 0: ','"

json5-error-load "json5-errors/parse-empty-string.idio" "json5/parse: empty token stream"
json5-error-load "json5-errors/parse-extra-tokens.idio" "json5/parse: extra tokens at 5"

; json5-token.c
json5-error-load "json5-errors/parse-unterminated-string.idio" "json5/tokenize string at 1: unterminated"

json5-error-load "json5-errors/parse-string-unescaped-LineTerminator.idio" "json5/tokenize string at 1: unescaped LineTerminator 0X0A at 2"

json5-error-load "json5-errors/parse-number-double-signed-exponent.idio" "json5/tokenize number at 0: double signed exponent at 3"

json5-error-load "json5-errors/parse-number-double-signed.idio" "json5/tokenize number at 0: double signed"

json5-error-load "json5-errors/parse-number-leading-zero.idio" "json5/tokenize number at 0: leading zero"

json5-error-load "json5-errors/parse-number-floating-point-exponent.idio" "json5/tokenize number at 0: floating point exponent at 3"

json5-error-load "json5-errors/parse-number-hex-digit-in-exponent.idio" "json5/tokenize number at 0: hex digit in exponent"

json5-error-load "json5-errors/parse-number-hex-in-decimal.idio" "json5/tokenize number at 0: hex in decimal: 'f' at 1"

json5-error-load "json5-errors/parse-number-no-mantissa-digits.idio" "json5/tokenize number at 0: no mantissa digits"

json5-error-load "json5-errors/parse-number-no-digits.idio" "json5/tokenize number at 0: no digits"

json5-error-load "json5-errors/parse-number-no-exponent-digits.idio" "json5/tokenize number at 0: no exponent digits"

json5-error-load "json5-errors/parse-number-invalid-next-character.idio" "json5/tokenize number at 0: followed by U+0058 at 1"

json5-error-load "json5-errors/parse-blank-string.idio" "json5/tokenize: no tokens"

json5-error-load "json5-errors/parse-single-forward-slash.idio" "json5/tokenize at 0: unexpected /"

json5-error-load "json5-errors/parse-punctuation.idio" "json5/tokenize at 0: expected ECMAIdentifierStart: U+002A"


; json5-unicode.c
json5-error-load "json5-errors/parse-ECMA_HexEscapeSequence-bad-digit.idio" "json5/ECMA_HexEscapeSequence: \\x U+0071 U+0071"

json5-error-load "json5-errors/parse-ECMA_UnicodeEscapeSequence-invalid-low-surrogate-range.idio" "json5/ECMA_UnicodeEscapeSequence: low surrogate range 0xDC00 <= 0X0061 <= 0xDFFF at 8"
json5-error-load "json5-errors/parse-ECMA_UnicodeEscapeSequence-invalid-low-surrogate.idio" "json5/ECMA_UnicodeEscapeSequence: not a low surrogate U+005C U+0075 U+0030 U+0030 U+0036 U+0071 at 8"
json5-error-load "json5-errors/parse-ECMA_UnicodeEscapeSequence-no-low-surrogate.idio" "json5/ECMA_UnicodeEscapeSequence: expecting a low surrogate at 8 / 10"
json5-error-load "json5-errors/parse-ECMA_UnicodeEscapeSequence-not-hex-digits.idio" "json5/ECMA_UnicodeEscapeSequence: not hex digits \\u U+0071 U+0077 U+0065 U+0072 at 2"
json5-error-load "json5-errors/parse-ECMA_UnicodeEscapeSequence-no-hex-digits.idio" "json5/ECMA_UnicodeEscapeSequence: EOS after \\u at 4 / 6"

json5-error-load "json5-errors/parse-string-peek.idio" "json5/tokenize string at 1: unterminated"

json5-error-load "json5-errors/parse-unterminated-block-comment.idio" "json5/block-comment at 0: unterminated"

;; all done?
Tests? (json5-error-0 + 50)
