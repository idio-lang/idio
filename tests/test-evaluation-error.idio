;;
;; Copyright (c) 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-evaluation-error.idio
;;

evaluation-error0 := Tests

#*

We have a bunch of test cases which should provoke a ^evaluation-error
of some kind.  So we can write a load function which will wrapper the
actual load with a trap for ^evaluation-error and compare the message
strings.

*#

evaluation-error-load := {
  n := 0

  function (filename msg) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "not a string" filename)

    n = n + 1

    exp-tests := 1

    ;eprintf "loading #%s %s\n" n filename
    trap ^evaluation-error (function (c) {
			      ;eprintf "evaluation-error #%s: %s %s\n" n msg c
			      test (idio-error-message c) msg
			      
			      if (not (string=? (idio-error-message c) msg)) {
				condition-report (append-string "evaluation-error-load: " filename) c (current-error-handle)
			      }
			      
			      trap-return c
    }) {
      t0 := Tests
      (symbol-value 'load 'Idio) filename
      if (not (equal? Tests (t0 + exp-tests))) {
	eprintf "evaluation-error #%s: %s did not generate \"%s\"\n" n filename msg
	Errors = Errors + 1
	Tests = t0 + exp-tests
      }
    }
  }
}


;evaluation-error-load "evaluation-errors/toplevel-extend-kind.idio" "EOF in list"

evaluation-error-load "evaluation-errors/rewrite-cond-isa-pair-only.idio" "parameter type: cond: clause is not a pair (in/after)"
evaluation-error-load "evaluation-errors/rewrite-cond-isa-pair-before.idio" "parameter type: cond: clause is not a pair (before)"
evaluation-error-load "evaluation-errors/rewrite-cond-isa-pair-after.idio" "parameter type: cond: clause is not a pair (in/after)"
evaluation-error-load "evaluation-errors/rewrite-cond-else-not-last.idio" "cond: else not in last clause"
evaluation-error-load "evaluation-errors/rewrite-cond-apply-two-args.idio" "cond: invalid => clause"
evaluation-error-load "evaluation-errors/rewrite-cond-apply-four-args.idio" "cond: invalid => clause"
evaluation-error-load "evaluation-errors/assign-non-symbol.idio" "cannot assign to"
evaluation-error-load "evaluation-errors/infix-op-negative-priority.idio" "positive priority"
evaluation-error-load "evaluation-errors/infix-op-not-an-operator.idio" "not an operator"
evaluation-error-load "evaluation-errors/postfix-op-negative-priority.idio" "positive priority"
evaluation-error-load "evaluation-errors/postfix-op-not-an-operator.idio" "not an operator"
evaluation-error-load "evaluation-errors/define-computed-no-args.idio" "define-computed: no getter/setter"
evaluation-error-load "evaluation-errors/internal-define-template.idio" "internal define-template"
evaluation-error-load "evaluation-errors/letrec-empty-body.idio" "letrec: empty body"

;; I can't trigger the error
;evaluation-error-load "evaluation-errors/letrec-internal-define-template.idio" "letrec: internal define-template"

evaluation-error-load "evaluation-errors/closed-function-not-enough-args-0.idio" "closed function: not enough arguments"
evaluation-error-load "evaluation-errors/closed-function-not-enough-args-1.idio" "closed function: not enough arguments"
evaluation-error-load "evaluation-errors/closed-function-too-many-args-0.idio" "closed function: too many arguments"
evaluation-error-load "evaluation-errors/closed-function-too-many-args-1.idio" "closed function: too many arguments"
evaluation-error-load "evaluation-errors/primitive-arity.idio" "wrong arity for primitive"

evaluation-error-load "evaluation-errors/not-nil.idio" "not: no argument"
evaluation-error-load "evaluation-errors/not-multiple-args.idio" "(1 2): too many arguments"
evaluation-error-load "evaluation-errors/escape-nil.idio" "escape: no argument"
evaluation-error-load "evaluation-errors/escape-multiple-args.idio" "(1 2): too many arguments"
evaluation-error-load "evaluation-errors/quote-nil.idio" "quote: no argument"
evaluation-error-load "evaluation-errors/quote-multiple-args.idio" "(1 2): too many arguments"
evaluation-error-load "evaluation-errors/quasiquote-nil.idio" "quasiquote: no argument"
evaluation-error-load "evaluation-errors/quasiquote-multiple-args.idio" "(1 2): too many arguments"
evaluation-error-load "evaluation-errors/function-nil.idio" "function: no arguments"
evaluation-error-load "evaluation-errors/if-cond-nil.idio" "(if 1): no consequent/alternative"
evaluation-error-load "evaluation-errors/if-nil.idio" "if: no arguments"
evaluation-error-load "evaluation-errors/cond-nil.idio" "cond: no clauses"
evaluation-error-load "evaluation-errors/set-symbol-nil.idio" "(set! x): no value"
evaluation-error-load "evaluation-errors/set-nil.idio" "set!: no arguments"
evaluation-error-load "evaluation-errors/define-template-bindings-nil.idio" "(define-template (m)): no body"
evaluation-error-load "evaluation-errors/define-template-nil.idio" "define-template: no arguments"
evaluation-error-load "evaluation-errors/define-infix-op-sym-pri-nil.idio" "(define-infix-operator qqq 10): no body"
evaluation-error-load "evaluation-errors/define-infix-op-sym-nil.idio" "(define-infix-operator qqq): no pri body"
evaluation-error-load "evaluation-errors/define-infix-op-nil.idio" "define-infix-operator: no arguments"
evaluation-error-load "evaluation-errors/define-postfix-op-sym-pri-nil.idio" "(define-postfix-operator qqq 10): no body"
evaluation-error-load "evaluation-errors/define-postfix-op-sym-nil.idio" "(define-postfix-operator qqq): no pri body"
evaluation-error-load "evaluation-errors/define-postfix-op-nil.idio" "define-postfix-operator: no arguments"
evaluation-error-load "evaluation-errors/define-sym-nil.idio" "(define qqq): no value"
evaluation-error-load "evaluation-errors/define-nil.idio" "define: no arguments"
evaluation-error-load "evaluation-errors/toplevel-define-sym-nil.idio" "(:= qqq): no value"
evaluation-error-load "evaluation-errors/toplevel-define-nil.idio" ":=: no arguments"
evaluation-error-load "evaluation-errors/environ-define-sym-nil.idio" "(:* qqq): no value"
evaluation-error-load "evaluation-errors/environ-define-nil.idio" ":*: no arguments"
evaluation-error-load "evaluation-errors/dynamic-define-sym-nil.idio" "(:~ qqq): no value"
evaluation-error-load "evaluation-errors/dynamic-define-nil.idio" ":~: no arguments"
evaluation-error-load "evaluation-errors/computed-define-sym-nil.idio" "(:$ qqq): no getter [setter]"
evaluation-error-load "evaluation-errors/computed-define-nil.idio" ":$: no arguments"
evaluation-error-load "evaluation-errors/dynamic-nil.idio" "dynamic: no argument"
evaluation-error-load "evaluation-errors/dynamic-let-bindings-not-tuple.idio" "(dynamic-let (d)): bindings not a tuple"
evaluation-error-load "evaluation-errors/dynamic-let-bindings-not-pair.idio" "(dynamic-let #n): bindings not a pair"
evaluation-error-load "evaluation-errors/dynamic-let-nil.idio" "dynamic-let: no arguments"
evaluation-error-load "evaluation-errors/dynamic-unset-non-sym.idio" "(dynamic-unset 1): not a symbol"
evaluation-error-load "evaluation-errors/dynamic-unset-nil.idio" "dynamic-unset: no argument"
evaluation-error-load "evaluation-errors/environ-let-bindings-not-tuple.idio" "(environ-let (e)): bindings not a tuple"
evaluation-error-load "evaluation-errors/environ-let-bindings-not-pair.idio" "(environ-let #n): bindings not a pair"
evaluation-error-load "evaluation-errors/environ-let-nil.idio" "environ-let: no arguments"
evaluation-error-load "evaluation-errors/environ-unset-non-sym.idio" "(environ-unset 1): not a symbol"
evaluation-error-load "evaluation-errors/environ-unset-nil.idio" "environ-unset: no argument"
evaluation-error-load "evaluation-errors/trap-condition-handler-nil.idio" "(%trap condition handler): no body"
evaluation-error-load "evaluation-errors/include-nil.idio" "include: no argument"
evaluation-error-load "evaluation-errors/template-expand-nil.idio" "template-expand: no argument"

;; all done?
Tests? (evaluation-error0 + 65)
