;;
;; Copyright (c) 2020-2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-posix-regex.idio
;;

#*

POSIX regex(3) regular expressions.

We're not looking to test regcomp/regexec -- we can assume they work
-- we're looking to see if we have successfully wrappered them.

Remember, Idio uses UTF-8 internally and regex(3) use your locale(7).
If your locale is not UTF-8 oriented then these tests may fail.

*#

module test/posix-regex

posix-regex-0 := Tests

define (maybe-match->sexp rx str) {
  crx := regcomp rx
  res := regexec crx str
  and res (array->list res)
}

define (test-pre res rx str) {
  test (maybe-match->sexp rx str) res
}

str := "xababcy"

;; match
test-pre '("ab") "ab" str

;; no match
test-pre #f "xy" str

;; one sub-expression
test-pre '("abc" "ab") \
	"(ab)c" \
	str

;; two sub-expressions
test-pre '("xababc" "xa" "ab") \
	"(x[^b]*)b(.*)c" \
	str

;; nested sub-expressions
test-pre '("ababc" "abab" "ab") \
	"((ab)*)c" \
	str

;; empty sub-expression
test-pre '("c" "") \
	"(k*)c" \
	str

;; "basic" regular expressions -- deprecated
bcrx := regcomp "a+" 'REG_BASIC
test (regexec bcrx "aaa") #f
test (not (regexec bcrx "aa+")) #f

;; "regular" regular expressions -- checking flags
crx := regcomp "a+" 'REG_BASIC 'REG_EXTENDED
test (not (regexec crx "aaa")) #f

;; "case insensitive" regular expressions -- checking flags
icrx := regcomp "a+" 'REG_ICASE
test (not (regexec icrx "AAA")) #f

;; "no matches report" is ignored -- checking flags
crx := regcomp "(a+)" 'REG_NOSUB
;; regexec could match any of the (a+) -- it appears to match the
;; first -- but no others as the regex doesn't include the b or c.
;; The result is the overall match and the submatch
test (array-length (regexec crx "aaabaaca")) 2

;; "newline" regular expressions -- checking flags
crx := regcomp "(.+)"
test (array->list (regexec crx "aaa\nbbb")) '("aaa\nbbb" "aaa\nbbb")
crx := regcomp "(.+)" 'REG_NEWLINE
test (array->list (regexec crx "aaa\nbbb")) '("aaa" "aaa")

;; regexec -- testing flags
; first up, ^ matches at start of line (duh!)
crx := regcomp "^(a.)"
test (array->list (regexec crx "abc")) '("ab" "ab")
test (regexec crx "bcd") #f

; crx has ^ so will always fail with REG_NOTBOL...
crx := regcomp "^(a.)"
test (regexec crx "a1b\na2c" 'REG_NOTBOL) #f
; ...unless we used REG_NEWLINE
crx := regcomp "^(a.)" 'REG_NEWLINE
test (array->list (regexec crx "a1b\na2c" 'REG_NOTBOL)) '("a2" "a2")

; first up, $ matches at end of line (duh!)
crx := regcomp "(b.)$"
test (array->list (regexec crx "abc")) '("bc" "bc")
test (regexec crx "abcd") #f

; crx has $ so will always fail with REG_NOTEOL...
crx := regcomp "(b.)$"
test (regexec crx "ab1\nab2" 'REG_NOTEOL) #f
; ...unless we used REG_NEWLINE
crx := regcomp "(b.)$" 'REG_NEWLINE
test (array->list (regexec crx "ab1\nab2" 'REG_NOTEOL)) '("b1" "b1")

; REG_STARTEND is silently ignored
regexec crx "" 'REG_STARTEND

;; REG_VERBOSE gives us some details on the matches
r := regexec (regcomp "[bc]+") "abcd" REG_VERBOSE
test (not r)	#f
test r.0	'("bc" 1 3)

;; REG_VERBOSE did get confused with non-ASCII characters giving the
;; answer ("ll" 3 5)
r := regexec (regcomp "l+") "Ä§ello" REG_VERBOSE
test (not r)	#f
test r.0	'("ll" 2 4)

define (rc s) {
  (regex-case s
	      ("^foo(.*)" (list 'foo r.1))
	      ("(.*)foo$" (list r.1 'foo))
	      (else 'unknown))
}

test (rc "foobar") '(foo "bar")
test (rc "prefoo") '("pre" foo)
test (rc "prefoobar") 'unknown

;; rc with variables
define (rcv s) {
  p1 := "^foo(.*)"
  p2 := "(.*)foo$"
  (regex-case s
	      (p1 (list 'foo r.1))
	      (p2 (list r.1 'foo))
	      (else 'unknown))
}

test (rcv "foobar") '(foo "bar")
test (rcv "prefoo") '("pre" foo)
test (rcv "prefoobar") 'unknown

define (pc s) {
  (pattern-case s
		("foo*" 'foo-before)
		("*foo" 'foo-after)
		("bar?" '1-after-bar)
		("?bar" '1-before-bar)
		("baz+" 'plus-after-baz)
		("baz." 'dot-after-baz)
		("bak[q]*" 'q-star-after-bak)
		("bal[p]+" 'p-plus-after-bal)
		("bam[r]?" 'r-query-after-bam)
		(else 'unknown))
}

test (pc "foobar")	'foo-before
test (pc "prefoo")	'foo-after	; .* matches empty string
test (pc "foo")		'foo-before	; tested first
test (pc "prefoobar")	'unknown
test (pc "prebar")	'unknown
test (pc "pbar")	'1-before-bar
test (pc "barpost")	'unknown
test (pc "barp")	'1-after-bar
test (pc "baz+")	'plus-after-baz
test (pc "baz.")	'dot-after-baz
test (pc "bak")		'q-star-after-bak
test (pc "bakq")	'q-star-after-bak
test (pc "bakqq")	'q-star-after-bak
test (pc "bal")		'unknown
test (pc "balp")	'p-plus-after-bal
test (pc "balpp")	'p-plus-after-bal
test (pc "bam")		'r-query-after-bam
test (pc "bamr")	'r-query-after-bam
test (pc "bamrr")	'unknown
test (pc "bar")		'unknown

define (pcv s) {
  p1 := "foo*"
  p2 := "*foo"
  p3 := "bar?"
  p4 := "?bar"
  p5 := "baz+"
  p6 := "baz."
  p7 := "bak[q]*"
  p8 := "bal[p]+"
  p9 := "bam[r]?"
  (pattern-case s
		(p1 'foo-before)
		(p2 'foo-after)
		(p3 '1-after-bar)
		(p4 '1-before-bar)
		(p5 'plus-after-baz)
		(p6 'dot-after-baz)
		(p7 'q-star-after-bak)
		(p8 'p-plus-after-bal)
		(p9 'r-query-after-bam)
		(else 'unknown))
}

test (pcv "foobar")	'foo-before
test (pcv "prefoo")	'foo-after	; .* matches empty string
test (pcv "foo")	'foo-before	; tested first
test (pcv "prefoobar")	'unknown
test (pcv "prebar")	'unknown
test (pcv "pbar")	'1-before-bar
test (pcv "barpost")	'unknown
test (pcv "barp")	'1-after-bar
test (pcv "baz+")	'plus-after-baz
test (pcv "baz.")	'dot-after-baz
test (pcv "bak")	'q-star-after-bak
test (pcv "bakq")	'q-star-after-bak
test (pcv "bakqq")	'q-star-after-bak
test (pcv "bal")	'unknown
test (pcv "balp")	'p-plus-after-bal
test (pcv "balpp")	'p-plus-after-bal
test (pcv "bam")	'r-query-after-bam
test (pcv "bamr")	'r-query-after-bam
test (pcv "bamrr")	'unknown
test (pcv "bar")	'unknown

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; regex-exact-string

test (regex-exact-string "abc")		"abc"
test (regex-exact-string "a\\bc")	"a\\\\bc" ; a\bc -> a\\bc
test (regex-exact-string "a.c")		"a\\.c"
test (regex-exact-string "a|c")		"a\\|c"
test (regex-exact-string "a*b+c?")	"a\\*b\\+c\\?"
test (regex-exact-string "a[b]c")	"a\\[b]c"
test (regex-exact-string "a(b)c")	"a\\(b\\)c"
test (regex-exact-string "^abc$")	"\\^abc\\$"
test (regex-exact-string "abc{1,2}")	"abc\\{1,2}"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; regex-pattern-string

test (regex-pattern-string "abc")	"abc"
test (regex-pattern-string "a\\bc")	"a\\\\bc" ; a\bc -> a\\bc
test (regex-pattern-string "a.c")	"a\\.c"
test (regex-pattern-string "a|c")	"a\\|c"
test (regex-pattern-string "a*b+c?")	"a.*b\\+c."
test (regex-pattern-string "a[b]c")	"a[b]c"
test (regex-pattern-string "a[b]*c")	"a[b]*c"
test (regex-pattern-string "a[b]+c")	"a[b]+c"
test (regex-pattern-string "a[b]?c")	"a[b]?c"
test (regex-pattern-string "a(b)c")	"a\\(b\\)c"
test (regex-pattern-string "^abc$")	"\\^abc\\$"
test (regex-pattern-string "abc{1,2}")	"abc\\{1,2}"

;; nested brackets/parentheses
test (regex-pattern-string "a([b]*)c")	"a\\([b]*\\)c"
test (regex-pattern-string "a[()b]*c")	"a[()b]*c"

;; mixed matching of elements
test (regex-pattern-string "a|[b]c")	"a\\|[b]c"
test (regex-pattern-string "a|*c")	"a\\|.*c"
test (regex-pattern-string "a*?c")	"a.*.c"
test (regex-pattern-string "a*+c")	"a.*\\+c"

;; all done?
Tests? (posix-regex-0 + 98)
