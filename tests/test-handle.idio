;;
;; Copyright (c) 2015, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-handle.idio
;;
handle0 := Tests

test (handle? 0)			#f ; FIXNUM
test (handle? #t)			#f ; CONSTANT
test (handle? #\a)			#f ; UNICODE
test (handle? "a")			#f ; STRING
test (handle? 'a)			#f ; SYMBOL
test (handle? :a)			#f ; KEYWORD
test (handle? (pair 1 2))		#f ; PAIR
test (handle? #[])			#f ; ARRAY
test (handle? #{})			#f ; HASH
test (handle? (function #n #n))		#f ; CLOSURE
test (handle? pair)			#f ; PRIMITIVE
test (handle? 1.0)			#f ; BIGNUM
test (handle? (find-module 'Idio))	#f ; MODULE
test (handle? (current-input-handle))	#t ; HANDLE
test (handle? ^error)			#f ; STRUCT_TYPE
test (handle? char-set:letter)		#f ; STRUCT_INSTANCE
test (handle? #B{ 3 })			#f ; BITSET
test (handle? libc/INTMAX_MAX)		#f ; C_INT
test (handle? libc/UINTMAX_MAX)		#f ; C_UINT

;; check predicates fail for non-handle
test-str := "foo"
test (handle? test-str) #f
test (input-handle? test-str) #f
test (output-handle? test-str) #f

str := "Hello"
define (write-handle oh) {
  ;; write to a handle 
  test (handle? oh) #t
  test (output-handle? oh) #t
  test (input-handle? oh) #f

  write str oh
  close-handle oh

  test (handle? oh) #t
  test (output-handle? oh) #t
  test (input-handle? oh) #f
}

define (read-handle ih) {
  test (handle? ih) #t
  test (input-handle? ih) #t
  test (output-handle? ih) #f

  istr := Idio/read ih
  close-handle ih

  test (handle? ih) #t
  test (input-handle? ih) #t
  test (output-handle? ih) #f

  test (equal? istr str) #t
}

define (multi-line-read-handle ih) {
  test (handle-line ih) 1
  r-ih := Idio/read ih
  test (handle-line ih) 2

  seek-handle ih 2
  test (handle-line ih) 0
  r-ih = Idio/read ih
  test (handle-line ih) 0

  seek-handle ih 0
  test (handle-line ih) 1
  r-ih = Idio/read ih
  test (handle-line ih) 2
}

;; generic write to a string
osh := (open-output-string)
write-handle osh

;; get the text written to the string
gos-osh := (get-output-string osh)

; gos-osh == "Hello"; sho == Hello
; test (equal? gos-osh sho) #t

;; use the text read in as (read) will consume the "s
ish := open-input-string gos-osh
read-handle ish

;; generic write to a file
ofh := open-output-file testfile
write-handle ofh

ifh := open-input-file testfile
read-handle ifh

;; multi-line to a string
mls := "list '(one\n\ttwo)"

osh = (open-output-string)
display mls osh
close-handle osh

ish = open-input-string (get-output-string osh)
multi-line-read-handle ish
close-handle ish

;; multi-line to a file
ofh = open-output-file testfile
display mls ofh
close-handle ofh

ifh = open-input-file testfile
multi-line-read-handle ifh
close-handle ifh

;; code coverage
handle-location (current-input-handle)

;; ready? after a peek-char
ish := open-input-string "hello"
test (peek-char ish) #\h
test (ready? ish) #t

test (closed-handle? ish) #f
close-handle ish
test (closed-handle? ish) #t

delete-file testfile
ofh := open-output-file testfile
puts "(pair 1 2)\n" ofh
close-handle ofh

ifh := open-input-file testfile
test (read-expr ifh) '(pair 1 2)
close-handle ifh


ofh := open-output-file testfile
puts (make-string (2 * (C/->integer libc/BUFSIZ)) #\A) ofh

;; code coverage
flush-handle ofh

;; code coverage: seek bignum
seek-handle ofh 4e1

newline ofh

close-handle ofh

;; all done?
Tests? (handle0 + 65)
