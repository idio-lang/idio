;;
;; Copyright (c) 2020-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-libc-wrap.idio
;;
module tests/libc-wrap
import libc

libc-wrap0 := Tests

define (number-cmp low high) {
  if (not (eqv? low high)) {
    test (C/< low high) #t
    test (C/< high low) #f
    test (C/<= low high) #t
    test (C/<= high low) #f
    test (C/<= high high) #t
    test (C/== high high) #t
    test (C/== low high) #f
    test (C/> low high) #f
    test (C/> high low) #t
    test (C/>= low high) #f
    test (C/>= high low) #t
    test (C/>= high high) #t
  } {
    test (C/== low high) #t
  }
}
;; numbers

;; quick type tests of the primitively-definied INTMAX_MAX and the
;; locally defined intmax-max
test (libc/intmax_t? INTMAX_MAX) #t
intmax-max := INTMAX_MAX
test (libc/intmax_t? intmax-max) #t

;; comparison tests vs. 0
number-cmp (C/integer-> 0 intmax_t) INTMAX_MAX
number-cmp INTMAX_MIN (C/integer-> 0 intmax_t)

;; comparison tests vs lim-1
intmax-max-1 := C/integer-> ((C/->integer INTMAX_MAX) - 1) intmax_t
number-cmp intmax-max-1 INTMAX_MAX

;; comparison tests vs lim+1
intmax-min+1 := C/integer-> ((C/->integer INTMAX_MIN) + 1) intmax_t
number-cmp INTMAX_MIN intmax-min+1

;; overflow conversion tests
trap ^rt-bignum-conversion-error (function (c) {
				    test (rt-bignum-conversion-error? c) #t
				    'bignum-conversion-error
}) {
  ;; one beyond the C MAX/MIN
  INTMAX_MAX+1 := (C/integer-> ((C/->integer INTMAX_MAX) + 1))
  test INTMAX_MAX+1 'bignum-conversion-error

  INTMAX_MIN-1 := (C/integer-> ((C/->integer INTMAX_MIN) - 1))
  test INTMAX_MIN-1 'bignum-conversion-error

  ;; many beyond the C MAX/MIN
  INTMAX_MAX*100000 := (C/integer-> ((C/->integer INTMAX_MAX) * 100000))
  test INTMAX_MAX*100000 'bignum-conversion-error

  INTMAX_MIN*100000 := (C/integer-> ((C/->integer INTMAX_MIN) * 100000))
  test INTMAX_MIN*100000 'bignum-conversion-error
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; struct group: code coverage
group := (libc/getgrgid EGID)
struct-group-ref group 'gr_name
struct-group-ref group 'gr_passwd
struct-group-ref group 'gr_gid
struct-group-ref group 'gr_mem

sprintf "%s" group

;; struct passwd: code coverage
passwd := (libc/getpwuid EUID)
struct-passwd-ref passwd 'pw_name
struct-passwd-ref passwd 'pw_passwd
struct-passwd-ref passwd 'pw_uid
struct-passwd-ref passwd 'pw_gid
struct-passwd-ref passwd 'pw_gecos
struct-passwd-ref passwd 'pw_dir
struct-passwd-ref passwd 'pw_shell

sprintf "%s" passwd

;; struct rlimit: code coverage
rlimit := (libc/getrlimit libc/RLIMIT_NOFILE)
struct-rlimit-ref rlimit 'rlim_cur
struct-rlimit-ref rlimit 'rlim_max

struct-rlimit-set! rlimit 'rlim_cur (C/integer-> 0 libc/rlim_t)
struct-rlimit-set! rlimit 'rlim_max (C/integer-> 0 libc/rlim_t)

sprintf "%s" rlimit

;; struct rusage: code coverage
rusage := (libc/getrusage libc/RUSAGE_SELF)
struct-rusage-ref rusage 'ru_utime
struct-rusage-ref rusage 'ru_stime

sprintf "%s" rusage

;; struct stat: code coverage
st := (libc/stat ".")
struct-stat-ref st 'st_dev
struct-stat-ref st 'st_ino
struct-stat-ref st 'st_nlink
struct-stat-ref st 'st_mode
struct-stat-ref st 'st_uid
struct-stat-ref st 'st_gid
struct-stat-ref st 'st_rdev
struct-stat-ref st 'st_size
struct-stat-ref st 'st_blksize
struct-stat-ref st 'st_blocks
struct-stat-ref st 'st_atim
struct-stat-ref st 'st_mtim
struct-stat-ref st 'st_ctim
struct-stat-ref st 'st_atime
struct-stat-ref st 'st_mtime
struct-stat-ref st 'st_ctime

sprintf "%s" st

;; struct statvfs: code coverage
stvfs := (libc/statvfs ".")
struct-statvfs-ref stvfs 'f_bsize
struct-statvfs-ref stvfs 'f_frsize
struct-statvfs-ref stvfs 'f_blocks
struct-statvfs-ref stvfs 'f_bfree
struct-statvfs-ref stvfs 'f_bavail
struct-statvfs-ref stvfs 'f_files
struct-statvfs-ref stvfs 'f_ffree
struct-statvfs-ref stvfs 'f_favail
struct-statvfs-ref stvfs 'f_fsid
struct-statvfs-ref stvfs 'f_flag
struct-statvfs-ref stvfs 'f_namemax

sprintf "%s" st

;; struct termios: code coverage
termios := (libc/tcgetattr libc/STDIN_FILENO)
struct-termios-ref termios 'c_iflag
struct-termios-ref termios 'c_oflag
struct-termios-ref termios 'c_cflag
struct-termios-ref termios 'c_lflag
struct-termios-ref termios 'c_cc
(cond-expand
 (IDIO_HAVE_TERMIOS_SPEEDS {
   struct-termios-ref termios 'c_ispeed
   struct-termios-ref termios 'c_ospeed
 }))

struct-termios-set! termios 'c_iflag (C/integer-> 0 libc/tcflag_t)
struct-termios-set! termios 'c_oflag (C/integer-> 0 libc/tcflag_t)
struct-termios-set! termios 'c_cflag (C/integer-> 0 libc/tcflag_t)
struct-termios-set! termios 'c_lflag (C/integer-> 0 libc/tcflag_t)
struct-termios-set! termios 'c_cc    (struct-termios-ref termios 'c_cc)
(cond-expand
 (IDIO_HAVE_TERMIOS_SPEEDS {
   struct-termios-set! termios 'c_ispeed (C/integer-> 0 libc/speed_t)
   struct-termios-set! termios 'c_ospeed (C/integer-> 0 libc/speed_t)
 }))

sprintf "%s" termios

;; struct timespec: code coverage
timespec := (pht (libc/nanosleep '(0)))
struct-timespec-ref timespec 'tv_sec
struct-timespec-ref timespec 'tv_nsec

struct-timespec-set! timespec 'tv_sec (C/integer-> 0 libc/time_t)
struct-timespec-set! timespec 'tv_nsec (C/integer-> 0 'long)

sprintf "%s" timespec

;; struct timeval: code coverage
timeval := (libc/gettimeofday)
struct-timeval-ref timeval 'tv_sec
struct-timeval-ref timeval 'tv_usec

struct-timeval-set! timeval 'tv_sec (C/integer-> 0 libc/time_t)
struct-timeval-set! timeval 'tv_usec (C/integer-> 0 libc/suseconds_t)

sprintf "%s" timeval

;; struct tm: code coverage
tm := (libc/localtime)
struct-tm-ref tm 'tm_sec
struct-tm-ref tm 'tm_min
struct-tm-ref tm 'tm_hour
struct-tm-ref tm 'tm_mday
struct-tm-ref tm 'tm_mon
struct-tm-ref tm 'tm_year
struct-tm-ref tm 'tm_wday
struct-tm-ref tm 'tm_yday
struct-tm-ref tm 'tm_isdst
(cond-expand
 ((not "uname/sysname/SunOS") {
   struct-tm-ref tm 'tm_gmtoff
   struct-tm-ref tm 'tm_zone
 }))

struct-tm-set! tm 'tm_sec C/0i
struct-tm-set! tm 'tm_min C/0i
struct-tm-set! tm 'tm_hour C/0i
struct-tm-set! tm 'tm_mday C/0i
struct-tm-set! tm 'tm_mon C/0i
struct-tm-set! tm 'tm_year C/0i
struct-tm-set! tm 'tm_wday C/0i
struct-tm-set! tm 'tm_yday C/0i
struct-tm-set! tm 'tm_isdst C/0i
(cond-expand
 ((not "uname/sysname/SunOS") {
   struct-tm-set! tm 'tm_gmtoff (C/integer-> 0 'long)
   struct-tm-set! tm 'tm_zone (struct-tm-ref tm 'tm_zone) ; char*
 }))

sprintf "%s" tm

;; struct tms: code coverage
tms := (pht (libc/times))
struct-tms-ref tms 'tms_utime
struct-tms-ref tms 'tms_stime
struct-tms-ref tms 'tms_cutime
struct-tms-ref tms 'tms_cstime

sprintf "%s" tms

;; struct uts: code coverage
utsname := libc/idio-uname
struct-utsname-ref utsname 'sysname
struct-utsname-ref utsname 'nodename
struct-utsname-ref utsname 'release
struct-utsname-ref utsname 'version
struct-utsname-ref utsname 'machine

sprintf "%s" utsname

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

access "." (C/integer-> #o400)

chdir "."

sb := stat testfile
chmod testfile sb.st_mode

;; chown "." EUID EGID gets EPERM in CI (running as root?) so use a
;; file we've just created (we should be allowed to chown that,
;; surely?)
tmp := (make-tmp-file)
chown tmp EUID EGID
tmp-fh := open-input-file tmp
fchown (file-handle-fd tmp-fh) EUID EGID
close-handle tmp-fh
rm tmp

nfd := dup C/0i
close nfd

;; Sorry, fd 99, you're about to get squelched
nfd := dup2 C/0i (C/integer-> 99)
close nfd

(ctermid)

nfd := fcntl C/0i F_DUPFD (C/integer-> 99)
close nfd

(cond-expand
 (libc/F_DUPFD_CLOEXEC {
   nfd := fcntl C/0i F_DUPFD_CLOEXEC (C/integer-> 99)
   close nfd

   nfd := fcntl C/0i F_DUPFD_CLOEXEC (C/integer-> 99)
   close nfd
 })
 (else {
   printf "no F_DUPFD_CLOEXEC on this system, skipping code coverage\n"
 }))

;; get the file descriptor flags -- CLOEXEC?
fd-flags := fcntl C/0i F_GETFD

dh := open-file "." "r"
fchdir (file-handle-fd dh)
close-handle dh

fcntl C/0i F_SETFD fd-flags

ofh := open-output-file testfile
puts "hello world\n" ofh
fchmod (fd-handle-fd ofh) sb.st_mode
fstat (fd-handle-fd ofh)
fstatvfs (fd-handle-fd ofh)
fsync (fd-handle-fd ofh)
ftruncate (fd-handle-fd ofh) (C/integer-> 3 libc/off_t)
lockf (fd-handle-fd ofh) F_TEST (C/integer-> 3 libc/off_t)
close-handle ofh

(getegid)
(geteuid)
(getgid)

(getlogin)

getpgid (getpid)
(getpgrp)
(getppid)

getpriority PRIO_PROCESS (C/integer-> PID id_t)

(getuid)

;; isatty -> ENOTTY -> #f
fd+name := mkstemp "XXXXXX"
delete-file (pht fd+name)
test (isatty (ph fd+name)) #f

;; I sometimes run the tests with redirected I/O
trap ^system-error (function (c) {
		      #t
}) {
  isatty C/0i
}

kill (C/integer-> PID libc/pid_t) C/0i

tmp := (make-tmp-file)
tmp2 := append-string tmp ".2"
link tmp tmp2
unlink tmp2
rename tmp tmp2
unlink tmp2

;; test mkdir(2) for which we need a directory we can mkdir safely --
;; how about a random one we just deleted?
tmpdir := (make-tmp-dir)
rmdir tmpdir
mkdir tmpdir (C/integer-> #o555 libc/mode_t)
rmdir tmpdir

;; mkfifo -- quick, reuse that tmpname!
mkfifo tmpdir (C/integer-> #o600 libc/mode_t)
rm tmpdir

;; (nanosleep req) has a number of formats for {req}
;;
;; it is a common practice to reuse {rem} for {req} to complete a
;; sleep that was interrupted which is an easy way for us to get a
;; short duration struct timespec.
ns_r := nanosleep (list (C/integer-> 0 libc/time_t))
nanosleep (pht ns_r)			; use {rem} - should be 0!
nanosleep '(0)
nanosleep '(1e0)			; ~ sleep 1.0s
nanosleep (list 0 (C/integer-> 0 'long))
nanosleep '(0 0)
nanosleep '(0 6e8)			; ~ sleep 0.6s

;; test read with a C/int count -- a lot of work for code coverage!
ofh := open-output-file testfile
hprintf ofh "hello\n"
close-handle ofh

ifh := open-input-file testfile
test (read (fd-handle-fd ifh) (C/integer-> 2 libc/size_t)) "he"
test (pread (fd-handle-fd ifh) (C/integer-> 0 libc/off_t) (C/integer-> 2 libc/size_t)) "he"
close-handle ifh

setegid EGID
seteuid EUID
setgid EGID

;; should be safe...except if running under, say, rlwrap which has
;; made us a session leader and so we'll get an EPERM from setpgid
if (C/== (getsid (C/integer-> 0 libc/pid_t)) (getpid)) {
  eprintf "WARNING: I am a session leader?: skipping setpgid code coverage\n"
} {
  setpgid (getpid) (getpgrp)
}

setpriority PRIO_PROCESS (C/integer-> PID id_t) C/0i

setregid GID EGID
(cond-expand
 (IDIO_HAVE_SET_SAVED_IDS {
   setresgid GID EGID EGID
   setresuid UID EUID EUID
 }))
setreuid UID EUID

setuid EUID

;; should be safe...
signal SIGUSR1 (signal-handler SIGUSR1)

;; while we're here, libc/sleep returns a C/uint which is a code
;; coverage issue itself
sleep (sleep 0)

stat "."

;; time tickles the struct-timeval adding/subtracting code
OTIMEFORMAT := TIMEFORMAT
TIMEFORMAT = ""

; XXX - ^rt-command-argv-type-error:can't convert a PRIMITIVE to an execve argument: inconvertible type: arg '#<PRIM sleep>'
;Idio/time sleep 0
TIMEFORMAT = OTIMEFORMAT

strerror EPERM

strsignal SIGHUP

(sync)

;; should be safe to set the termios of stdin to stdin...
(cond-expand
 ("uname/sysname/SunOS" {
   eprintf "SunOS: skipping tcsetattr *stdin* code coverage\n"
 })
 (else {
   tcsetattr C/0i C/0i (tcgetattr C/0i)
 }))

;; should be safe...
tcsetpgrp C/0i (tcgetpgrp C/0i)

(times)

(uname)

ofh := open-output-file testfile
test (write (fd-handle-fd ofh) "hello\n") (C/integer-> 6 libc/ssize_t)
test (pwrite (fd-handle-fd ofh) "world\n" (C/integer-> 0 libc/off_t)) (C/integer-> 6 libc/ssize_t)
close-handle ofh

sig-name SIGHUP

(sig-names)
(signal-names)

errno-name EPERM
(errno-names)
strerrno EPERM

sprintf "%s" errno

(rlimit-names)

(open-flag-names)

egid := (C/->integer EGID)		; fixnum
EGID = (C/integer-> egid libc/gid_t)	; C/int

euid := (C/->integer EUID)		; fixnum
EUID = (C/integer-> euid libc/uid_t)	; C/int

gid := (C/->integer GID)	        ; fixnum
GID = (C/integer-> gid libc/gid_t)	; C/int

uid := (C/->integer UID)	        ; fixnum
UID = (C/integer-> uid libc/uid_t)	; C/int

;; time code coverage
t := (libc/time)

tm := (libc/localtime)
libc/localtime t

(libc/gmtime)
libc/gmtime t

asctime tm
(ctime)
ctime t

mktime tm

strptime "1999" "%Y"
strftime "%F" (libc/localtime)

truncate testfile (C/integer-> 0 libc/off_t)

;; ttyname is hard to test as we can't guarantee an fd is a tty unless
;; we call the expect stuff -- which we haven't tested works, yet.

;; there is no atomic means to discover the current umask and you
;; can't use umask(2) without setting the umask to something else.
;; Which gives a teeny opportunity for a race condition in between
;; these calls to get the umask and to set it back to the origin
;; value.
umask (umask (C/integer-> 0 libc/mode_t))

linkfile := "__link__"
symlink testfile linkfile
test (readlink linkfile) (string->pathname testfile)

; block special devices?
test (b? "/dev/tty") #f
test (b? ".")        #f
test (b? testfile)   #f
test (b? linkfile)   #f

test (S_ISBLK (stat ".").st_mode)        #f

test (c? "/dev/tty") #t
test (c? ".")	     #f
test (c? testfile)   #f
test (c? linkfile)   #f

test (S_ISCHR (stat "/dev/tty").st_mode)	#t
test (S_ISCHR (stat ".").st_mode)		#f

test (d? "/dev/tty") #f
test (d? ".")	     #t
test (d? testfile)   #f
test (d? linkfile)   #f

test (S_ISDIR (stat "/dev/tty").st_mode)	#f
test (S_ISDIR (stat ".").st_mode)		#t

test (e? "/dev/tty") #t
test (e? ".")	     #t
test (e? testfile)   #t
test (e? linkfile)   #t

test (f? "/dev/tty") #f
test (f? ".")	     #f
test (f? testfile)   #t
test (f? linkfile)   #t

test (S_ISREG (stat testfile).st_mode)		#t
test (S_ISREG (stat ".").st_mode)		#f

(cond-expand
 ("uname/sysname/SunOS" {
   ;; symlink on SunOS
   test (l? "/dev/tty") #t
 })
 (else {
   test (l? "/dev/tty") #f
 }))
test (l? ".")	     #f
test (l? testfile)   #f
test (l? linkfile)   #t

test (S_ISLNK (lstat testfile).st_mode)		#f
test (S_ISLNK (lstat linkfile).st_mode)		#t

test (p? "/dev/tty") #f
test (p? ".")	     #f
test (p? testfile)   #f
test (p? linkfile)   #f

test (S_ISFIFO (stat testfile).st_mode)		#f
test (S_ISFIFO (stat linkfile).st_mode)		#f

test (r? "/dev/tty") #t
test (r? ".")	     #t
test (r? testfile)   #t
test (r? linkfile)   #t

test (s? "/dev/tty") #f
test (s? ".")	     #f
test (s? testfile)   #f
test (s? linkfile)   #f

test (S_ISSOCK (stat testfile).st_mode)		#f
test (S_ISSOCK (stat linkfile).st_mode)		#f

test (w? "/dev/tty") #t
test (w? ".")	     #t
test (w? testfile)   #t
test (w? linkfile)   #t

(cond-expand
 ("uname/sysname/FreeBSD" {
   ;; crw--w----  1 idf  tty  0x5a Jan 30 13:10 /dev/tty
   ;; tests for X_OK
   test (x? "/dev/tty") #t
 })
 ((or "uname/sysname/SunOS"
      "uname/sysname/Darwin") {
   ;; normally #f but #t if running-as-root
   test (x? "/dev/tty") running-as-root
 })
 (else {
   test (x? "/dev/tty") #f
 }))
test (x? ".")	     #t
(cond-expand
 ("uname/sysname/SunOS" {
   ;; normally #f but #t if running-as-root
   test (x? testfile)   running-as-root
   test (x? linkfile)   running-as-root
 })
 (else {
   test (x? testfile)   #f
   test (x? linkfile)   #f
 }))

;; if someone has redirected stdin...
T? (stdin-fileno)

rm -f linkfile

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; passwd

pw1 := getpwuid UID
if pw1 {
  pw1-name := pw1.pw_name
  if ((string-length pw1-name) gt 0) {
    pw2 := getpwnam pw1-name
    if pw2 {
      test pw2.pw_uid UID
      test pw2.pw_name pw1-name
    } {
      eprintf "WARNING: no passwd entry for pw1 name %s?\n" pw1-name
    }
  } {
    eprintf "WARNING: no passwd.pw_name for UID %d: %s\n" UID pw1
  }
} {
  eprintf "WARNING: no passwd entry for UID %d?\n" UID
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; group

gr1 := getgrgid GID
if gr1 {
  gr1-name := gr1.gr_name
  if ((string-length gr1-name) gt 0) {
    gr2 := getgrnam gr1-name
    if gr2 {
      test gr2.gr_gid GID
      test gr2.gr_name gr1-name
    } {
      eprintf "WARNING: no group entry for gr1 name %s?\n" gr1-name
    }
  } {
    eprintf "WARNING: no group.gr_name for GID %d: %s\n" GID gr1
  }
} {
  eprintf "WARNING: no group entry for GID %d?\n" GID
}

;; STDIN/STDOUT/STDERR are computed values in libc (not exported)
module libc

test STDIN (current-input-handle)
test STDOUT (current-output-handle)
test STDERR (current-error-handle)

;; go back otherwise libc-wrap0 doesn't exist!
module tests/libc-wrap

;; all done?
Tests? (libc-wrap0 + 128)
