;;
;; Copyright (c) 2020-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-util.idio
;;

#*

{format} and the underlying {%format} allow us to use printf(3)-ish
escape sequences for strings and numbers.

What is correct?  Modulo Unicode-strings (for which printf appears to
use UTF-8 bytes) we can compare the the output from Bash's printf
built-in.

There may be discrepancies with The Truth as Idio is not (currently?)
rounding.

*#

module tests/util

format0 := Tests

test (type->string 0)				"fixnum"
test (type->string #t)				"constant"
test (type->string #\a)				"unicode"
test (type->string "a")				"string"
test (type->string 'a)				"symbol"
test (type->string :a)				"keyword"
test (type->string (pair 1 2))			"pair"
test (type->string #[])				"array"
test (type->string #{})				"hash"
test (type->string (function #n #n))		"closure"
test (type->string pair)			"primitive"
test (type->string 1.0)				"bignum"
test (type->string (find-module 'Idio))		"module"
test (type->string (current-input-handle))	"handle"
test (type->string ^error)			"struct-type"
test (type->string char-set:letter)		"struct-instance"
test (type->string #B{ 3 })			"bitset"
test (type->string libc/INT_MAX)		"C/int"
test (type->string libc/UINT_MAX)		"C/uint"

test (typename 0)				'fixnum
test (typename #t)				'constant
test (typename #\a)				'unicode
test (typename "a")				'string
test (typename 'a)				'symbol
test (typename :a)				'keyword
test (typename (pair 1 2))			'pair
test (typename #[])				'array
test (typename #{})				'hash
test (typename (function #n #n))		'closure
test (typename pair)				'primitive
test (typename 1.0)				'bignum
test (typename (find-module 'Idio))		'module
test (typename (current-input-handle))		'handle
test (typename ^error)				'^error ; XXX not struct-type
test (typename char-set:letter)			'struct-instance
test (typename #B{ 3 })				'bitset
test (typename libc/INT_MAX)			'C/int
test (typename libc/UINT_MAX)			'C/uint

test (zero? 0)				#t ; FIXNUM
test (zero? #t)				#f ; CONSTANT
test (zero? #\a)			#f ; UNICODE
test (zero? "a")			#f ; STRING
test (zero? 'a)				#f ; SYMBOL
test (zero? :a)				#f ; KEYWORD
test (zero? (pair 1 2))			#f ; PAIR
test (zero? #[])			#f ; ARRAY
test (zero? #{})			#f ; HASH
test (zero? (function #n #n))		#f ; CLOSURE
test (zero? pair)			#f ; PRIMITIVE
test (zero? 1.0)			#f ; BIGNUM
test (zero? (find-module 'Idio))	#f ; MODULE
test (zero? (current-input-handle))	#f ; HANDLE
test (zero? ^error)			#f ; STRUCT_TYPE
test (zero? char-set:letter)		#f ; STRUCT_INSTANCE
test (zero? #B{ 3 })			#f ; BITSET
test (zero? libc/INTMAX_MAX)		#f ; C_INT
test (zero? libc/UINTMAX_MAX)		#f ; C_UINT

test (zero?  0.0) #t
test (zero?  1)   #f
test (zero? -1)   #f
test (zero?  1.0) #f
test (zero? -1.0) #f

test (void)         (void)
test (void? (void)) #t
test (void? #t)     #f

test (boolean? 0)			#f ; FIXNUM
test (boolean? #t)			#t ; CONSTANT
test (boolean? #\a)			#f ; UNICODE
test (boolean? "a")			#f ; STRING
test (boolean? 'a)			#f ; SYMBOL
test (boolean? :a)			#f ; KEYWORD
test (boolean? (pair 1 2))		#f ; PAIR
test (boolean? #[])			#f ; ARRAY
test (boolean? #{})			#f ; HASH
test (boolean? (function #n #n))	#f ; CLOSURE
test (boolean? pair)			#f ; PRIMITIVE
test (boolean? 1.0)			#f ; BIGNUM
test (boolean? (find-module 'Idio))	#f ; MODULE
test (boolean? (current-input-handle))	#f ; HANDLE
test (boolean? ^error)			#f ; STRUCT_TYPE
test (boolean? char-set:letter)		#f ; STRUCT_INSTANCE
test (boolean? #B{ 3 })			#f ; BITSET
test (boolean? libc/INTMAX_MAX)		#f ; C_INT
test (boolean? libc/UINTMAX_MAX)	#f ; C_UINT

test (boolean? #f)			#t
test (boolean? (void))			#f

; equality -- we need some values to test with: X1a and X1b are
; constructed from the same parts, X2 is different
str1a := make-string 1 #\a
str1b := make-string 1 #\a
str2  := make-string 1 #\b

sym1a := 'a
sym1b := 'a
sym2  := 'b

kw1a  := make-keyword sym1a
kw1b  := make-keyword sym1b
kw2   := make-keyword sym2

p1a   := pair 1 2
p1b   := pair 1 2
p2    := pair 2 1

arr1a := list->array '(1 2)
arr1b := list->array '(1 2)
arr2  := list->array '(2 1)

ht1a  := alist->hash '((#\a "apple") (#\p "pear"))
ht1b  := alist->hash '((#\a "apple") (#\p "pear"))
ht2   := alist->hash '((#\c "carrot") (#\p "potato"))

fn1a  := (function (a b) #n)
fn1b  := (function (a b) #n)
fn2   := (function (a & b) #n)

bn1a  := 1.0
bn1b  := 1.0
bn2   := 2.0

fh1a  := open-input-file testfile
fh1b  := open-input-file testfile
fh2   := open-output-file testfile

bs1a  := #B{ 3 }
bs1b  := #B{ 3 }
bs2   := #B{ 5 }

cchar1a  := C/number-> 1 'char
cchar1b  := C/number-> 1 'char
cchar2   := C/number-> 2 'char
test (C/->integer cchar1a) 1

cschar1a  := C/number-> 1 'schar
cschar1b  := C/number-> 1 'schar
cschar2   := C/number-> 2 'schar
test (C/->integer cschar1a) 1

cuchar1a  := C/number-> 1 'uchar
cuchar1b  := C/number-> 1 'uchar
cuchar2   := C/number-> 2 'uchar
test (C/->integer cuchar1a) 1

cshort1a  := C/number-> 1 'short
cshort1b  := C/number-> 1 'short
cshort2   := C/number-> 2 'short
test (C/->integer cshort1a) 1

cushort1a  := C/number-> 1 'ushort
cushort1b  := C/number-> 1 'ushort
cushort2   := C/number-> 2 'ushort
test (C/->integer cushort1a) 1

cint1a  := C/number-> 1 'int
cint1b  := C/number-> 1 'int
cint2   := C/number-> 2 'int
test (C/->integer cint1a) 1

cuint1a  := C/number-> 1 'uint
cuint1b  := C/number-> 1 'uint
cuint2   := C/number-> 2 'uint
test (C/->integer cuint1a) 1

clong1a  := C/number-> 1 'long
clong1b  := C/number-> 1 'long
clong2   := C/number-> 2 'long
test (C/->integer clong1a) 1

culong1a  := C/number-> 1 'ulong
culong1b  := C/number-> 1 'ulong
culong2   := C/number-> 2 'ulong
test (C/->integer culong1a) 1

clonglong1a  := C/number-> 1 'longlong
clonglong1b  := C/number-> 1 'longlong
clonglong2   := C/number-> 2 'longlong
test (C/->integer clonglong1a) 1

culonglong1a  := C/number-> 1 'ulonglong
culonglong1b  := C/number-> 1 'ulonglong
culonglong2   := C/number-> 2 'ulonglong
test (C/->integer culonglong1a) 1

cfloat1a  := C/number-> 123.456 'float
cfloat1b  := C/number-> 123.456 'float
cfloat2   := C/number-> 234.567 'float
test (C/->number cfloat1a) 123.456008911132812

cdouble1a  := C/number-> 123.456 'double
cdouble1b  := C/number-> 123.456 'double
cdouble2   := C/number-> 234.567 'double
test (C/->number cdouble1a) 123.456000000000031

clongdouble1a  := C/number-> 123.456 'longdouble
clongdouble1b  := C/number-> 123.456 'longdouble
clongdouble2   := C/number-> 234.567 'longdouble
;; C/->number for long double is not supported
;; test (C/->number clongdouble1a) 123.456000000000029

;
test (eq?    0 0)	#t
test (eqv?   0 0)	#t
test (equal? 0 0)	#t
test (eq?    0 1)	#f
test (eqv?   0 1)	#f
test (equal? 0 1)	#f
test (eq?    0 0.0)	#f
test (eqv?   0 0.0)	#t
test (equal? 0 0.0)	#t

test (eq?    #t #t)	#t
test (eqv?   #t #t)	#t
test (equal? #t #t)	#t
test (eq?    #t #f)	#f
test (eqv?   #t #f)	#f
test (equal? #t #f)	#f
test (eq?    #t 1)	#f
test (eqv?   #t 1)	#f
test (equal? #t 1)	#f

test (eq?    #\a #\a)	#t
test (eqv?   #\a #\a)	#t
test (equal? #\a #\a)	#t
test (eq?    #\a #\b)	#f
test (eqv?   #\a #\b)	#f
test (equal? #\a #\b)	#f

test (eq?    str1a str1a)	#t
test (eqv?   str1a str1a)	#t
test (equal? str1a str1a)	#t
test (eq?    str1a str1b)	#f
test (eqv?   str1a str1b)	#t
test (equal? str1a str1b)	#t
test (eq?    str1a str2)	#f
test (eqv?   str1a str2)	#f
test (equal? str1a str2)	#f

test (eq?    sym1a sym1a)	#t
test (eqv?   sym1a sym1a)	#t
test (equal? sym1a sym1a)	#t
test (eq?    sym1a sym1b)	#t
test (eqv?   sym1a sym1b)	#t
test (equal? sym1a sym1b)	#t
test (eq?    sym1a sym2)	#f
test (eqv?   sym1a sym2)	#f
test (equal? sym1a sym2)	#f

test (eq?    kw1a kw1a)		#t
test (eqv?   kw1a kw1a)		#t
test (equal? kw1a kw1a)		#t
test (eq?    kw1a kw1b)		#t
test (eqv?   kw1a kw1b)		#t
test (equal? kw1a kw1b)		#t
test (eq?    kw1a kw2)		#f
test (eqv?   kw1a kw2)		#f
test (equal? kw1a kw2)		#f

test (eq?    p1a p1a)		#t
test (eqv?   p1a p1a)		#t
test (equal? p1a p1a)		#t
test (eq?    p1a p1b)		#f
test (eqv?   p1a p1b)		#f
test (equal? p1a p1b)		#t
test (eq?    p1a p2)		#f
test (eqv?   p1a p2)		#f
test (equal? p1a p2)		#f

test (eq?    arr1a arr1a)	#t
test (eqv?   arr1a arr1a)	#t
test (equal? arr1a arr1a)	#t
test (eq?    arr1a arr1b)	#f
test (eqv?   arr1a arr1b)	#f
test (equal? arr1a arr1b)	#t
test (eq?    arr1a arr2)	#f
test (eqv?   arr1a arr2)	#f
test (equal? arr1a arr2)	#f

test (eq?    ht1a ht1a)		#t
test (eqv?   ht1a ht1a)		#t
test (equal? ht1a ht1a)		#t
test (eq?    ht1a ht1b)		#f
test (eqv?   ht1a ht1b)		#f
test (equal? ht1a ht1b)		#t
test (eq?    ht1a ht2)		#f
test (eqv?   ht1a ht2)		#f
test (equal? ht1a ht2)		#f

test (eq?    fn1a fn1a)	#t
test (eqv?   fn1a fn1a)	#t
test (equal? fn1a fn1a)	#t
test (eq?    fn1a fn1b)	#f
test (eqv?   fn1a fn1b)	#f
test (equal? fn1a fn1b)	#f
test (eq?    fn1a fn2)	#f
test (eqv?   fn1a fn2)	#f
test (equal? fn1a fn2)	#f

test (eq?    bn1a bn1a)	#t
test (eqv?   bn1a bn1a)	#t
test (equal? bn1a bn1a)	#t
test (eq?    bn1a bn1b)	#f
test (eqv?   bn1a bn1b)	#t
test (equal? bn1a bn1b)	#t
test (eq?    bn1a bn2)	#f
test (eqv?   bn1a bn2)	#f
test (equal? bn1a bn2)	#f

test (eq?    fh1a fh1a)	#t
test (eqv?   fh1a fh1a)	#t
test (equal? fh1a fh1a)	#t
test (eq?    fh1a fh1b)	#f
test (eqv?   fh1a fh1b)	#f
test (equal? fh1a fh1b)	#f
test (eq?    fh1a fh2)	#f
test (eqv?   fh1a fh2)	#f
test (equal? fh1a fh2)	#f

test (eq?    bs1a bs1a)	#t
test (eqv?   bs1a bs1a)	#t
test (equal? bs1a bs1a)	#t
test (eq?    bs1a bs1b)	#f
test (eqv?   bs1a bs1b)	#f
test (equal? bs1a bs1b)	#t
test (eq?    bs1a bs2)	#f
test (eqv?   bs1a bs2)	#f
test (equal? bs1a bs2)	#f

test (eq?    cchar1a cchar1a)	#t
test (eqv?   cchar1a cchar1a)	#t
test (equal? cchar1a cchar1a)	#t
test (eq?    cchar1a cchar1b)	#t
test (eqv?   cchar1a cchar1b)	#t
test (equal? cchar1a cchar1b)	#t
test (eq?    cchar1a cchar2)	#f
test (eqv?   cchar1a cchar2)	#f
test (equal? cchar1a cchar2)	#f

test (eq?    cschar1a cschar1a)	#t
test (eqv?   cschar1a cschar1a)	#t
test (equal? cschar1a cschar1a)	#t
test (eq?    cschar1a cschar1b)	#t
test (eqv?   cschar1a cschar1b)	#t
test (equal? cschar1a cschar1b)	#t
test (eq?    cschar1a cschar2)	#f
test (eqv?   cschar1a cschar2)	#f
test (equal? cschar1a cschar2)	#f

test (eq?    cuchar1a cuchar1a)	#t
test (eqv?   cuchar1a cuchar1a)	#t
test (equal? cuchar1a cuchar1a)	#t
test (eq?    cuchar1a cuchar1b)	#t
test (eqv?   cuchar1a cuchar1b)	#t
test (equal? cuchar1a cuchar1b)	#t
test (eq?    cuchar1a cuchar2)	#f
test (eqv?   cuchar1a cuchar2)	#f
test (equal? cuchar1a cuchar2)	#f

test (eq?    cshort1a cshort1a)	#t
test (eqv?   cshort1a cshort1a)	#t
test (equal? cshort1a cshort1a)	#t
test (eq?    cshort1a cshort1b)	#t
test (eqv?   cshort1a cshort1b)	#t
test (equal? cshort1a cshort1b)	#t
test (eq?    cshort1a cshort2)	#f
test (eqv?   cshort1a cshort2)	#f
test (equal? cshort1a cshort2)	#f

test (eq?    cushort1a cushort1a)	#t
test (eqv?   cushort1a cushort1a)	#t
test (equal? cushort1a cushort1a)	#t
test (eq?    cushort1a cushort1b)	#t
test (eqv?   cushort1a cushort1b)	#t
test (equal? cushort1a cushort1b)	#t
test (eq?    cushort1a cushort2)	#f
test (eqv?   cushort1a cushort2)	#f
test (equal? cushort1a cushort2)	#f

test (eq?    cint1a cint1a)	#t
test (eqv?   cint1a cint1a)	#t
test (equal? cint1a cint1a)	#t
test (eq?    cint1a cint1b)	#t
test (eqv?   cint1a cint1b)	#t
test (equal? cint1a cint1b)	#t
test (eq?    cint1a cint2)	#f
test (eqv?   cint1a cint2)	#f
test (equal? cint1a cint2)	#f

test (eq?    cuint1a cuint1a)	#t
test (eqv?   cuint1a cuint1a)	#t
test (equal? cuint1a cuint1a)	#t
test (eq?    cuint1a cuint1b)	#t
test (eqv?   cuint1a cuint1b)	#t
test (equal? cuint1a cuint1b)	#t
test (eq?    cuint1a cuint2)	#f
test (eqv?   cuint1a cuint2)	#f
test (equal? cuint1a cuint2)	#f

test (eq?    clong1a clong1a)	#t
test (eqv?   clong1a clong1a)	#t
test (equal? clong1a clong1a)	#t
test (eq?    clong1a clong1b)	#t
test (eqv?   clong1a clong1b)	#t
test (equal? clong1a clong1b)	#t
test (eq?    clong1a clong2)	#f
test (eqv?   clong1a clong2)	#f
test (equal? clong1a clong2)	#f

test (eq?    culong1a culong1a)	#t
test (eqv?   culong1a culong1a)	#t
test (equal? culong1a culong1a)	#t
test (eq?    culong1a culong1b)	#t
test (eqv?   culong1a culong1b)	#t
test (equal? culong1a culong1b)	#t
test (eq?    culong1a culong2)	#f
test (eqv?   culong1a culong2)	#f
test (equal? culong1a culong2)	#f

test (eq?    clonglong1a clonglong1a)	#t
test (eqv?   clonglong1a clonglong1a)	#t
test (equal? clonglong1a clonglong1a)	#t
test (eq?    clonglong1a clonglong1b)	#t
test (eqv?   clonglong1a clonglong1b)	#t
test (equal? clonglong1a clonglong1b)	#t
test (eq?    clonglong1a clonglong2)	#f
test (eqv?   clonglong1a clonglong2)	#f
test (equal? clonglong1a clonglong2)	#f

test (eq?    culonglong1a culonglong1a)	#t
test (eqv?   culonglong1a culonglong1a)	#t
test (equal? culonglong1a culonglong1a)	#t
test (eq?    culonglong1a culonglong1b)	#t
test (eqv?   culonglong1a culonglong1b)	#t
test (equal? culonglong1a culonglong1b)	#t
test (eq?    culonglong1a culonglong2)	#f
test (eqv?   culonglong1a culonglong2)	#f
test (equal? culonglong1a culonglong2)	#f

test (eq?    cfloat1a cfloat1a)	#t
test (eqv?   cfloat1a cfloat1a)	#t
test (equal? cfloat1a cfloat1a)	#t
test (eq?    cfloat1a cfloat1b)	#t
test (eqv?   cfloat1a cfloat1b)	#t
test (equal? cfloat1a cfloat1b)	#t
test (eq?    cfloat1a cfloat2)	#f
test (eqv?   cfloat1a cfloat2)	#f
test (equal? cfloat1a cfloat2)	#f

test (eq?    cdouble1a cdouble1a)	#t
test (eqv?   cdouble1a cdouble1a)	#t
test (equal? cdouble1a cdouble1a)	#t
test (eq?    cdouble1a cdouble1b)	#t
test (eqv?   cdouble1a cdouble1b)	#t
test (equal? cdouble1a cdouble1b)	#t
test (eq?    cdouble1a cdouble2)	#f
test (eqv?   cdouble1a cdouble2)	#f
test (equal? cdouble1a cdouble2)	#f

;; equality of C long double is not implemented
;; test (eq?    clongdouble1a clongdouble1a)	#t
;; test (eqv?   clongdouble1a clongdouble1a)	#t
;; test (equal? clongdouble1a clongdouble1a)	#t
;; test (eq?    clongdouble1a clongdouble1b)	#t
;; test (eqv?   clongdouble1a clongdouble1b)	#t
;; test (equal? clongdouble1a clongdouble1b)	#t
;; test (eq?    clongdouble1a clongdouble2)	#f
;; test (eqv?   clongdouble1a clongdouble2)	#f
;; test (equal? clongdouble1a clongdouble2)	#f

;; the converters should return the same kind of thing
; C/integer-> default is an int
test (equal? (C/integer-> 1) (C/integer-> 1 'int))			#t
test (equal? (C/integer-> 1) (C/number-> 1 'int))			#t
; C/integer->unsigned default is a uint
test (equal? (C/integer->unsigned 1) (C/integer->unsigned 1 'uint))	#t
test (equal? (C/integer->unsigned 1) (C/integer-> 1 'uint))		#t
test (equal? (C/integer->unsigned 1) (C/number-> 1 'uint))		#t

; code coverage of squirelly corners of idio_equal()
str := "hello"
sub1 := substring str 0 1
sub2 := substring str 0 2

test (equal? str sub1)  #f
test (eq? sub1 sub2)    #f
test (equal? sub1 sub2) #f

; while we're here, exercise the printer
test (format "%s" sub2) "he"

ht1 := (make-hash)
hash-set! ht1 #\a "apple"
hash-set! ht1 #\p "pear"
ht2 := copy-value ht1

test (eq? ht1 ht2)    #f
test (equal? ht1 ht2) #t

hash-set! ht1 #\b "berry"
hash-set! ht2 #\b "banana"
test (equal? ht1 ht2) #f

test (eq? 0.0 0.0) #f
test (equal? C/0u libc/UINTMAX_MAX) #f
test (eqv? ^error ^idio-error) #f
test (equal? ^error ^idio-error) #f

st1 := make-struct-type 'st1 #n '(x y)
st2 := st1
st1 := make-struct-type 'st1 #n '(x y)
test (equal? st1 st2) #t
st1 := make-struct-type 'st1 #n '(x y z)
test (equal? st1 st2) #f
st1 := make-struct-type 'st1 #n '(x z)
test (equal? st1 st2) #f

; we didn't create an accessor so make the struct instance the hard
; way
si1 := make-struct-instance st1 1 2
si2 := make-struct-instance st2 1 2
test (equal? si1 si2) #f
si2 := make-struct-instance st1 1 3
test (equal? si1 si2) #f
si2 := make-struct-instance st1 1 2
test (equal? si1 si2) #t

; while we're here, exercise the printer
format "%s" st1

format "%s" si1

add-as-string st1 (function (v s) {
		     "printing"
})

test (format "%s" si1) "printing"

; continuations
k1 := #f
k2 := #f

; call/cc has been improved in call-cc.idio -- if we want an actual
; continuation object we need to go deeper.  Not recommended.
%%call/uc (function (k) {
	     k1 = k
})
%%call/uc (function (k) {
	     k2 = k
})

test (equal? k1 k1) #t
test (equal? k1 k2) #f

; while we're here, exercise the printer
format "%s" k1

test (eqv? #B{ 3 } #B{ 3 }) #f

; while we're here, exercise the printer
test (format "%s" #B{ 3 1 }) "#B{ 3 100 }"
test (format "%s" #B{ 254 1 10:1 18-18 28-30 38:1 60-78 F8-F8 }) "#B{ 254 10000000 10:10000000 18-18 28-30 10000000 60-78 f8-f8 }"

osh := (open-output-string)
hprintf osh "void: %s\n" (void)

;; printing is a little tricky because there isn't a direct
;; user-interface to the idio_as_string() code.  All the printf
;; functions use the display style -- not so good for characters and
;; strings.  {string} returns the printed form...in a string!  Hence
;; some of the weird expected results.

;; unicode
test (string #\{space}) "#U+0020"
test (format "%s" #\{space}) " "
test (string #U+61) "#\\a"
test (format "%s" #U+61) "a"
test (format "%s" #U+A4) "¤"		; >= 0x80 will be two bytes - 00A4;CURRENCY SIGN
test (format "%s" #U+B87) "இ"		; >= 0x800 will be three bytes - 0B87;TAMIL LETTER I
test (format "%s" #U+10053) "𐁓"	; >= 0x10000 will be four bytes - 10053;LINEAR B SYMBOL B034

test (string (substring "hello" 2 4)) "\"ll\""

x := '#T{ a $b $@c 'd}
test (format "%s" x) "#T{ (a $b $@c 'd) }"

; printing arrays of greater than 40 elements creates a break after
; the first twenty and before the final 20
test (format "%s" (make-array 41)) "#[ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ..[21] #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f ]"

;; no guarantee about ordering of the output -- so this is just code
;; coverage
format "%s" ht1

format "%s" load
; call/cc has "-" for name
format "%s" call/cc

format "%s" pair

format "%s" (find-module 'Idio)

format "%s" osh

; raise the not-CLOEXEC "!" indicator
fh := open-file testfile "r"
format "%s" fh
close-handle fh

format "%s" libc/UINTMAX_MAX

; A C/pointer with a printer
format "%s" (libc/gettimeofday)

copy-value "hello" 'deep

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; fixnums

n := 10

; basic conversion
test (format "%d" n)	"10"
test (format "%x" n)	"a"
test (format "%X" n)	"A"
test (format "%o" n)	"12"
test (format "%b" n)	"1010"

; min width (no change)
test (format "%1d" n)	"10"
test (format "%1x" n)	"a"
test (format "%1X" n)	"A"
test (format "%1o" n)	"12"
test (format "%1b" n)	"1010"

; min width (change)
test (format "%4d" n)	"  10"
test (format "%4x" n)	"   a"
test (format "%4X" n)	"   A"
test (format "%4o" n)	"  12"
test (format "%6b" n)	"  1010"

; min width (change) ; left aligned
test (format "%-4d" n)	"10  "
test (format "%-4x" n)	"a   "
test (format "%-4X" n)	"A   "
test (format "%-4o" n)	"12  "
test (format "%-6b" n)	"1010  "

; min width (no change) ; zero padded
test (format "%01d" n)	"10"
test (format "%01x" n)	"a"
test (format "%01X" n)	"A"
test (format "%01o" n)	"12"
test (format "%01b" n)	"1010"

; min width (change) ; zero padded
test (format "%04d" n)	"0010"
test (format "%04x" n)	"000a"
test (format "%04X" n)	"000A"
test (format "%04o" n)	"0012"
test (format "%06b" n)	"001010"

; min precision (no change)
test (format "%.1d" n)	"10"
test (format "%.1x" n)	"a"
test (format "%.1X" n)	"A"
test (format "%.1o" n)	"12"
test (format "%.1b" n)	"1010"

; min precision (change)
test (format "%.3d" n)	"010"
test (format "%.3x" n)	"00a"
test (format "%.3X" n)	"00A"
test (format "%.3o" n)	"012"
test (format "%.6b" n)	"001010"

; min width > min precision
test (format "%4.3d" n)	" 010"
test (format "%4.3x" n)	" 00a"
test (format "%4.3X" n)	" 00A"
test (format "%4.3o" n)	" 012"
test (format "%8.6b" n)	"  001010"

; min width > min precision ; left aligned
test (format "%-4.3d" n)	"010 "
test (format "%-4.3x" n)	"00a "
test (format "%-4.3X" n)	"00A "
test (format "%-4.3o" n)	"012 "
test (format "%-8.6b" n)	"001010  "

; min width < min precision
test (format "%2.3d" n)	"010"
test (format "%2.3x" n)	"00a"
test (format "%2.3X" n)	"00A"
test (format "%2.3o" n)	"012"
test (format "%4.6b" n)	"001010"

; unexpected conversion - replaced with %d
test (format "%4q" n) "  10"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; bignums
;;
;; lots of variants, enjoy!
;;
;; %e		as printf(3)
;; %f		as printf(3)
;; string	as S9fES

; the 1e6 format forces a bignum!
n := 1e6

test (string n)		"1.0e+6"

; default formats - precision is 6
test (format "%e" n)	"1.000000e+06"
test (format "%f" n)	"1000000.000000"

; min width (no change)
test (format "%1e" n)	"1.000000e+06"
test (format "%1f" n)	"1000000.000000"

; min width (change)
test (format "%15e" n)	"   1.000000e+06"
test (format "%15f" n)	" 1000000.000000"

; min width (change) ; left aligned
test (format "%-15e" n)	"1.000000e+06   "
test (format "%-15f" n)	"1000000.000000 "

; min width (no change) ; zero padded
test (format "%01e" n)	"1.000000e+06"
test (format "%01f" n)	"1000000.000000"

; min width (change) ; zero padded
test (format "%015e" n)	"0001.000000e+06"
test (format "%015f" n)	"01000000.000000"

; min precision
test (format "%.2e" n)	"1.00e+06"
test (format "%.2f" n)	"1000000.00"

; zero precision
test (format "%.0e" n)	"1e+06"
test (format "%.0f" n)	"1000000"

; min width ; min precision
test (format "%15.2e" n)	"       1.00e+06"
test (format "%15.2f" n)	"     1000000.00"

; min width ; min precision ; left aligned
test (format "%-15.2e" n)	"1.00e+06       "
test (format "%-15.2f" n)	"1000000.00     "

; bigger!
n := 1e100

test (string n)		"1.0e+100"

; default formats - precision is 6
test (format "%e" n)	"1.000000e+100"
test (format "%f" n)	"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.000000"

#*

let's assume the rest work...Bash's printf isn't so far off!

% printf "%f\n" 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9999999999999999999669353532207342619498699019828496079271391541752018669482644324418977840117055488.000000

*#

; smaller!
n := 1e-6

test (string n)		"1.0e-6"

; default formats - precision is 6
test (format "%e" n)	"1.000000e-06"
test (format "%f" n)	"0.000001"

; min width (no change)
test (format "%1e" n)	"1.000000e-06"
test (format "%1f" n)	"0.000001"

; min width (change)
test (format "%15e" n)	"   1.000000e-06"
test (format "%15f" n)	"       0.000001"

; min width (change) ; left aligned
test (format "%-15e" n)	"1.000000e-06   "
test (format "%-15f" n)	"0.000001       "

; min width (no change) ; zero padded
test (format "%01e" n)	"1.000000e-06"
test (format "%01f" n)	"0.000001"

; min width (change) ; zero padded
test (format "%015e" n)	"0001.000000e-06"
test (format "%015f" n)	"00000000.000001"

; min precision
test (format "%.2e" n)	"1.00e-06"
test (format "%.2f" n)	"0.00"

; zero precision
test (format "%.0e" n)	"1e-06"
test (format "%.0f" n)	"0"

; min width ; min precision
test (format "%15.2e" n)	"       1.00e-06"
test (format "%15.2f" n)	"           0.00"

; min width ; min precision ; left aligned
test (format "%-15.2e" n)	"1.00e-06       "
test (format "%-15.2f" n)	"0.00           "

; more digits (not too many as we can check min precision)
n := 123.456

test (string n)		"1.23456e+2"

; default formats - precision is 6
test (format "%e" n)	"1.234560e+02"	; note trailing 0 due to precision 6
test (format "%f" n)	"123.456000"

; min width (no change)
test (format "%1e" n)	"1.234560e+02"
test (format "%1f" n)	"123.456000"

; min width (change)
test (format "%15e" n)	"   1.234560e+02"
test (format "%15f" n)	"     123.456000"

; min width (change) ; left aligned
test (format "%-15e" n)	"1.234560e+02   "
test (format "%-15f" n)	"123.456000     "

; min width (no change) ; zero padded
test (format "%01e" n)	"1.234560e+02"
test (format "%01f" n)	"123.456000"

; min width (change) ; zero padded
test (format "%015e" n)	"0001.234560e+02"
test (format "%015f" n)	"00000123.456000"

; min precision
test (format "%.2e" n)	"1.23e+02"
test (format "%.2f" n)	"123.45"

; zero precision
test (format "%.0e" n)	"1e+02"
test (format "%.0f" n)	"123"

; min width ; min precision
test (format "%15.2e" n)	"       1.23e+02"
test (format "%15.2f" n)	"         123.45"

; min width ; min precision ; left aligned
test (format "%-15.2e" n)	"1.23e+02       "
test (format "%-15.2f" n)	"123.45         "

; many digits (in particular more than 9 (one segment) on 32bit
; systems)

; we should be rounding the 6th digit from 2 to 3 (because of the 6)
; in most cases
n := 3.14159265358979323

test (string n)		"3.14159265358979323e+0"

; default formats - precision is 6
test (format "%e" n)	"3.141592e+00"	; note trailing 0 due to precision 6
test (format "%f" n)	"3.141592"

; min width (no change)
test (format "%1e" n)	"3.141592e+00"
test (format "%1f" n)	"3.141592"

; min width (change)
test (format "%15e" n)	"   3.141592e+00"
test (format "%15f" n)	"       3.141592"

; min width (change) ; left aligned
test (format "%-15e" n)	"3.141592e+00   "
test (format "%-15f" n)	"3.141592       "

; min width (no change) ; zero padded
test (format "%01e" n)	"3.141592e+00"
test (format "%01f" n)	"3.141592"

; min width (change) ; zero padded
test (format "%015e" n)	"0003.141592e+00"
test (format "%015f" n)	"00000003.141592"

; min precision
test (format "%.2e" n)	"3.14e+00"
test (format "%.2f" n)	"3.14"

; zero precision
test (format "%.0e" n)	"3e+00"
test (format "%.0f" n)	"3"

; min width ; min precision
test (format "%15.2e" n)	"       3.14e+00"
test (format "%15.2f" n)	"           3.14"

; min width ; min precision ; left aligned
test (format "%-15.2e" n)	"3.14e+00       "
test (format "%-15.2f" n)	"3.14           "

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; C base_types
;;
;; (too) many variants
;;
;; The two (broad) types, integrals and floating points do much of a
;; muchness for each type.  We can test one (of each) thoroughly and
;; waft some interest at their siblings to show willing.

;; Unlike printf(2) we mandate that the "unsigned int" conversion
;; specifiers, o u x X, must be unsigned (char, short, int, long or
;; long long) and are not available for signed integrals.

;; So let's be thorough with uint and double and then come back to the
;; others.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; int - a copy of the fixnum tests, above

n := C/integer-> 10 'uint

; basic conversion
test (format "%d" n)	"10"
test (format "%x" n)	"a"
test (format "%X" n)	"A"
test (format "%o" n)	"12"
test (format "%b" n)	"1010"

; min width (no change)
test (format "%1d" n)	"10"
test (format "%1x" n)	"a"
test (format "%1X" n)	"A"
test (format "%1o" n)	"12"
test (format "%1b" n)	"1010"

; min width (change)
test (format "%4d" n)	"  10"
test (format "%4x" n)	"   a"
test (format "%4X" n)	"   A"
test (format "%4o" n)	"  12"
test (format "%6b" n)	"  1010"

; min width (change) ; left aligned
test (format "%-4d" n)	"10  "
test (format "%-4x" n)	"a   "
test (format "%-4X" n)	"A   "
test (format "%-4o" n)	"12  "
test (format "%-6b" n)	"1010  "

; min width (no change) ; zero padded
test (format "%01d" n)	"10"
test (format "%01x" n)	"a"
test (format "%01X" n)	"A"
test (format "%01o" n)	"12"
test (format "%01b" n)	"1010"

; min width (change) ; zero padded
test (format "%04d" n)	"0010"
test (format "%04x" n)	"000a"
test (format "%04X" n)	"000A"
test (format "%04o" n)	"0012"
test (format "%06b" n)	"001010"

; min precision (no change)
test (format "%.1d" n)	"10"
test (format "%.1x" n)	"a"
test (format "%.1X" n)	"A"
test (format "%.1o" n)	"12"
test (format "%.1b" n)	"1010"

; min precision (change)
test (format "%.3d" n)	"010"
test (format "%.3x" n)	"00a"
test (format "%.3X" n)	"00A"
test (format "%.3o" n)	"012"
test (format "%.6b" n)	"001010"

; min width > min precision
test (format "%4.3d" n)	" 010"
test (format "%4.3x" n)	" 00a"
test (format "%4.3X" n)	" 00A"
test (format "%4.3o" n)	" 012"
test (format "%8.6b" n)	"  001010"

; min width > min precision ; left aligned
test (format "%-4.3d" n)	"010 "
test (format "%-4.3x" n)	"00a "
test (format "%-4.3X" n)	"00A "
test (format "%-4.3o" n)	"012 "
test (format "%-8.6b" n)	"001010  "

; min width < min precision
test (format "%2.3d" n)	"010"
test (format "%2.3x" n)	"00a"
test (format "%2.3X" n)	"00A"
test (format "%2.3o" n)	"012"
test (format "%4.6b" n)	"001010"

; unexpected conversion - replaced with %d
test (format "%4q" n) "  10"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; double - a copy of the initial bignum tests extended with %g

n := C/number-> 1e6 'double

test (string n)		"1e+06"

; default formats - precision is 6
test (format "%e" n)	"1.000000e+06"
test (format "%f" n)	"1000000.000000"
test (format "%g" n)	"1e+06"

; min width (no change)
test (format "%1e" n)	"1.000000e+06"
test (format "%1f" n)	"1000000.000000"
test (format "%1g" n)	"1e+06"

; min width (change)
test (format "%15e" n)	"   1.000000e+06"
test (format "%15f" n)	" 1000000.000000"
test (format "%15g" n)	"          1e+06"

; min width (change) ; left aligned
test (format "%-15e" n)	"1.000000e+06   "
test (format "%-15f" n)	"1000000.000000 "
test (format "%-15g" n)	"1e+06          "

; min width (no change) ; zero padded
test (format "%01e" n)	"1.000000e+06"
test (format "%01f" n)	"1000000.000000"
test (format "%01g" n)	"1e+06"

; min width (change) ; zero padded
test (format "%015e" n)	"0001.000000e+06"
test (format "%015f" n)	"01000000.000000"
test (format "%015g" n)	"00000000001e+06"

; min precision
test (format "%.2e" n)	"1.00e+06"
test (format "%.2f" n)	"1000000.00"
test (format "%.2g" n)	"1e+06"

; zero precision
test (format "%.0e" n)	"1e+06"
test (format "%.0f" n)	"1000000"
test (format "%.0g" n)	"1e+06"

; min width ; min precision
test (format "%15.2e" n)	"       1.00e+06"
test (format "%15.2f" n)	"     1000000.00"
test (format "%15.2g" n)	"          1e+06"

; min width ; min precision ; left aligned
test (format "%-15.2e" n)	"1.00e+06       "
test (format "%-15.2f" n)	"1000000.00     "
test (format "%-15.2g" n)	"1e+06          "

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;

;; char -- only ever printf(3) %c
c-char := (C/integer-> #x61 'char)
test (format "%c" c-char) "a"
test (format "%s" c-char) "a"
test (format "%p" c-char) "a"

n = 10
;; signed char -- only %d
c-schar := (C/integer-> n 'schar)
test (format "%d" c-schar) "10"
test (format "%s" c-schar) "10"
test (format "%p" c-schar) "10"

;; unsigned char -- %X %o %u %x, default %u
c-uchar := (C/integer-> n 'uchar)
test (format "%X" c-uchar) "A"
test (format "%o" c-uchar) "12"
test (format "%u" c-uchar) "10"
test (format "%x" c-uchar) "a"
test (format "%s" c-uchar) "10"
test (format "%p" c-uchar) "10"

;; short -- only %d
c-short := (C/integer-> n 'short)
test (format "%d" c-short) "10"
test (format "%s" c-short) "10"
test (format "%p" c-short) "10"

;; unsigned short -- %X %o %u %x, default %u
c-ushort := (C/integer-> n 'ushort)
test (format "%X" c-ushort) "A"
test (format "%o" c-ushort) "12"
test (format "%u" c-ushort) "10"
test (format "%x" c-ushort) "a"
test (format "%s" c-ushort) "10"
test (format "%p" c-ushort) "10"

;; int -- only %d
c-int := (C/integer-> n 'int)
test (format "%d" c-int) "10"
test (format "%s" c-int) "10"
test (format "%p" c-int) "10"

;; unsigned int -- %X %o %u %x, default %u
c-uint := (C/integer-> n 'uint)
test (format "%X" c-uint) "A"
test (format "%o" c-uint) "12"
test (format "%u" c-uint) "10"
test (format "%x" c-uint) "a"
test (format "%s" c-uint) "10"
test (format "%p" c-uint) "10"

;; signed long -- only %d
c-long := (C/integer-> n 'long)
test (format "%d" c-long) "10"
test (format "%s" c-long) "10"
test (format "%p" c-long) "10"

;; unsigned long -- %X %o %u %x, default %u
c-ulong := (C/integer-> n 'ulong)
test (format "%X" c-ulong) "A"
test (format "%o" c-ulong) "12"
test (format "%u" c-ulong) "10"
test (format "%x" c-ulong) "a"
test (format "%s" c-ulong) "10"
test (format "%p" c-ulong) "10"

;; long long -- only %d
c-longlong := (C/integer-> n 'longlong)
test (format "%d" c-longlong) "10"
test (format "%s" c-longlong) "10"
test (format "%p" c-longlong) "10"

;; unsigned long long -- %X %o %u %x, default %u
c-ulonglong := (C/integer-> n 'ulonglong)
test (format "%X" c-ulonglong) "A"
test (format "%o" c-ulonglong) "12"
test (format "%u" c-ulonglong) "10"
test (format "%x" c-ulonglong) "a"
test (format "%s" c-ulonglong) "10"
test (format "%p" c-ulonglong) "10"

n = 123.456789012
;; float -- %e %f %g, default %g
c-float := (C/number-> n 'float)
test (format "%e" c-float) "1.234568e+02"
(cond-expand
 (sizeof/pointer/32 {
   ;; ?? why is this different on 32-bit machines
   test (format "%f" c-float) "123.456779"
 })
 (else {
   test (format "%f" c-float) "123.456787"
 }))
test (format "%g" c-float) "123.457"
test (format "%s" c-float) "123.457"
test (format "%p" c-float) "123.457"

;; double -- %e %f %g, default %g
c-double := (C/number-> n 'double)
test (format "%e" c-double) "1.234568e+02"
test (format "%f" c-double) "123.456789"
test (format "%g" c-double) "123.457"
test (format "%s" c-double) "123.457"
test (format "%p" c-double) "123.457"

;; long double -- %e %f %g, default %g
c-longdouble := (C/number-> n 'longdouble)
test (format "%e" c-longdouble) "1.234568e+02"
test (format "%f" c-longdouble) "123.456789"
test (format "%g" c-longdouble) "123.457"
test (format "%s" c-longdouble) "123.457"
test (format "%p" c-longdouble) "123.457"


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; strings

s := "hello world"

test (format "%s" s)	"hello world"
test (format "%15s" s)	"    hello world"
test (format "%-15s" s)	"hello world    "
test (format "%.5s" s)	"hello"
test (format "%15.5s" s)	"          hello"
test (format "%-15.5s" s)	"hello          "

; 2-byte string with 9 code points -- the precision measures code
; points (nothing to do with UTF-8 bytes)
s := "кириллица"

test (format "%s" s)	"кириллица"
test (format "%15s" s)	"      кириллица"
test (format "%-15s" s)	"кириллица      "
test (format "%.5s" s)	"кирил"
test (format "%15.5s" s)	"          кирил"
test (format "%-15.5s" s)	"кирил          "

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; keyed data for %format

h := (make-hash)

h.#\s = "hello world"			; a string
h.#\f = 10				; a fixnum => %d
h.#\b = 123.456				; a bignum => %f

; basic access
test (%format 'keyed "%s" h)		"hello world"
test (%format 'keyed "%f" h)		"10"
test (%format 'keyed "%b" h)		"123.456000"

; now a more exotic format
test (%format 'keyed "%-15.5s" h)	"hello          "
test (%format 'keyed "%4.3f" h)		" 010"
test (%format 'keyed "%10.2b" h)	"    123.45"

;; all done?
Tests? (format0 + 679)

;Local Variables:
;mode: Idio
;coding: utf-8-unix
;End:
