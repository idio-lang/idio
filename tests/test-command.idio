;;
;; Copyright (c) 2015, 2017, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-command.idio
;;
module tests/command
import job-control libc

command0 := Tests

;; How to test external commands?

;; side-effects?

;; to avoid repeating the bulk of the error handler we'll just
;; (re)define the interesting bit, rt-command-status-error-handler or
;; rcseh:
rcseh := #n

trap ^rt-command-status-error (function (c) {
				 ;condition-report "test-command: ^rt-command-status-error" c (current-error-handle)
				 test (rt-command-status-error? c) #t
				 rcseh c

				 ;; If we are a child Idio (from a |
				 ;; operator) then we should invoke
				 ;; the default-rcse handler which
				 ;; will exit/kill us as it sees fit.
				 if (not (C/== IDIO_PID (getpid))) {
				   raise c
				 }
}) {

  ;; define some rt-command-status-error-handlers for the conditions
  ;; we are contriving to generate so that we can switch between them
  ;; as we go along

  ;; for exit0 we don't expect this code to be run at all -- hence
  ;; complaining loudly and testing for something that isn't generated
  ;; (an error in the summary is easier to spot)
  exit0 := function (c) {
	     eprintf "command tests: exit0: unexpected status error for PID %s\n" PID 
	     condition-report "command tests: exit0" c (current-error-handle)
	     test (rt-command-status-error-status c) 'job-failed
  }

  exit1 := function (c) {
	     ;eprintf "command tests: exit1: PID %s\n" PID
	     ;condition-report "command tests: exit1" c (current-error-handle)
	     job := idio-error-location c
	     test (job-detail job) #T{ (exit $(C/integer-> 1)) }
	     rt-command-status-error-status c
  }

  killed1 := function (c) {
	       ;eprintf "command tests: killed1: PID %s\n" PID
	       ;condition-report "command tests: killed1" c (current-error-handle)
	       job := idio-error-location c
	       test (job-detail job) #T{ (killed $(C/integer-> 1)) }
	       rt-command-status-error-status c
  }

  killed13 := function (c) {
		;eprintf "command tests: killed13: PID %s\n" PID
		;condition-report "command tests: killed13" c (current-error-handle)
		job := idio-error-location c
		test (job-detail job) #T{ (killed $(C/integer-> 13)) }
		rt-command-status-error-status c
  }

  ;; Testing the tests! 
  ;; 
  ;; We need to be sure that the OOB handlers are successfully kicked
  ;; off (or not kicked off) so we'll have a couple of functions to
  ;; store and check the Tests number has been incremented OOB (in the
  ;; main trap handler and the rcseh functions above) as we expect.

  ;; Remember, though, the test itself, as written in the rest of this
  ;; block, will increment Tests as well as any potential OOB handler.
  ;; The OOB handler will increment Tests twice: once to check the
  ;; condition is an rt-command-status-error and once in exit1/killed1
  ;; to verify the value of the status.

  test-id := Tests

  ;; test= exists to be sure of resetting test-id
  define (test=) {
    test-id = Tests
  }

  define (test+0) {
    Tests? (test-id + 0)
    (test=)
  }

  define (test+1) {
    Tests? (test-id + 1)
    (test=)
  }

  define (test+2) {
    Tests? (test-id + 2)
    (test=)
  }

  define (test+3) {
    Tests? (test-id + 3)
    (test=)
  }

  rcseh = exit0
  (test=)
  test (auto-exit -E 0) #t
  (test+1)

  rcseh = exit1
  (test=)
  test (auto-exit -E 1) #f
  (test+3)

  rcseh = killed1
  (test=)
  test (auto-exit -K 1) #f
  (test+3)

  rcseh = exit0
  (test=)
  test (auto-exit -o 1) #t
  (test+1)

  ;; foreground job
  (test=)
  auto-exit -s 1

  ;; check the job didn't fail
  test (job-failed %%last-job) #f
  (test+1)

  ;; backgrounded job
  (test=)
  bg-job auto-exit -s 1

  ;; As the bg-job's purpose is to sleep for one second we can be
  ;; moderately confident that an immediate test here that nothing has
  ;; happened to the number of tests will be OK.  But it is
  ;; technically a race condition as this parent process could have
  ;; been stalled.  YMMV.
  (test+0)

  ;; If we wait for the job to finish we should have...no change as it
  ;; should have exited 0.
  wait %%last-job
  (test+0)

  ;; check the bg-job didn't fail
  test (job-failed %%last-job) #f
  (test+1)

  ;; pipeline
  (test=)
  test (auto-exit -o 1 | auto-exit -r 1) #t
  (test+1)

  ;; In the following test, auto-exit -o 2 -s 1 | auto-exit -r 1, the
  ;; second command should finish first causing a SIGPIPE in the first
  ;; command.

  ;; However, the likes of gdb conspire to have SIGPIPE sigignore()d
  ;; by children and ultimately auto-exit.  Rather than auto-exit's
  ;; write to the pipe be killed by a SIGPIPE for '(killed 13) we'll
  ;; get an '(exit 1).
  ;;
  ;; There's no obvious way to test for being run under gdb (nor
  ;; anything else that predisposes itself to have children ignore
  ;; SIGPIPE).  All we can usefully do is look at and see if SIGPIPE
  ;; is being ignored and use the appropriate handler.
  ;;
  ;; This doesn't look like art.  Maybe it's contemporary art, then.

  if (C/== (signal-handler SIGPIPE) SIG_IGN) {
    rcseh = exit1
  } {
    rcseh = killed13
  }
  (test=)
  test (auto-exit -o 2 -s 1 | auto-exit -r 1) #f
  (test+3)

  ;; pipeline with regular Idio as the writer
  rcseh = exit0
  (test=)
  test (printf "first\n" | auto-exit -r 1) #t
  (test+1)

  ;; pipeline with the writer not writing anything
  rcseh = exit1
  (test=)
  test (auto-exit -E 0 | auto-exit -r 1) #f
  (test+3)

  ;; bg-job pipeline
  (test=)
  bg-job auto-exit -o 1 | auto-exit -r 1
  ;; no sleep this time so the only safe bet is to wait for the job to
  ;; finish
  wait %%last-job
  ;; no error so no increment in test-id
  (test+0)

  ;; check the bg-job didn't fail
  test (job-failed %%last-job) #f
  (test+1)

  ;; bg-job pipeline fail
  rcseh = exit1
  (test=)
  bg-job auto-exit -o 1 | auto-exit -r 2
  ;; no sleep this time so the only safe bet is to wait for the job to
  ;; finish
  wait %%last-job
  ;; this time we should have hit the two OOB tests
  (test+2)

  ;; check the bg-job DID fail
  test (job-failed %%last-job) #t
  (test+1)

}

;; IO redirection
{
  oih := (current-input-handle)
  ooh := (current-output-handle)
  oeh := (current-error-handle)

  ;; first of all, create {testfile} that external commands can access
  test-str := "Hello world"
  with-output-to-file testfile (function () {
    display test-str
  })

  stdinfile := "..stdin.."
  stdoutfile := "..stdout.."
  stderrfile := "..stderr.."

  ;; lsof gets a bit sniffy if the files have recently appeared
  touch stdinfile stdoutfile stderrfile

  with-output-to-file stdinfile (function () {
    display test-str
  })

  ;; Scheme-style IO redirection: with-*

  ;; STDIN

  fhi-str := #f
  ;; Test (implied) file-handle stdin
  with-input-from stdinfile (function () {
    fhi-str = (read-lines)
  })

  test fhi-str test-str

  stdinstring := (open-input-string test-str)
  shi-str := #f
  ;; Test (implied) string-handle stdin
  with-input-from stdinstring (function () {
    shi-str = (read-lines)
  })

  test shi-str test-str

  ;; STDOUT

  ;; Test (implied) file-handle stdout
  with-output-to stdoutfile (function () {
    cat testfile
  })

  th := open-input-file stdoutfile
  fho-str := read-lines th
  close-handle th

  test fho-str test-str

  ;; Test (implied) file-handle stdout for pipeline
  with-output-to stdoutfile (function () {
    cat testfile | cat
  })

  th := open-input-file stdoutfile
  fho-str := read-lines th
  close-handle th

  test fho-str test-str

  stdoutstring := (open-output-string)
  ;; Test (implied) string-handle stdout
  with-output-to stdoutstring (function () {
    cat testfile
  })

  sho-str := get-output-string stdoutstring

  test sho-str test-str

  ;; reset stdoutstring!
  stdoutstring = (open-output-string)

  ;; Test (implied) string-handle stdout pipeline
  with-output-to stdoutstring (function () {
    cat testfile | cat
  })

  sho-str = get-output-string stdoutstring

  test sho-str test-str

  ;; STDERR

  stderrstring := (open-output-string)

  ;; Test string-handle stderr
  with-error-to stderrstring (function () {
    auto-exit -e 1
  })

  sho-str = get-output-string stderrstring

  test ((string-length sho-str) gt 0) #t

  ;; shell-style IO redirection: > >& etc.
  ;; check the basics before we start!  stdin & stdout and stdout and
  ;; stderr should be the same
  test (io-check -i 1 -o 2) #t

  define (io-redir-tests) {
    redir-infile := "..redir-in.."
    redir-outfile := "..redir-out.."
    redir-errfile := "..redir-err.."

    ;; lsof gets a bit sniffy if the files have recently appeared
    touch redir-infile redir-outfile redir-errfile

    where-in := (append-string "/" redir-infile)
    where-out := (append-string "/" redir-outfile)
    where-err := (append-string "/" redir-errfile)

    with-output-to-file redir-infile (function () {
      display test-str
    })

    ;; STDIN
    ;; stdin from a file
    test (io-check -i where-in < redir-infile) #t

    ;; stdin from /dev/null
    test (io-check -i null < #n) #t

    ;; stdin from a pipe
    ;;
    ;; NB use the string "pipe" to avoid implicitly using the symbol
    ;; pipe from libc!
    test (cat "/dev/null" | io-check -i "pipe") #t

    ;; output: STDOUT and/or STDERR

    ;; to a file
    ;; stdout to a file
    test (io-check -o where-out > redir-outfile) #t

    ;; stderr to a file
    test (io-check -e where-err 2> redir-errfile) #t

    ;; stdout to a file & stderr to same
    test (io-check -o where-out -e where-out > redir-outfile 2>& 1) #t

    ;; stderr to a file & stdout to same
    test (io-check -o where-err -e where-err 2> redir-errfile >& 2) #t

    ;; stdout to /dev/null
    test (io-check -o null > #n) #t

    ;; stderr to /dev/null
    test (io-check -e null 2> #n) #t

    ;; stdout to a pipe
    test (io-check -o "pipe" | cat > #n) #t

    ;; stdout & stderr to a pipe
    test (io-check -o "pipe" -e "pipe" 2>& 1 | cat > #n) #t

    if (e? redir-infile) (delete-file redir-infile)
    if (e? redir-outfile) (delete-file redir-outfile)
    if (e? redir-errfile) (delete-file redir-errfile)
  }

  ;; stock tests
  (io-redir-tests)

  ;; Test (implied) file-handle stdin
  with-input-from stdinfile (function () {
    (io-redir-tests)
  })

  ;; Test (implied) string-handle stdin
  with-input-from stdinstring (function () {
    (io-redir-tests)
  })

  ;; Test (implied) file-handle stdout
  with-output-to stdoutfile (function () {
    (io-redir-tests)
  })

  ;; Test (implied) string-handle stdout
  with-output-to stdoutstring (function () {
    (io-redir-tests)
  })

  if (e? stdinfile) (delete-file stdinfile)
  if (e? stdoutfile) (delete-file stdoutfile)
  if (e? stderrfile) (delete-file stderrfile)

  set-input-handle! oih
  set-output-handle! ooh
  set-error-handle! oeh
}

;; some various code coverage
cwd := (getcwd)
OPATH := PATH
{
  ;; create a temporary directory which we'll use as PATH with a
  ;; single executable, the-real-true, which we can invoke the real
  ;; true command with
  tmpdir := (make-tmp-dir)
  trt-file := append-string tmpdir "/the-real-true"
  ofh := open-output-file trt-file
  hprintf ofh "#! /bin/sh\n%s\n" (command/%find-exe 'true)
  close-handle ofh
  chmod +x trt-file

  chdir tmpdir

  PATH = ""
  test (the-real-true) #t

  PATH = ":"
  test (the-real-true) #t

  PATH = ":foo"
  test (the-real-true) #t

  PATH = "foo:"
  test (the-real-true) #t

  PATH = "foo::bar"
  test (the-real-true) #t

  trap ^rt-command-error (function (c) {
			    test #t #t
			    'command-not-found
  }) {
    PATH = "foo"
    test (the-real-true) 'command-not-found
  }

  ; restore cwd/PATH for rm!
  chdir cwd
  PATH = OPATH
  rm -rf tmpdir
}
; restore cwd/PATH in case we bugged out!
chdir cwd
PATH = OPATH

;; code coverage: glob chars: * ? [
test (true a*) #t
test (true a?) #t
test (true [a]) #t

;; code coverage: arg types
; unicode
test (true #U+61) #t

; ~path
{
  tmpdir := (make-tmp-dir)

  ;; test no metacharacters
  gp := make-struct-instance ~path (append-string tmpdir "/a")
  test (true gp) #t

  ;; test zero matches
  gp := make-struct-instance ~path (append-string tmpdir "/*a")
  test (true gp) #t

  touch (append-string tmpdir "/foo-a")
  test (true gp) #t

  rm -rf tmpdir
}

test (collect-output hostname) HOSTNAME

;; execute a relative path command -- which means figuring one out!
;; Where is auto-exit, relative to us?  We must be somewhere in the
;; hierarchy.  Probably, GitLab CI shell puts us in
;; .../builds/<RUNNER>/0/idio/idio and gitlab-runner exec shell in
;; .../builds/0/project-0.

a-e-str := append-string IDIO-UTILS-BIN "/auto-exit"

if (x? a-e-str) {
  ; 1. execute as a symbol
  test ((string->symbol a-e-str) -E 0) #t

  ; 2. execute as a string
  test (a-e-str -E 0) #t
} {
  eprintf "x? %s in %s with\nIDIO-UTILS-BIN=%s\nPATH=%s: failed\n" a-e-str PWD IDIO-UTILS-BIN PATH
}

;; all done?
Tests? (command0 + 102)
