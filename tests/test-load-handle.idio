;;
;; Copyright (c) 2020-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-load-handle.idio
;;

; XXX see below
;module tests/load-handle

load-handle0 := Tests

expr := "printf \"test-load-handle: This is a safe expr for load-handle\\n\""

ish := open-input-string expr

load-handle ish

bad-expr := "printf \"test-load-handle: This is an invalid expr for load-handle: (an unterminated string)\n"

ish := open-input-string bad-expr

rval := (gensym)

set-default-handler! ^idio-error (function (c) {
				    eprintf "This is the test-load-handle default handler for ^idio-error returning gensym %s after a %s: '%s'\n" rval (struct-type-name (struct-instance-type c)) (idio-error-message c)
				    test 7 7
				    rval
})

r := load-handle ish

test r rval

clear-default-handler! ^idio-error

#*

XXX weird namespace feature

If we are not in the Idio module then any command in the following
cont-expr will be subject to each word being treated as a new symbol
-- and getting a warning about it.  See the code in
idio_vm_get_or_create_vvi().

It will, however, still get run -- as unknown symbols are thrown at
the execve() mechanisms.

So why is it OK (aka not warned about) in the Idio namespace?

*#
cont-expr := "(false)"

ish := open-input-string cont-expr

; running the command false will do two things: 1. generate a SIGCHLD
; 2. generate a ^rt-command-status-error (as "false" returned a
; non-zero exit status)
trap ^rt-signal-SIGCHLD (function (c) {
			   ;eprintf "test-load-handle trap: SIGCHLD\n"
			   test 8 8
			   raise c
}) {
  trap ^rt-command-status-error (function (c) {
				   ;eprintf "test load-handle trap: %s with %s\n" (idio-error-message c) (rt-command-status-error-status c)
				   test 9 9
  }) {
    ;printf "NOTICE: test-load-handle.idio: exec false; this will be picked up by test load-handle trap: pre\n"
    load-handle ish
    ;printf "NOTICE: test-load-handle.idio: exec false; this will be picked up by test load-handle trap: post\n"
  }
}

;; all done?
Tests? (load-handle0 + 4)
