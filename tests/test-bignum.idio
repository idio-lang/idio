;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-bignum.idio
;;

module tests/bignum

import job-control

bignum0 := Tests

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; regular tests
;;
;; The real concern, here, is that we're read the numbers in correctly
;; which means we want to test the various reader forms.  Although
;; getting the "sums" right is a bonus.

;; The obvious tests are positive and negative variants and 0.0.

;; The nominal reader forms are: 1.0 0.1 1e0 1e1 1e-1.

;; We also have the generic list-style function calls and the
;; "shortcut" binary operator style (for when the reader has spotted
;; (X + Y) and generates (binary-+ X Y)).  Ultimately they call
;; through to the same (fixnum/bignum) arithmetic/comparison code.
;;
;; We'll use the infix notation for the majority of the tests
;; because...because we can.  Throw in a few list-style calls to check
;; they identify one (or more) bignum arguments and promote them all
;; to bignum arguments.

;; The first/second variants cover the way arguments are processed.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; integer promotions
;;
;; These are implied by the rest of the tests passing but we should go
;; through the motions to identify promotion errors specifically in
;; case anyone "improves" the reader code and we're left scratching
;; our heads as to where the problem is.

test  1.0    1
test  1      1.0
test -1.0   -1
test -1     -1.0
test  1e1    10
test  10     1e1
test  10e-1  1
test  1      10e-1
test  0.0    0
test  0      0.0
test -0.0    0
test -0      0.0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; arithmetic

; "1.0" first
test (1.0  +  2.0)  3
test (1.0  + -2.0) -1
test (-1.0 +  2.0)  1
test (-1.0 + -2.0) -3
; "1.0" second
test (2.0  +  1.0)  3
test (2.0  + -1.0)  1
test (-2.0 +  1.0) -1
test (-2.0 + -1.0) -3
; with zero
test (1.0  +  0.0)  1
test (0.0  +  1.0)  1
; "0.1" first
test (0.1  +  1.0)  1.1
test (0.1  + -1.0) -0.9
test (-0.1 +  1.0)  0.9
test (-0.1 + -1.0) -1.1
; "0.1" second
test (1.0  +  0.1)  1.1
test (1.0  + -0.1)  0.9
test (-1.0 +  0.1) -0.9
test (-1.0 + -0.1) -1.1
; with zero
test (0.1  +  0.0)  0.1
test (0.0  +  0.1)  0.1
; "1e0" first
test (1e0  +  2.0)  3
test (1e0  + -2.0) -1
test (-1e0 +  2.0)  1
test (-1e0 + -2.0) -3
; "1e0" second
test (2.0  +  1e0)  3
test (2.0  + -1e0)  1
test (-2.0 +  1e0) -1
test (-2.0 + -1e0) -3
; with zero
test (1e0  +  0.0)  1
test (0.0  +  1e0)  1
; "1e+1" first
test (1e+1  +  2.0)  12
test (1e+1  + -2.0)  8
test (-1e+1 +  2.0) -8
test (-1e+1 + -2.0) -12
; "1e+1" second
test (2.0  +  1e+1)  12
test (2.0  + -1e+1) -8
test (-2.0 +  1e+1)  8
test (-2.0 + -1e+1) -12
; with zero
test (1e+1  +   0.0)  10
test (0.0   +  1e+1)  10
; "1e-1" first
test (1e-1  +  2.0)  2.1
test (1e-1  + -2.0) -1.9
test (-1e-1 +  2.0)  1.9
test (-1e-1 + -2.0) -2.1
; "1e-1" second
test (2.0  +  1e-1)  2.1
test (2.0  + -1e-1)  1.9
test (-2.0 +  1e-1) -1.9
test (-2.0 + -1e-1) -2.1
; with zero
test (1e-1  +   0.0)  0.1
test (0.0   +  1e-1)  0.1
; list form
test (+ 1.0 2 3  4)  10
test (+ 2 1.0 3  4)  10

; "1.0" first
test (1.0  -  2.0) -1
test (1.0  - -2.0)  3
test (-1.0 -  2.0) -3
test (-1.0 - -2.0)  1
; "1.0" second
test (2.0  -  1.0)  1
test (2.0  - -1.0)  3
test (-2.0 -  1.0) -3
test (-2.0 - -1.0) -1
; with zero
test (1.0  -  0.0)  1
test (0.0  -  1.0) -1
; "0.1" first
test (0.1  -  1.0) -0.9
test (0.1  - -1.0)  1.1
test (-0.1 -  1.0) -1.1
test (-0.1 - -1.0)  0.9
; "0.1" second
test (1.0  -  0.1)  0.9
test (1.0  - -0.1)  1.1
test (-1.0 -  0.1) -1.1
test (-1.0 - -0.1) -0.9
; with zero
test (0.1  -  0.0)  0.1
test (0.0  -  0.1) -0.1
; "1e0" first
test (1e0  -  2.0) -1
test (1e0  - -2.0)  3
test (-1e0 -  2.0) -3
test (-1e0 - -2.0)  1
; "1e0" second
test (2.0  -  1e0)  1
test (2.0  - -1e0)  3
test (-2.0 -  1e0) -3
test (-2.0 - -1e0) -1
; with zero
test (1e0  -  0.0)  1
test (0.0  -  1e0) -1
; "1e+1" first
test (1e+1  -  2.0)  8
test (1e+1  - -2.0)  12
test (-1e+1 -  2.0) -12
test (-1e+1 - -2.0) -8
; "1e+1" second
test (2.0  -  1e+1) -8
test (2.0  - -1e+1)  12
test (-2.0 -  1e+1) -12
test (-2.0 - -1e+1)  8
; with zero
test (1e+1  -   0.0)  10
test (0.0   -  1e+1) -10
; "1e-1" first
test (1e-1  -  2.0) -1.9
test (1e-1  - -2.0)  2.1
test (-1e-1 -  2.0) -2.1
test (-1e-1 - -2.0)  1.9
; "1e-1" second
test (2.0  -  1e-1)  1.9
test (2.0  - -1e-1)  2.1
test (-2.0 -  1e-1) -2.1
test (-2.0 - -1e-1) -1.9
; with zero
test (1e-1  -   0.0)  0.1
test (0.0   -  1e-1) -0.1
; list form
test (- 1.0 2 3  4) -8
test (- 2 1.0 3  4) -6

; "1.0" first
test (1.0  *  2.0)  2
test (1.0  * -2.0) -2
test (-1.0 *  2.0) -2
test (-1.0 * -2.0)  2
; "1.0" second
test (2.0  *  1.0)  2
test (2.0  * -1.0) -2
test (-2.0 *  1.0) -2
test (-2.0 * -1.0)  2
; with zero
test (1.0  *  0.0)  0
test (0.0  *  1.0)  0
; "0.1" first
test (0.1  *  1.0)  0.1
test (0.1  * -1.0) -0.1
test (-0.1 *  1.0) -0.1
test (-0.1 * -1.0)  0.1
; "0.1" second
test (1.0  *  0.1)  0.1
test (1.0  * -0.1) -0.1
test (-1.0 *  0.1) -0.1
test (-1.0 * -0.1)  0.1
; with zero
test (0.1  *  0.0)  0
test (0.0  *  0.1)  0
; "1e0" first
test (1e0  *  2.0)  2
test (1e0  * -2.0) -2
test (-1e0 *  2.0) -2
test (-1e0 * -2.0)  2
; "1e0" second
test (2.0  *  1e0)  2
test (2.0  * -1e0) -2
test (-2.0 *  1e0) -2
test (-2.0 * -1e0)  2
; with zero
test (1e0  *  0.0)  0
test (0.0  *  1e0)  0
; "1e+1" first
test (1e+1  *  2.0)  20
test (1e+1  * -2.0) -20
test (-1e+1 *  2.0) -20
test (-1e+1 * -2.0)  20
; "1e+1" second
test (2.0  *  1e+1)  20
test (2.0  * -1e+1) -20
test (-2.0 *  1e+1) -20
test (-2.0 * -1e+1)  20
; with zero
test (1e+1  *   0.0)  0
test (0.0   *  1e+1)  0
; "1e-1" first
test (1e-1  *  2.0)  0.2
test (1e-1  * -2.0) -0.2
test (-1e-1 *  2.0) -0.2
test (-1e-1 * -2.0)  0.2
; "1e-1" second
test (2.0  *  1e-1)  0.2
test (2.0  * -1e-1) -0.2
test (-2.0 *  1e-1) -0.2
test (-2.0 * -1e-1)  0.2
; with zero
test (1e-1  *   0.0)  0
test (0.0   *  1e-1)  0
; list form
test (* 1.0 2 3  4)  24
test (* 2 1.0 3  4)  24

;; the obvious divide-by-zero are handled elsewhere
; "1.0" first
test (1.0  /  2.0)  0.5
test (1.0  / -2.0) -0.5
test (-1.0 /  2.0) -0.5
test (-1.0 / -2.0)  0.5
; "1.0" second
test (2.0  /  1.0)  2
test (2.0  / -1.0) -2
test (-2.0 /  1.0) -2
test (-2.0 / -1.0)  2
; with zero
;test (1.0  /  0.0)  0
test (0.0  /  1.0)  0
; "0.1" first
test (0.1  /  1.0)  0.1
test (0.1  / -1.0) -0.1
test (-0.1 /  1.0) -0.1
test (-0.1 / -1.0)  0.1
; "0.1" second
test (1.0  /  0.1)  10
test (1.0  / -0.1) -10
test (-1.0 /  0.1) -10
test (-1.0 / -0.1)  10
; with zero
;test (0.1  /  0.0)  0
test (0.0  /  0.1)  0
; "1e0" first
test (1e0  /  2.0)  0.5
test (1e0  / -2.0) -0.5
test (-1e0 /  2.0) -0.5
test (-1e0 / -2.0)  0.5
; "1e0" second
test (2.0  /  1e0)  2
test (2.0  / -1e0) -2
test (-2.0 /  1e0) -2
test (-2.0 / -1e0)  2
; with zero
;test (1e0  /  0.0)  0
test (0.0  /  1e0)  0
; "1e+1" first
test (1e+1  /  2.0)  5
test (1e+1  / -2.0) -5
test (-1e+1 /  2.0) -5
test (-1e+1 / -2.0)  5
; "1e+1" second
test (2.0  /  1e+1)  0.2
test (2.0  / -1e+1) -0.2
test (-2.0 /  1e+1) -0.2
test (-2.0 / -1e+1)  0.2
; with zero
;test (1e+1  /   0.0)  0
test (0.0   /  1e+1)  0
; "1e-1" first
test (1e-1  /  2.0)  0.05
test (1e-1  / -2.0) -0.05
test (-1e-1 /  2.0) -0.05
test (-1e-1 / -2.0)  0.05
; "1e-1" second
test (2.0  /  1e-1)  20
test (2.0  / -1e-1) -20
test (-2.0 /  1e-1) -20
test (-2.0 / -1e-1)  20
; with zero
;test (1e-1  /   0.0)  0
test (0.0   /  1e-1)  0
; list form
test (/ 1.0 2 4)  0.125
test (/ 2 1.0 4)  0.5

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mathematical functions

test (floor  0.0)     0
test (floor  1.0)     1
test (floor  1.1)     1
test (floor  1.9)     1
test (floor -1.0)    -1
test (floor -1.1)    -2
test (floor -1.9)    -2
test (floor  1.2e3)   1200
test (floor -1.2e3)  -1200
test (floor  1.2e-3)  0
test (floor -1.2e-3) -1

test (quotient  1234.0  123)  10
test (quotient -1234.0  123) -10
test (quotient  1234.0 -123) -10
test (quotient -1234.0 -123)  10

test (quotient  123.0  1234)  0
test (quotient -123.0  1234)  0
test (quotient  123.0 -1234)  0
test (quotient -123.0 -1234)  0

test (quotient  123.0  123)  1
test (quotient -123.0  123) -1
test (quotient  123.0 -123) -1
test (quotient -123.0 -123)  1

test (remainder  1234.0  123)  4
test (remainder -1234.0  123) -4
test (remainder  1234.0 -123)  4
test (remainder -1234.0 -123) -4

test (remainder  123.0  1234)  123
test (remainder -123.0  1234) -123
test (remainder  123.0 -1234)  123
test (remainder -123.0 -1234) -123

test (remainder  123.0  123)  0
test (remainder -123.0  123)  0
test (remainder  123.0 -123)  0
test (remainder -123.0 -123)  0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; comparisions

; "1.0" first
test (1.0  lt  2.0) #t
test (1.0  lt -2.0) #f
test (-1.0 lt  2.0) #t
test (-1.0 lt -2.0) #f
; "1.0" second
test (2.0  lt  1.0) #f
test (2.0  lt -1.0) #f
test (-2.0 lt  1.0) #t
test (-2.0 lt -1.0) #t
; vs self
test (1.0  lt  1.0) #f
test (-1.0 lt -1.0) #f
; vs zero
test (1.0  lt  0.0) #f
test (0.0  lt  1.0) #t
; "0.1" first
test (0.1  lt  1.0) #t
test (0.1  lt -1.0) #f
test (-0.1 lt  1.0) #t
test (-0.1 lt -1.0) #f
; "0.1" second
test (1.0  lt  0.1) #f
test (1.0  lt -0.1) #f
test (-1.0 lt  0.1) #t
test (-1.0 lt -0.1) #t
; vs self
test (0.1  lt  0.1) #f
test (-0.1 lt -0.1) #f
; vs zero
test (0.1  lt  0.0) #f
test (0.0  lt  0.1) #t
; "1e0" first
test (1e0  lt  2.0) #t
test (1e0  lt -2.0) #f
test (-1e0 lt  2.0) #t
test (-1e0 lt -2.0) #f
; "1e0" second
test (2.0  lt  1e0) #f
test (2.0  lt -1e0) #f
test (-2.0 lt  1e0) #t
test (-2.0 lt -1e0) #t
; vs self
test (1e0  lt  1e0) #f
test (-1e0 lt -1e0) #f
; vs zero
test (1e0  lt  0.0) #f
test (0.0  lt  1e0) #t
; "1e+1" first
test (1e+1  lt  2.0) #f
test (1e+1  lt -2.0) #f
test (-1e+1 lt  2.0) #t
test (-1e+1 lt -2.0) #t
; "1e+1" second
test (2.0  lt  1e+1) #t
test (2.0  lt -1e+1) #f
test (-2.0 lt  1e+1) #t
test (-2.0 lt -1e+1) #f
; vs self
test (1e+1  lt  1e+1) #f
test (+1e+1 lt +1e+1) #f
; vs zero
test (1e+1  lt   0.0) #f
test (0.0   lt  1e+1) #t
; "1e-1" first
test (1e-1  lt  2.0) #t
test (1e-1  lt -2.0) #f
test (-1e-1 lt  2.0) #t
test (-1e-1 lt -2.0) #f
; "1e-1" second
test (2.0  lt  1e-1) #f
test (2.0  lt -1e-1) #f
test (-2.0 lt  1e-1) #t
test (-2.0 lt -1e-1) #t
; vs self
test (1e-1  lt  1e-1) #f
test (-1e-1 lt -1e-1) #f
; vs zero
test (1e-1  lt   0.0) #f
test (0.0   lt  1e-1) #t
; list form
test (lt 1.0 2 3  4) #t
test (lt 2 1.0 3  4) #f
test (lt 1.0 2 3 -4) #f

; "1.0" first
test (1.0  le  2.0) #t
test (1.0  le -2.0) #f
test (-1.0 le  2.0) #t
test (-1.0 le -2.0) #f
; "1.0" second
test (2.0  le  1.0) #f
test (2.0  le -1.0) #f
test (-2.0 le  1.0) #t
test (-2.0 le -1.0) #t
; vs self
test (1.0  le  1.0) #t
test (-1.0 le -1.0) #t
; vs zero
test (1.0  le  0.0) #f
test (0.0  le  1.0) #t
; "0.1" first
test (0.1  le  1.0) #t
test (0.1  le -1.0) #f
test (-0.1 le  1.0) #t
test (-0.1 le -1.0) #f
; "0.1" second
test (1.0  le  0.1) #f
test (1.0  le -0.1) #f
test (-1.0 le  0.1) #t
test (-1.0 le -0.1) #t
; vs self
test (0.1  le  0.1) #t
test (-0.1 le -0.1) #t
; vs zero
test (0.1  le  0.0) #f
test (0.0  le  0.1) #t
; "1e0" first
test (1e0  le  2.0) #t
test (1e0  le -2.0) #f
test (-1e0 le  2.0) #t
test (-1e0 le -2.0) #f
; "1e0" second
test (2.0  le  1e0) #f
test (2.0  le -1e0) #f
test (-2.0 le  1e0) #t
test (-2.0 le -1e0) #t
; vs self
test (1e0  le  1e0) #t
test (-1e0 le -1e0) #t
; vs zero
test (1e0  le  0.0) #f
test (0.0  le  1e0) #t
; "1e+1" first
test (1e+1  le  2.0) #f
test (1e+1  le -2.0) #f
test (-1e+1 le  2.0) #t
test (-1e+1 le -2.0) #t
; "1e+1" second
test (2.0  le  1e+1) #t
test (2.0  le -1e+1) #f
test (-2.0 le  1e+1) #t
test (-2.0 le -1e+1) #f
; vs self
test (1e+1  le  1e+1) #t
test (+1e+1 le +1e+1) #t
; vs zero
test (1e+1  le   0.0) #f
test (0.0   le  1e+1) #t
; "1e-1" first
test (1e-1  le  2.0) #t
test (1e-1  le -2.0) #f
test (-1e-1 le  2.0) #t
test (-1e-1 le -2.0) #f
; "1e-1" second
test (2.0  le  1e-1) #f
test (2.0  le -1e-1) #f
test (-2.0 le  1e-1) #t
test (-2.0 le -1e-1) #t
; vs self
test (1e-1  le  1e-1) #t
test (-1e-1 le -1e-1) #t
; vs zero
test (1e-1  le   0.0) #f
test (0.0   le  1e-1) #t
; list form
test (le 1.0 2 3  4) #t
test (le 2 1.0 3  4) #f
test (le 1.0 2 3 -4) #f

; "1.0" first
test (1.0  eq  2.0) #f
test (1.0  eq -2.0) #f
test (-1.0 eq  2.0) #f
test (-1.0 eq -2.0) #f
; "1.0" second
test (2.0  eq  1.0) #f
test (2.0  eq -1.0) #f
test (-2.0 eq  1.0) #f
test (-2.0 eq -1.0) #f
; vs self
test (1.0  eq  1.0) #t
test (-1.0 eq -1.0) #t
; vs zero
test (1.0  eq  0.0) #f
test (0.0  eq  1.0) #f
; "0.1" first
test (0.1  eq  1.0) #f
test (0.1  eq -1.0) #f
test (-0.1 eq  1.0) #f
test (-0.1 eq -1.0) #f
; "0.1" second
test (1.0  eq  0.1) #f
test (1.0  eq -0.1) #f
test (-1.0 eq  0.1) #f
test (-1.0 eq -0.1) #f
; vs self
test (0.1  eq  0.1) #t
test (-0.1 eq -0.1) #t
; vs zero
test (0.1  eq  0.0) #f
test (0.0  eq  0.1) #f
; "1e0" first
test (1e0  eq  2.0) #f
test (1e0  eq -2.0) #f
test (-1e0 eq  2.0) #f
test (-1e0 eq -2.0) #f
; "1e0" second
test (2.0  eq  1e0) #f
test (2.0  eq -1e0) #f
test (-2.0 eq  1e0) #f
test (-2.0 eq -1e0) #f
; vs self
test (1e0  eq  1e0) #t
test (-1e0 eq -1e0) #t
; vs zero
test (1e0  eq  0.0) #f
test (0.0  eq  1e0) #f
; "1e+1" first
test (1e+1  eq  2.0) #f
test (1e+1  eq -2.0) #f
test (-1e+1 eq  2.0) #f
test (-1e+1 eq -2.0) #f
; "1e+1" second
test (2.0  eq  1e+1) #f
test (2.0  eq -1e+1) #f
test (-2.0 eq  1e+1) #f
test (-2.0 eq -1e+1) #f
; vs self
test (1e+1  eq  1e+1) #t
test (+1e+1 eq +1e+1) #t
; vs zero
test (1e+1  eq   0.0) #f
test (0.0   eq  1e+1) #f
; "1e-1" first
test (1e-1  eq  2.0) #f
test (1e-1  eq -2.0) #f
test (-1e-1 eq  2.0) #f
test (-1e-1 eq -2.0) #f
; "1e-1" second
test (2.0  eq  1e-1) #f
test (2.0  eq -1e-1) #f
test (-2.0 eq  1e-1) #f
test (-2.0 eq -1e-1) #f
; vs self
test (1e-1  eq  1e-1) #t
test (-1e-1 eq -1e-1) #t
; vs zero
test (1e-1  eq   0.0) #f
test (0.0   eq  1e-1) #f
; list form
test (eq 1.0 2 3  4) #f
test (eq 2 1.0 3  4) #f
test (eq 1.0 2 3 -4) #f

; "1.0" first
test (1.0  ne  2.0) #t
test (1.0  ne -2.0) #t
test (-1.0 ne  2.0) #t
test (-1.0 ne -2.0) #t
; "1.0" second
test (2.0  ne  1.0) #t
test (2.0  ne -1.0) #t
test (-2.0 ne  1.0) #t
test (-2.0 ne -1.0) #t
; vs self
test (1.0  ne  1.0) #f
test (-1.0 ne -1.0) #f
; vs zero
test (1.0  ne  0.0) #t
test (0.0  ne  1.0) #t
; "0.1" first
test (0.1  ne  1.0) #t
test (0.1  ne -1.0) #t
test (-0.1 ne  1.0) #t
test (-0.1 ne -1.0) #t
; "0.1" second
test (1.0  ne  0.1) #t
test (1.0  ne -0.1) #t
test (-1.0 ne  0.1) #t
test (-1.0 ne -0.1) #t
; vs self
test (0.1  ne  0.1) #f
test (-0.1 ne -0.1) #f
; vs zero
test (0.1  ne  0.0) #t
test (0.0  ne  0.1) #t
; "1e0" first
test (1e0  ne  2.0) #t
test (1e0  ne -2.0) #t
test (-1e0 ne  2.0) #t
test (-1e0 ne -2.0) #t
; "1e0" second
test (2.0  ne  1e0) #t
test (2.0  ne -1e0) #t
test (-2.0 ne  1e0) #t
test (-2.0 ne -1e0) #t
; vs self
test (1e0  ne  1e0) #f
test (-1e0 ne -1e0) #f
; vs zero
test (1e0  ne  0.0) #t
test (0.0  ne  1e0) #t
; "1e+1" first
test (1e+1  ne  2.0) #t
test (1e+1  ne -2.0) #t
test (-1e+1 ne  2.0) #t
test (-1e+1 ne -2.0) #t
; "1e+1" second
test (2.0  ne  1e+1) #t
test (2.0  ne -1e+1) #t
test (-2.0 ne  1e+1) #t
test (-2.0 ne -1e+1) #t
; vs self
test (1e+1  ne  1e+1) #f
test (+1e+1 ne +1e+1) #f
; vs zero
test (1e+1  ne   0.0) #t
test (0.0   ne  1e+1) #t
; "1e-1" first
test (1e-1  ne  2.0) #t
test (1e-1  ne -2.0) #t
test (-1e-1 ne  2.0) #t
test (-1e-1 ne -2.0) #t
; "1e-1" second
test (2.0  ne  1e-1) #t
test (2.0  ne -1e-1) #t
test (-2.0 ne  1e-1) #t
test (-2.0 ne -1e-1) #t
; vs self
test (1e-1  ne  1e-1) #f
test (-1e-1 ne -1e-1) #f
; vs zero
test (1e-1  ne   0.0) #t
test (0.0   ne  1e-1) #t
; list form
test (ne 1.0 2 3  4) #t
test (ne 2 1.0 3  4) #t
test (ne 1.0 2 3 -4) #t

; "1.0" first
test (1.0  ge  2.0) #f
test (1.0  ge -2.0) #t
test (-1.0 ge  2.0) #f
test (-1.0 ge -2.0) #t
; "1.0" second
test (2.0  ge  1.0) #t
test (2.0  ge -1.0) #t
test (-2.0 ge  1.0) #f
test (-2.0 ge -1.0) #f
; vs self
test (1.0  ge  1.0) #t
test (-1.0 ge -1.0) #t
; vs zero
test (1.0  ge  0.0) #t
test (0.0  ge  1.0) #f
; "0.1" first
test (0.1  ge  1.0) #f
test (0.1  ge -1.0) #t
test (-0.1 ge  1.0) #f
test (-0.1 ge -1.0) #t
; "0.1" second
test (1.0  ge  0.1) #t
test (1.0  ge -0.1) #t
test (-1.0 ge  0.1) #f
test (-1.0 ge -0.1) #f
; vs self
test (0.1  ge  0.1) #t
test (-0.1 ge -0.1) #t
; vs zero
test (0.1  ge  0.0) #t
test (0.0  ge  0.1) #f
; "1e0" first
test (1e0  ge  2.0) #f
test (1e0  ge -2.0) #t
test (-1e0 ge  2.0) #f
test (-1e0 ge -2.0) #t
; "1e0" second
test (2.0  ge  1e0) #t
test (2.0  ge -1e0) #t
test (-2.0 ge  1e0) #f
test (-2.0 ge -1e0) #f
; vs self
test (1e0  ge  1e0) #t
test (-1e0 ge -1e0) #t
; vs zero
test (1e0  ge  0.0) #t
test (0.0  ge  1e0) #f
; "1e+1" first
test (1e+1  ge  2.0) #t
test (1e+1  ge -2.0) #t
test (-1e+1 ge  2.0) #f
test (-1e+1 ge -2.0) #f
; "1e+1" second
test (2.0  ge  1e+1) #f
test (2.0  ge -1e+1) #t
test (-2.0 ge  1e+1) #f
test (-2.0 ge -1e+1) #t
; vs self
test (1e+1  ge  1e+1) #t
test (+1e+1 ge +1e+1) #t
; vs zero
test (1e+1  ge   0.0) #t
test (0.0   ge  1e+1) #f
; "1e-1" first
test (1e-1  ge  2.0) #f
test (1e-1  ge -2.0) #t
test (-1e-1 ge  2.0) #f
test (-1e-1 ge -2.0) #t
; "1e-1" second
test (2.0  ge  1e-1) #t
test (2.0  ge -1e-1) #t
test (-2.0 ge  1e-1) #f
test (-2.0 ge -1e-1) #f
; vs self
test (1e-1  ge  1e-1) #t
test (-1e-1 ge -1e-1) #t
; vs zero
test (1e-1  ge   0.0) #t
test (0.0   ge  1e-1) #f
; list form
test (ge 1.0 2 3  4) #f
test (ge 2 1.0 3  4) #f
test (ge 1.0 2 3 -4) #f

; "1.0" first
test (1.0  gt  2.0) #f
test (1.0  gt -2.0) #t
test (-1.0 gt  2.0) #f
test (-1.0 gt -2.0) #t
; "1.0" second
test (2.0  gt  1.0) #t
test (2.0  gt -1.0) #t
test (-2.0 gt  1.0) #f
test (-2.0 gt -1.0) #f
; vs self
test (1.0  gt  1.0) #f
test (-1.0 gt -1.0) #f
; vs zero
test (1.0  gt  0.0) #t
test (0.0  gt  1.0) #f
; "0.1" first
test (0.1  gt  1.0) #f
test (0.1  gt -1.0) #t
test (-0.1 gt  1.0) #f
test (-0.1 gt -1.0) #t
; "0.1" second
test (1.0  gt  0.1) #t
test (1.0  gt -0.1) #t
test (-1.0 gt  0.1) #f
test (-1.0 gt -0.1) #f
; vs self
test (0.1  gt  0.1) #f
test (-0.1 gt -0.1) #f
; vs zero
test (0.1  gt  0.0) #t
test (0.0  gt  0.1) #f
; "1e0" first
test (1e0  gt  2.0) #f
test (1e0  gt -2.0) #t
test (-1e0 gt  2.0) #f
test (-1e0 gt -2.0) #t
; "1e0" second
test (2.0  gt  1e0) #t
test (2.0  gt -1e0) #t
test (-2.0 gt  1e0) #f
test (-2.0 gt -1e0) #f
; vs self
test (1e0  gt  1e0) #f
test (-1e0 gt -1e0) #f
; vs zero
test (1e0  gt  0.0) #t
test (0.0  gt  1e0) #f
; "1e+1" first
test (1e+1  gt  2.0) #t
test (1e+1  gt -2.0) #t
test (-1e+1 gt  2.0) #f
test (-1e+1 gt -2.0) #f
; "1e+1" second
test (2.0  gt  1e+1) #f
test (2.0  gt -1e+1) #t
test (-2.0 gt  1e+1) #f
test (-2.0 gt -1e+1) #t
; vs self
test (1e+1  gt  1e+1) #f
test (+1e+1 gt +1e+1) #f
; vs zero
test (1e+1  gt   0.0) #t
test (0.0   gt  1e+1) #f
; "1e-1" first
test (1e-1  gt  2.0) #f
test (1e-1  gt -2.0) #t
test (-1e-1 gt  2.0) #f
test (-1e-1 gt -2.0) #t
; "1e-1" second
test (2.0  gt  1e-1) #t
test (2.0  gt -1e-1) #t
test (-2.0 gt  1e-1) #f
test (-2.0 gt -1e-1) #f
; vs self
test (1e-1  gt  1e-1) #f
test (-1e-1 gt -1e-1) #f
; vs zero
test (1e-1  gt   0.0) #t
test (0.0   gt  1e-1) #f
; list form
test (gt 1.0 2 3  4) #f
test (gt 2 1.0 3  4) #f
test (gt 1.0 2 3 -4) #f

; a handly exact integer number
ein := FIXNUM-MAX + 1

test (bignum? 0)			#f ; FIXNUM
test (bignum? #t)			#f ; CONSTANT
test (bignum? #\a)			#f ; UNICODE
test (bignum? "a")			#f ; STRING
test (bignum? 'a)			#f ; SYMBOL
test (bignum? :a)			#f ; KEYWORD
test (bignum? (pair 1 2))		#f ; PAIR
test (bignum? #[])			#f ; ARRAY
test (bignum? #{})			#f ; HASH
test (bignum? (function #n #n))		#f ; CLOSURE
test (bignum? pair)			#f ; PRIMITIVE
test (bignum? 1.0)			#t ; BIGNUM
test (bignum? (find-module 'Idio))	#f ; MODULE
test (bignum? (current-input-handle))	#f ; HANDLE
test (bignum? ^error)			#f ; STRUCT_TYPE
test (bignum? char-set:letter)		#f ; STRUCT_INSTANCE
test (bignum? #B{ 3 })			#f ; BITSET
test (bignum? libc/INT_MAX)		#f ; C_INT
test (bignum? libc/UINT_MAX)		#f ; C_UINT
test (bignum? <class>)			#f ; instance

#*

Do we need to invoke real?, exact? and inexact? on all the reader
types like bignum? above?

real? calls bignum? before asserting a "real" flag

exact? specifically allows fixnums plus exact bignums

inexact? specifically disallows fixnums plus inexact bignums

So, no, as they all use the bignum? test.

These remaining test are looking at reader formats for numbers -- the
various ways we can convince the reader to generate a number.

*#

test (bignum?  0.1)	#t
test (bignum?  1e0)	#t
test (bignum?  1e1)	#t
test (bignum?  1e-1)	#t
test (bignum?  0.0)	#t
test (bignum? +0.0)	#t
test (bignum? -0.0)	#t
test (bignum?  1)	#f
test (bignum? +1)	#f
test (bignum? -1)	#f
test (bignum? ein)	#t

test (real? 1.0)	#t
test (real? 0.1)	#t
test (real? 1e0)	#t
test (real? 1e1)	#t
test (real? 1e-1)	#t
test (real? 0.0)	#t
test (real? 1)		#f
test (real? 0)		#f
test (real? ein)	#f

test (exact? 0)		#t
test (exact? ein)	#t
test (exact? 1.0)	#t
test (exact? 0.1)	#t
test (exact? 1e0)	#t
test (exact? 1e1)	#t
test (exact? 1e-1)	#t
test (exact? #e0)	#t
test (exact? #e-0)	#t
test (exact? #e0.0)	#t
test (exact? #e-0.0)	#t
test (exact? #e1)	#t
test (exact? #e-1)	#t
test (exact? #e1.0)	#t
test (exact? #e-1.0)	#t
test (exact? #e0.1)	#t
test (exact? #e-0.1)	#t
test (exact? #e1e0)	#t
test (exact? #e-1e0)	#t
test (exact? #e1e+1)	#t
test (exact? #e-1e+1)	#t
test (exact? #e1e-1)	#t
test (exact? #e-1e-1)	#t
test (exact? #i0)	#f
test (exact? #i-0)	#f
test (exact? #i0.0)	#f
test (exact? #i-0.0)	#f
test (exact? #i1)	#f
test (exact? #i-1)	#f
test (exact? #i1.0)	#f
test (exact? #i-1.0)	#f
test (exact? #i0.1)	#f
test (exact? #i-0.1)	#f
test (exact? #i1e0)	#f
test (exact? #i-1e0)	#f
test (exact? #i1e+1)	#f
test (exact? #i-1e+1)	#f
test (exact? #i1e-1)	#f
test (exact? #i-1e-1)	#f

test (exact->inexact 0)		#i0
test (exact->inexact 1.0)	#i1
test (exact->inexact 0.1)	#i0.1
test (exact->inexact 1e0)	#i1
test (exact->inexact 1e1)	#i10
test (exact->inexact 1e-1)	#i0.1
test (exact->inexact #e0)	#i0
test (exact->inexact #e-0)	#i0
test (exact->inexact #e0.0)	#i0
test (exact->inexact #e-0.0)	#i0
test (exact->inexact #e1)	#i1
test (exact->inexact #e-1)	#i-1
test (exact->inexact #e1.0)	#i1
test (exact->inexact #e-1.0)	#i-1
test (exact->inexact #e0.1)	#i0.1
test (exact->inexact #e-0.1)	#i-0.1
test (exact->inexact #e1e0)	#i1
test (exact->inexact #e-1e0)	#i-1
test (exact->inexact #e1e+1)	#i10
test (exact->inexact #e-1e+1)	#i-10
test (exact->inexact #e1e-1)	#i0.1
test (exact->inexact #e-1e-1)	#i-0.1

test (inexact? 0)	#f
test (inexact? ein)	#f
test (inexact? 1.0)	#f
test (inexact? 0.1)	#f
test (inexact? 1e0)	#f
test (inexact? 1e1)	#f
test (inexact? 1e-1)	#f
test (inexact? #e0)	#f
test (inexact? #e-0)	#f
test (inexact? #e0.0)	#f
test (inexact? #e-0.0)	#f
test (inexact? #e1)	#f
test (inexact? #e-1)	#f
test (inexact? #e1.0)	#f
test (inexact? #e-1.0)	#f
test (inexact? #e0.1)	#f
test (inexact? #e-0.1)	#f
test (inexact? #e1e0)	#f
test (inexact? #e-1e0)	#f
test (inexact? #e1e+1)	#f
test (inexact? #e-1e+1) #f
test (inexact? #e1e-1)	#f
test (inexact? #e-1e-1) #f
test (inexact? #i0)	#t
test (inexact? #i-0)	#t
test (inexact? #i0.0)	#t
test (inexact? #i-0.0)	#t
test (inexact? #i1)	#t
test (inexact? #i-1)	#t
test (inexact? #i1.0)	#t
test (inexact? #i-1.0)	#t
test (inexact? #i0.1)	#t
test (inexact? #i-0.1)	#t
test (inexact? #i1e0)	#t
test (inexact? #i-1e0)	#t
test (inexact? #i1e+1)	#t
test (inexact? #i-1e+1) #t
test (inexact? #i1e-1)	#t
test (inexact? #i-1e-1) #t

test (inexact->exact #i0)      0
test (inexact->exact #i-0)     0
test (inexact->exact #i0.0)    0
test (inexact->exact #i-0.0)   0
test (inexact->exact #i1)      1
test (inexact->exact #i-1)    -1
test (inexact->exact #i1.0)    1
test (inexact->exact #i-1.0)  -1
test (inexact->exact #i0.1)    0.1
test (inexact->exact #i-0.1)  -0.1
test (inexact->exact #i1e0)    1
test (inexact->exact #i-1e0)  -1
test (inexact->exact #i1e+1)   10
test (inexact->exact #i-1e+1) -10
test (inexact->exact #i1e-1)   0.1
test (inexact->exact #i-1e-1) -0.1

test (mantissa  1)       1
test (mantissa  ein)     ein
test (mantissa  1.2)     12
test (mantissa -1.2)    -12
test (mantissa  1.2e3)   12
test (mantissa -1.2e3)  -12
test (mantissa  1.2e-3)  12
test (mantissa -1.2e-3) -12

test (exponent  ein)     0
test (exponent  1.2)    -1
test (exponent -1.2)    -1
test (exponent  1.2e3)   2
test (exponent -1.2e3)   2
test (exponent  1.2e-3) -4
test (exponent -1.2e-3) -4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; coverage tests

;; FIXNUM-MAX * 2 is enough to generate two segments on a 32-bit
;; machine.  FIXNUM-MAX was enough for two segments on a 64-bit
;; machine on its own

bn := FIXNUM-MAX * 2

;; Technically, the bignum-dump calls are for code coverage -- and
;; print direct to stderr anyway!
with-error-to #n (function () {
		    bignum-dump bn
		    bignum-dump 1.0
		    bignum-dump -1.0
		    bignum-dump #i1.0
})

;; Another bit of code coverage: construct a bignum from a C unsigned
;; int -- it must be bigger than FIXNUM-MAX (otherwise we'll get a
;; fixnum) but we want it to be big enough to trigger multiple
;; segments (although that's not happening on 64-bit at least)
C-uinteger := C/integer->unsigned bn 'ulong
b := C/->integer C-uinteger

test (equal? b bn) #t

;; 
test (- -1.0 -1.0)            0.0
test (exact->inexact #e1.2) #i1.2
test (inexact->exact #i1.2) #e1.2
test (- 0.0 1.1)             -1.1

; Code coverage: we need large integers
2fnm := 2 * FIXNUM-MAX
3fnm := 3 * FIXNUM-MAX

test (lt 0.0 1.1)       #t
test (lt 2fnm 3fnm)     #t
test (lt 2fnm (- 2fnm)) #f
test (lt (- 2fnm) 2fnm) #t

test (lt 2fnm 3.0)      #f
test (lt 3.0 2fnm)      #t
test (lt (- 2fnm) 3.0)  #t
test (lt 3.0 (- 2fnm))  #f
test (lt 2fnm 0.0)      #f
test (lt 0.0 2fnm)      #t

(cond-expand
 (sizeof/pointer/32 {
   ;; 32-bit systems use two 9-digit segments.  2fnm, 1073741822, at
   ;; 10 digits is using less than two segments worth of significant
   ;; digits so there is no normalisation

   test (+ 3.0 2fnm) 1.073741825e+9
 })
 (else {
   ;; 64-bit systems use one 18-digit segment.  2fnm,
   ;; 4611686018427387902, at 19 digits is using more than one
   ;; segments worth of significant digits so the result is normalised

   test (+ 3.0 2fnm) 4.6116860184273879e+18
 })
)

test (* 0.0 1) 0
test (* 1.0 2fnm) 2fnm

test (/ 0.0 1) 0

with-output-to #n (function () {
		     printf "%.3d" 2fnm
		     printf "%.40d" 2fnm

		     printf "%s" pi
		     printf "%d" pi
		     printf "%e" (- pi)
})

test +123456789012345678 123456789012345678
test +0.0 0

;; all done?
Tests? (bignum0 + 820)
