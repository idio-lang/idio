;;
;; Copyright (c) 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-bignum-error.idio
;;

bignum-error0 := Tests

#*

We have a bunch of test cases which should provoke a ^rt-bignum-error,
^rt-number-error or ^rt-parameter-type-error.  So we can write a load
function which will wrapper the actual load with a trap
for (^rt-bignum-error ...) and compare the message strings.

*#

bignum-error-load := {
  n := 0

  function (filename msg) {
    if (not (string? filename)) (error 'load "not a string" filename)

    n = n + 1

    exp-tests := 1

    ;eprintf "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-bignum-error
	  ^rt-number-error
	  ^rt-parameter-type-error) (function (c) {
				       ;eprintf "bignum-error #%s: %s %s\n" n msg (idio-error-location c)
				       test (idio-error-message c) msg

				       if (not (string=? (idio-error-message c) msg)) {
					 condition-report (append-string "bignum-error-load: " filename) c (current-error-handle)
				       }
				       
				       trap-return 'bignum-error
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "bignum-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
	  }
  }
}

bignum-error-load "bignum-errors/divide-float-zero.idio" "bignum divide by zero"

;; XXX If we mess with idio-print-conversion-format then we need to
;; restore it as soon as possible
;;
;; Several other conversions will occur before we can restore
;; idio-print-conversion-format so this test is deliberately commented
;; out.
orig-ipcf := idio-print-conversion-format
;bignum-error-load "bignum-errors/real-format-type.idio" "bad parameter type: 'foo' a symbol is not a unicode"
idio-print-conversion-format = orig-ipcf

bignum-error-load "bignum-errors/add-non-bignum.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/subtract-non-bignum.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/multiply-non-bignum.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/divide-float-zero.idio" "bignum divide by zero"

bignum-error-load "bignum-errors/bignum-normalise-digits-overflow.idio" "exponent overflow"
bignum-error-load "bignum-errors/bignum-normalise-overflow.idio" "exponent overflow"
bignum-error-load "bignum-errors/bignum-multiply-underflow.idio" "exponent underflow"
bignum-error-load "bignum-errors/bignum-multiply-overflow.idio" "exponent overflow"
bignum-error-load "bignum-errors/bignum-divide-digits-underflow.idio" "exponent underflow"
bignum-error-load "bignum-errors/bignum-divide-underflow.idio" "exponent underflow"
bignum-error-load "bignum-errors/bignum-divide-overflow.idio" "exponent overflow"
bignum-error-load "bignum-errors/read-bignum-underflow.idio" "exponent underflow"
bignum-error-load "bignum-errors/read-bignum-overflow.idio" "exponent overflow"

bignum-error-load "bignum-errors/lt-non-bignum.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/le-non-bignum.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/eq-non-bignum.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/ge-non-bignum.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/gt-non-bignum.idio" "bad parameter type: '#t' a constant is not a bignum"

bignum-error-load "bignum-errors/exact-bad-type.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/inexact-bad-type.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/inexact2exact-bad-type.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/exact2inexact-bad-type.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/mantissa-bad-type.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/exponent-bad-type.idio" "bad parameter type: '#t' a constant is not a bignum"
bignum-error-load "bignum-errors/bignum-dump-bad-type.idio" "bad parameter type: '#t' a constant is not a bignum"

;; all done?
Tests? (bignum-error0 + 26)
