;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-fixnum.idio
;;

module tests/fixnum

fixnum0 := Tests

test (fixnum? 0)			#t ; FIXNUM
test (fixnum? #t)			#f ; CONSTANT
test (fixnum? #\a)			#f ; UNICODE
test (fixnum? "a")			#f ; STRING
test (fixnum? 'a)			#f ; SYMBOL
test (fixnum? :a)			#f ; KEYWORD
test (fixnum? (pair 1 2))		#f ; PAIR
test (fixnum? #[])			#f ; ARRAY
test (fixnum? #{})			#f ; HASH
test (fixnum? (function #n #n))		#f ; CLOSURE
test (fixnum? pair)			#f ; PRIMITIVE
test (fixnum? 1.0)			#f ; BIGNUM
test (fixnum? (find-module 'Idio))	#f ; MODULE
test (fixnum? (current-input-handle))	#f ; HANDLE
test (fixnum? ^error)			#f ; STRUCT_TYPE
test (fixnum? char-set:letter)		#f ; STRUCT_INSTANCE
test (fixnum? #B{ 3 })			#f ; BITSET
test (fixnum? libc/INT_MAX)		#f ; C_INT
test (fixnum? libc/UINT_MAX)		#f ; C_UINT
test (fixnum? <class>)			#f ; instance

#*

Do we need to invoke integer? and number? on all the reader types like
fixnum? above?

integer? calls fixnum? or bignum? plus asserting an "integer" flag

number? calls fixnum? or bignum?

So, no, as they all use the fixnum? and bignum? tests which do test
against other types as above.

These remaining test include looking at reader formats for fixnums --
the various ways we can convince the reader to generate a number.

*#

test (fixnum? +0)			#t
test (fixnum? -0)			#t
test (fixnum? +1)			#t
test (fixnum? -1)			#t
test (fixnum? FIXNUM-MAX)		#t
test (fixnum? (FIXNUM-MAX + 1))		#f
test (fixnum? FIXNUM-MIN)		#t
test (fixnum? (FIXNUM-MIN - 1))		#f

test (fixnum? ((FIXNUM-MAX + 1) - 1))	#t
test (fixnum? ((FIXNUM-MIN - 1) + 1))	#t

test (fixnum? (unicode/unicode->integer #\a))   #t

;; things that failed the fixnum? test are still integers
test (integer? 1.0)			#t ; integer bignum
test (integer? (FIXNUM-MAX + 1))	#t ; integer bignum
test (integer? (FIXNUM-MIN - 1))	#t ; integer bignum

;; things that failed the fixnum? test are still numbers
test (number? 1.0)			#t ; bignum
test (number? 1.1)			#t ; bignum
test (number? (FIXNUM-MAX + 1))		#t ; bignum
test (number? ((FIXNUM-MAX + 1) - 1))	#t ; bignum
test (number? (FIXNUM-MIN - 1))		#t ; bignum
test (number? ((FIXNUM-MIN - 1) + 1))	#t ; bignum

;; arithmetic addition
;; "1"
test ( 1  +  0)  1
test ( 1  +  2)  3
test ( 1  + -1)  0
test ( 0  +  1)  1
test ( 2  +  1)  3
test (-1  +  1)  0

;; "-1"
test (-1  +  0) -1
test (-1  +  2)  1
test (-1  + -1) -2
test ( 0  + -1) -1
test ( 2  + -1)  1
test (-1  + -1) -2

;; limits
test (FIXNUM-MAX + FIXNUM-MIN) -1
test (FIXNUM-MIN + FIXNUM-MAX) -1

;; list form
test (+)           0
test (+  1)        1
test (+ -1)       -1
test (+  1  0)     1
test (+  1  2)     3
test (+  1  2)     3
test (+  1  2  3)  6
test (+  1 -1)     0
;; list form interim calculation -> bignum promotion code coverage
test (+ FIXNUM-MAX 1 1) (FIXNUM-MAX + 2)

;; arithmetic subtraction
;; "1"
test ( 1  -  0)  1
test ( 1  -  2) -1
test ( 1  - -1)  2
test ( 0  -  1) -1
test ( 2  -  1)  1
test (-1  -  1) -2

;; "-1"
test (-1  -  0) -1
test (-1  -  2) -3
test (-1  - -1)  0
test ( 0  - -1)  1
test ( 2  - -1)  3
test (-1  - -1)  0

;; limits
test (FIXNUM-MAX - FIXNUM-MAX)      0
test (FIXNUM-MAX - (- FIXNUM-MIN)) -1

;; list form
test (-  1)       -1
test (- -1)        1
test (-  1  0)     1
test (-  1  2)    -1
test (-  1  2  3) -4
test (-  1 -1)     2
;; list form interim calculation -> bignum promotion code coverage
test (- FIXNUM-MIN 1 1) (FIXNUM-MIN - 2)

;; arithmetic multiplication
;; "1"
test ( 1  *  0)  0
test ( 1  *  2)  2
test ( 1  * -1) -1
test ( 0  *  1)  0
test ( 2  *  1)  2
test (-1  *  1) -1

;; "-1"
test (-1  *  0)  0
test (-1  *  2) -2
test (-1  * -1)  1
test ( 0  * -1)  0
test ( 2  * -1) -2
test (-1  * -1)  1

;; limits
test (FIXNUM-MAX * 1) FIXNUM-MAX
test (FIXNUM-MIN * 1) FIXNUM-MIN
;; list form interim calculation -> bignum promotion code coverage
test (* FIXNUM-MAX FIXNUM-MAX FIXNUM-MAX) (expt FIXNUM-MAX 3)

;; list form
test (*)           1
test (*  1)        1
test (* -1)       -1
test (*  1  0)     0
test (*  1  2)     2
test (*  1  2  3)  6
test (*  1 -1)    -1
;; list form interim calculation -> bignum promotion code coverage
test (* FIXNUM-MAX 2 2) (FIXNUM-MAX * 4)

;; comparisons
define-template (cmp-test op & results) {
  #T{
    test ($op 1 1) $(nth results 1)
    test ($op 1 0) $(nth results 2)
    test ($op 1 -1) $(nth results 3)

    test ($op 0 1) $(nth results 4)
    test ($op 0 0) $(nth results 5)
    test ($op 0 -1) $(nth results 6)

    test ($op -1 1) $(nth results 7)
    test ($op -1 0) $(nth results 8)
    test ($op -1 -1) $(nth results 9)
  }
}

cmp-test \lt #f #f #f #t #f #f #t #t #f
cmp-test \le #t #f #f #t #t #f #t #t #t
cmp-test \eq #t #f #f #f #t #f #f #f #t
cmp-test \ne #f #t #t #t #f #t #t #t #f
cmp-test \ge #t #t #t #f #t #t #f #f #t
cmp-test \gt #f #t #t #f #f #t #f #f #f

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mathematical functions

;; floor is the identity function for fixnums
test (floor  1)  1
test (floor  0)  0
test (floor -1) -1

test (remainder  0  2)  0
test (remainder  0 -2)  0

test (remainder  2  2)  0
test (remainder  2  3)  2
test (remainder  2  1)  0
test (remainder -2  2)  0
test (remainder -2  3) -2
test (remainder -2  1)  0

test (remainder  2 -2)  0
test (remainder  2 -3)  2
test (remainder  2 -1)  0
test (remainder -2 -2)  0
test (remainder -2 -3) -2
test (remainder -2 -1)  0

test (remainder  4  2)  0
test (remainder  4  3)  1
test (remainder  4  1)  0
test (remainder -4  2)  0
test (remainder -4  3) -1
test (remainder -4  1)  0

test (remainder  4 -2)  0
test (remainder  4 -3)  1
test (remainder  4 -1)  0
test (remainder -4 -2)  0
test (remainder -4 -3) -1
test (remainder -4 -1)  0

;; code coverage mixed args promotion to bignum
test (remainder  1 2.0)   1
test (remainder  2.0 1)   0
test (remainder  2.0 1.0) 0

test (quotient  1234  123)  10
test (quotient -1234  123) -10
test (quotient  1234 -123) -10
test (quotient -1234 -123)  10

test (quotient  123  1234)  0
test (quotient -123  1234)  0
test (quotient  123 -1234)  0
test (quotient -123 -1234)  0

test (quotient  123  123)  1
test (quotient -123  123) -1
test (quotient  123 -123) -1
test (quotient -123 -123)  1

;; code coverage mixed args promotion to bignum
test (quotient  1 2.0)   0
test (quotient  2.0 1)   2
test (quotient  2.0 1.0) 2

;; all done?
Tests? (fixnum0 + 208)
