;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-posix-regex-error.idio
;;

module tests/posix-regex

posix-regex-error0 := Tests

#*

We have a bunch of test cases which should provoke a ^rt-regex-error
or ^rt-parameter-error.  So we can write a load function which will
wrapper the actual load with a trap for (^rt-regex-error
^rt-parameter-error) and compare the message strings.

*#

posix-regex-error-load := {
  n := 0

  function (filename msg) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "string" filename)

    n = n + 1

    exp-tests := 1

    ;eprintf "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-regex-error
	  ^rt-parameter-error) (function (c) {
	    ;eprintf "posix-regex-error #%s: %s %s\n" n msg (idio-error-location c)
	    test (idio-error-message c) msg

	    if (not (string=? (idio-error-message c) msg)) {
	      condition-report (append-string "posix-regex-error-load: " filename) c (current-error-handle)
	    }

	    trap-return 'posix-regex-error
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "posix-regex-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
    }
  }
}

posix-regex-error-load "posix-regex-errors/regcomp-bad-rx-type.idio" "bad parameter type: '#t' a constant is not a string"
posix-regex-error-load "posix-regex-errors/regcomp-bad-flag.idio" "regcomp flag='REG_PCRE': unexpected flag"
posix-regex-error-load "posix-regex-errors/regcomp-bad-flag-type.idio" "bad parameter type: '#t' a constant is not a symbol"
(cond-expand
 ((or "uname/sysname/SunOS"
      "uname/sysname/FreeBSD"
      "uname/sysname/OpenBSD"
      "uname/sysname/NetBSD"
      "uname/sysname/Darwin") {
   posix-regex-error-load "posix-regex-errors/regcomp-bad-pattern.idio" "regcomp failure: repetition-operator operand invalid"
 })
 (else {
   posix-regex-error-load "posix-regex-errors/regcomp-bad-pattern.idio" "regcomp failure: Invalid preceding regular expression"
 }))

posix-regex-error-load "posix-regex-errors/regexec-bad-rx-type.idio" "bad parameter type: '#t' a constant is not a C/pointer"
posix-regex-error-load "posix-regex-errors/regexec-bad-str-type.idio" "bad parameter type: '#t' a constant is not a string"
posix-regex-error-load "posix-regex-errors/regexec-bad-flag.idio" "regexec flag='REG_BOTH': unexpected flag"
posix-regex-error-load "posix-regex-errors/regexec-bad-flag-type.idio" "bad parameter type: '#t' a constant is not a symbol"

;; all done?
Tests? (posix-regex-error0 + 8)
