;;
;; Copyright (c) 2020-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-SRFI-89.idio
;;

; These are the examples from
; https://srfi.schemers.org/srfi-89/srfi-89.html

SRFI-89-0 := Tests

define* (f a (b #f)) (list a b)

test (f 1) '(1 #f)
test (f 1 2) '(1 2)
test/error (f 1 2 3) 'SRFI-89-error "expand (3) rest-binding: too many actual parameters"

define* (g a (b a) (:key k (* a b))) (list a b k)

test (g 3) '(3 3 9)
test (g 3 4) '(3 4 12)
test/error (g 3 4 :key) 'SRFI-89-error "&process-keys a value was expected after keyword (:key)"
test (g 3 4 :key 5) '(3 4 5)
test/error (g 3 4 :zoo 5) 'SRFI-89-error "&process-keys :zoo unknown parameter keyword"
test/error (g 3 4 :key 5 :key 6) 'SRFI-89-error "&process-keys :key duplicate parameter"

define* (h1 a (:key k #f) & r) (list a k r)

test (h1 7) '(7 #f ())
test (h1 7 8 9 10) '(7 #f (8 9 10))
test (h1 7 :key 8 9 10) '(7 8 (9 10))
test/error (h1 7 :key 8 :zoo 9) 'SRFI-89-error "&process-keys :zoo unknown parameter keyword"

define* (h2 (:key k #f) a & r) (list a k r)

test (h2 7) '(7 #f ())
test (h2 7 8 9 10) '(7 #f (8 9 10))
test (h2 :key 8 9 10) '(9 8 (10))
test/error (h2 :key 8 :zoo 9) 'SRFI-89-error "&process-keys :zoo unknown parameter keyword"

j := {
  function* ((:a a 1)) {
    a
  }
}

test (j) 1
test/error (j 2) 'SRFI-89-error "expand (2) rest-binding: too many actual parameters"
test (j :a 2) 2

define absent (list 'absent)

define (element tag content & attributes) {
  list "<" tag attributes ">" content "</" tag ">"
}

define (attribute name value) {
  if (eq? value absent) #n {
    list " " name "=" (escape value)
  }
}

define (escape value) value ; could be improved!

define (make-html-styler tag) {
  function* ((:id          id          absent)
	     (:class       class       absent)
	     (:title       title       absent)
	     (:style       style       absent)
	     (:dir         dir         absent)
	     (:lang        lang        absent)
	     (:onclick     onclick     absent)
	     (:ondblclick  ondblclick  absent)
	     (:onmousedown onmousedown absent)
	     (:onmouseup   onmouseup   absent)
	     (:onmouseover onmouseover absent)
	     (:onmousemove onmousemove absent)
	     (:onmouseout  onmouseout  absent)
	     (:onkeypress  onkeypress  absent)
	     (:onkeydown   onkeydown   absent)
	     (:onkeyup     onkeyup     absent)
	     &
	     content) {

    element tag \
	    content \
	    (attribute "id" id) \
	    (attribute "class" class) \
	    (attribute "title" title) \
	    (attribute "style" style) \
	    (attribute "dir" dir) \
	    (attribute "lang" lang) \
	    (attribute "onclick" onclick) \
	    (attribute "ondblclick" ondblclick) \
	    (attribute "onmousedown" onmousedown) \
	    (attribute "onmouseup" onmouseup) \
	    (attribute "onmouseover" onmouseover) \
	    (attribute "onmousemove" onmousemove) \
	    (attribute "onmouseout" onmouseout) \
	    (attribute "onkeypress" onkeypress) \
	    (attribute "onkeydown" onkeydown) \
	    (attribute "onkeyup" onkeyup) \
	    }
}

define html-b      (make-html-styler "b")
define html-big    (make-html-styler "big")
define html-cite   (make-html-styler "cite")
define html-code   (make-html-styler "code")
define html-dfn    (make-html-styler "dfn")
define html-em     (make-html-styler "em")
define html-i      (make-html-styler "i")
define html-kbd    (make-html-styler "kbd")
define html-samp   (make-html-styler "samp")
define html-small  (make-html-styler "small")
define html-strong (make-html-styler "strong")
define html-tt     (make-html-styler "tt")
define html-var    (make-html-styler "var")

define* (print (:handle handle (current-output-handle)) & args) {
  pr :+ function (x) {
	  cond ((null? x)) \
	       ((pair? x)
		(pr (ph x))
		(pr (pt x))) \
	       ((array? x)
		(pr (array->list x))) \
	       (else
		(display x handle))
  }
  pr args
}

;; As {print} uses (current-output-handle) for its default for
;; {handle} we need to jump through a couple of hoops to ensure the
;; impending current output handle is something we can capture and
;; subsequently test.  command.idio helpfully defined some capturing
;; forms albeit we have to put {print} in a thunk.
osh := (open-output-string)
with-output-to osh (function () (print (html-i :class 'molecule
						      :id 'water
						      (html-big "H")
						      (html-small "2")
						      (html-big "O"))))
test (get-output-string osh) "<i id=water class=molecule><big>H</big><small>2</small><big>O</big></i>"

;; all done?
Tests? (SRFI-89-0 + 21)
