;;
;; Copyright (c) 2020-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-string-handle.idio
;;
string-handle0 := Tests

; none of these are string handles
test (string-handle? 0)				#f ; FIXNUM
test (string-handle? #t)			#f ; CONSTANT
test (string-handle? #\a)			#f ; UNICODE
test (string-handle? "a")			#f ; STRING
test (string-handle? 'a)			#f ; SYMBOL
test (string-handle? :a)			#f ; KEYWORD
test (string-handle? (pair 1 2))		#f ; PAIR
test (string-handle? #[])			#f ; ARRAY
test (string-handle? #{})			#f ; HASH
test (string-handle? (function #n #n))		#f ; CLOSURE
test (string-handle? pair)			#f ; PRIMITIVE
test (string-handle? 1.0)			#f ; BIGNUM
test (string-handle? (find-module 'Idio))	#f ; MODULE
test (string-handle? (current-input-handle))	#f ; HANDLE
test (string-handle? ^error)			#f ; STRUCT_TYPE
test (string-handle? char-set:letter)		#f ; STRUCT_INSTANCE
test (string-handle? #B{ 3 })			#f ; BITSET
test (string-handle? libc/INT_MAX)		#f ; C_INT
test (string-handle? libc/UINT_MAX)		#f ; C_UINT
test (string-handle? <class>)			#f ; instance

;; check predicates fail for non-string-handle
test-str := "foo"
test (string-handle? test-str)		#f
test (input-string-handle? test-str)	#f
test (output-string-handle? test-str)	#f

;; write to a string-handle
osh := (open-output-string)
test (string-handle? osh)		#t
test (output-string-handle? osh)	#t
test (input-string-handle? osh)		#f

sho := "0123456789"
display sho osh
close-handle osh

test (string-handle? osh)		#t
test (output-string-handle? osh)	#t
test (input-string-handle? osh)		#f

;; get the text written to the test-str
shis := (get-output-string osh)

; shis = "Hello"; sho = Hello
;test (equal? shis sho)			#t

;; use the text read in as (read) will consume the "s
ish := open-input-string shis
test (string-handle? ish)		#t
test (input-string-handle? ish)		#t
test (output-string-handle? ish)	#f

shi := Idio/read ish
close-handle ish

test (string-handle? ish)		#t
test (input-string-handle? ish)		#t
test (output-string-handle? ish)	#f

test shi 123456789			; 0nnn => nnn

;; use the text read in again
ish := open-input-string shis
test (string-handle? ish)		#t
test (input-string-handle? ish)		#t
test (output-string-handle? ish)	#f

;; seek to the third character of 0123456789 , #\2
isn := seek-handle ish  2
test isn 2

shi := read-char ish

test shi		#\2
test (peek-char ish)	#\3

; default is SEEK_SET
seek-handle ish 2
test (peek-char ish)	#\2

seek-handle ish -2 'cur
test (peek-char ish)	#\0

seek-handle ish 2 'set
test (peek-char ish)	#\2

seek-handle ish -2 'end
test (peek-char ish)	#\8

rewind-handle ish
test (peek-char ish)	#\0

test (handle-pos ish)   0
seek-handle ish 2
test (handle-pos ish)   2

;; code coverage
ish := open-input-string "hello"
test (ready? ish) #t

;; trigger some internal (putb) buffer resizing which is only possible
;; when redirecting IO.  NB. BUFSIZ is *probably* bigger than the
;; default output string handle size.
osh := (open-output-string)
echo (make-string (C/->integer libc/BUFSIZ)) > osh
close-handle osh

ish := open-input-string "hello"
seek-handle ish 0 'set
seek-handle ish 0 'cur
seek-handle ish 20

;; all done?
Tests? (string-handle0 + 50)
