;;
;; Copyright (c) 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-bitset.idio
;;
module tests/bitset

bitset0 := Tests

test (bitset? 0)			#f ; FIXNUM
test (bitset? #t)			#f ; CONSTANT
test (bitset? #\a)			#f ; UNICODE
test (bitset? "a")			#f ; STRING
test (bitset? 'a)			#f ; SYMBOL
test (bitset? :a)			#f ; KEYWORD
test (bitset? (pair 1 2))		#f ; PAIR
test (bitset? #[])			#f ; ARRAY
test (bitset? #{})			#f ; HASH
test (bitset? (function #n #n))		#f ; CLOSURE
test (bitset? pair)			#f ; PRIMITIVE
test (bitset? 1.0)			#f ; BIGNUM
test (bitset? (find-module 'Idio))	#f ; MODULE
test (bitset? (current-input-handle))	#f ; HANDLE
test (bitset? ^error)			#f ; STRUCT_TYPE
test (bitset? char-set:letter)		#f ; STRUCT_INSTANCE
test (bitset? #B{ 3 })			#t ; BITSET
test (bitset? libc/INTMAX_MAX)		#f ; C_INT
test (bitset? libc/UINTMAX_MAX)		#f ; C_UINT

bs := (make-bitset 3)
test (bitset? bs) #t
test (bitset-size bs) 3
test (bitset-ref bs 0) #f

bitset-set! bs 1

test (bitset-ref bs 0) #f
test (bitset-ref bs 1) #t

bitset-clear! bs 1

test (bitset-ref bs 0) #f
test (bitset-ref bs 1) #f

; code coverage
make-bitset 1e1

bs = make-bitset 256

bitset-set! bs #U+1
test (bitset-ref bs #U+1) #t
bitset-clear! bs #U+1
test (bitset-ref bs #U+1) #f

bitset-set! bs 1e1
test (bitset-ref bs 1e1) #t
bitset-clear! bs 1e1
test (bitset-ref bs 1e1) #f

;; count/counter are for testing bitset-for-each-set
count := 0
define (counter i) {
  count = count + 1
}

;; accumulator is for testing fold-bitset
define (accumulator i v) {
  v + 1
}

;; To tease out any features of the implementation we can try with
;; variously sized bitsets relative to the unit of implementation, an
;; idio_bitset_word_t, uint32_t

;; less than one idio_bitset_word_t

test (merge-bitset    #B{ 3 110 } #B{ 3 011 }) #B{ 3 111 }
test (and-bitset      #B{ 3 110 } #B{ 3 011 }) #B{ 3 01 }
test (ior-bitset      #B{ 3 110 } #B{ 3 011 }) #B{ 3 111 }
test (xor-bitset      #B{ 3 110 } #B{ 3 011 }) #B{ 3 101 }
test (subtract-bitset #B{ 3 110 } #B{ 3 011 }) #B{ 3 100 }
test (not-bitset      #B{ 3 110 })             #B{ 3 001 }
bitset-for-each-set   #B{ 3 110 } counter
test count 2
test (fold-bitset     #B{ 3 110 } accumulator 0) 2

test (merge-bitset    #B{ 3 011 } #B{ 3 110 }) #B{ 3 111 }
test (and-bitset      #B{ 3 011 } #B{ 3 110 }) #B{ 3 01 }
test (ior-bitset      #B{ 3 011 } #B{ 3 110 }) #B{ 3 111 }
test (xor-bitset      #B{ 3 011 } #B{ 3 110 }) #B{ 3 101 }
test (subtract-bitset #B{ 3 011 } #B{ 3 110 }) #B{ 3 001 }
test (not-bitset      #B{ 3 011 })             #B{ 3 100 }
bitset-for-each-set   #B{ 3 001 } counter
test count 3
test (fold-bitset     #B{ 3 001 } accumulator 0) 1

;; exactly one idio_bitset_word_t
count = 0

; low bits
test (merge-bitset    #B{ 32 110 } #B{ 32 011 }) #B{ 32 111 }
test (and-bitset      #B{ 32 110 } #B{ 32 011 }) #B{ 32 01 }
test (ior-bitset      #B{ 32 110 } #B{ 32 011 }) #B{ 32 111 }
test (xor-bitset      #B{ 32 110 } #B{ 32 011 }) #B{ 32 101 }
test (subtract-bitset #B{ 32 110 } #B{ 32 011 }) #B{ 32 100 }
test (not-bitset      #B{ 32 110 })              #B{ 32 00111111 8-18 }
bitset-for-each-set   #B{ 32 110 } counter
test count 2
test (fold-bitset     #B{ 32 110 } accumulator 0) 2

; mid bits
test (merge-bitset    #B{ 32 10:110 } #B{ 32 10:011 }) #B{ 32 10:111 }
test (and-bitset      #B{ 32 10:110 } #B{ 32 10:011 }) #B{ 32 10:01 }
test (ior-bitset      #B{ 32 10:110 } #B{ 32 10:011 }) #B{ 32 10:111 }
test (xor-bitset      #B{ 32 10:110 } #B{ 32 10:011 }) #B{ 32 10:101 }
test (subtract-bitset #B{ 32 10:110 } #B{ 32 10:011 }) #B{ 32 10:100 }
test (not-bitset      #B{ 32 10:110 })                 #B{ 32 0-8 00111111 18-18 }
bitset-for-each-set   #B{ 32 10:110 } counter
test count 4
test (fold-bitset     #B{ 32 10:110 } accumulator 0) 2

; high bits
test (merge-bitset    #B{ 32 18:00000110 } #B{ 32 18:00000011 }) #B{ 32 18:00000111 }
test (and-bitset      #B{ 32 18:00000110 } #B{ 32 18:00000011 }) #B{ 32 18:0000001 }
test (ior-bitset      #B{ 32 18:00000110 } #B{ 32 18:00000011 }) #B{ 32 18:00000111 }
test (xor-bitset      #B{ 32 18:00000110 } #B{ 32 18:00000011 }) #B{ 32 18:00000101 }
test (subtract-bitset #B{ 32 18:00000110 } #B{ 32 18:00000011 }) #B{ 32 18:00000100 }
test (not-bitset      #B{ 32 18:00000110 })                      #B{ 32 0-10 11111001 }
bitset-for-each-set   #B{ 32 18:00000110 } counter
test count 6
test (fold-bitset     #B{ 32 18:00000110 } accumulator 0) 2

; range bits
test (merge-bitset    #B{ 32 10-10 } #B{ 32 18-18 }) #B{ 32 10-18 }
test (merge-bitset    #B{ 32 10-10 } #B{ 32 10-18 }) #B{ 32 10-18 }
test (merge-bitset    #B{ 32 10-18 } #B{ 32 10-10 }) #B{ 32 10-18 }
test (and-bitset      #B{ 32 10-10 } #B{ 32 18-18 }) #B{ 32 }
test (and-bitset      #B{ 32 10-10 } #B{ 32 10-18 }) #B{ 32 10-10 }
test (and-bitset      #B{ 32 10-18 } #B{ 32 10-10 }) #B{ 32 10-10 }
test (ior-bitset      #B{ 32 10-10 } #B{ 32 18-18 }) #B{ 32 10-18 }
test (ior-bitset      #B{ 32 10-10 } #B{ 32 10-18 }) #B{ 32 10-18 }
test (ior-bitset      #B{ 32 10-18 } #B{ 32 10-10 }) #B{ 32 10-18 }
test (xor-bitset      #B{ 32 10-10 } #B{ 32 18-18 }) #B{ 32 10-18 }
test (xor-bitset      #B{ 32 10-10 } #B{ 32 10-18 }) #B{ 32 18-18 }
test (xor-bitset      #B{ 32 10-18 } #B{ 32 10-10 }) #B{ 32 18-18 }
test (not-bitset      #B{ 32 10-10 })                #B{ 32 0-8 18-18 }
bitset-for-each-set   #B{ 32 10-10 } counter
test count 14
test (fold-bitset     #B{ 32 10-10 } accumulator 0) 8

;; a bit more than one idio_bitset_word_t
count = 0

; low bits first word
test (merge-bitset    #B{ 40 110 } #B{ 40 011 }) #B{ 40 111 }
test (and-bitset      #B{ 40 110 } #B{ 40 011 }) #B{ 40 01 }
test (ior-bitset      #B{ 40 110 } #B{ 40 011 }) #B{ 40 111 }
test (xor-bitset      #B{ 40 110 } #B{ 40 011 }) #B{ 40 101 }
test (subtract-bitset #B{ 40 110 } #B{ 40 011 }) #B{ 40 100 }
test (not-bitset      #B{ 40 110 })              #B{ 40 00111111 8-20 }
bitset-for-each-set   #B{ 40 110 } counter
test count 2
test (fold-bitset     #B{ 40 110 } accumulator 0) 2

; mid bits first word
test (merge-bitset    #B{ 40 10:110 } #B{ 40 10:011 }) #B{ 40 10:111 }
test (and-bitset      #B{ 40 10:110 } #B{ 40 10:011 }) #B{ 40 10:01 }
test (ior-bitset      #B{ 40 10:110 } #B{ 40 10:011 }) #B{ 40 10:111 }
test (xor-bitset      #B{ 40 10:110 } #B{ 40 10:011 }) #B{ 40 10:101 }
test (subtract-bitset #B{ 40 10:110 } #B{ 40 10:011 }) #B{ 40 10:100 }
test (not-bitset      #B{ 40 10:110 })                 #B{ 40 0-8 00111111 18-20 }
bitset-for-each-set   #B{ 40 10:110 } counter
test count 4
test (fold-bitset     #B{ 40 10:110 } accumulator 0) 2

; high bits first word
test (merge-bitset    #B{ 40 18:00000110 } #B{ 40 18:00000011 }) #B{ 40 18:00000111 }
test (and-bitset      #B{ 40 18:00000110 } #B{ 40 18:00000011 }) #B{ 40 18:0000001 }
test (ior-bitset      #B{ 40 18:00000110 } #B{ 40 18:00000011 }) #B{ 40 18:00000111 }
test (xor-bitset      #B{ 40 18:00000110 } #B{ 40 18:00000011 }) #B{ 40 18:00000101 }
test (subtract-bitset #B{ 40 18:00000110 } #B{ 40 18:00000011 }) #B{ 40 18:00000100 }
test (not-bitset      #B{ 40 18:00000110 })                      #B{ 40 0-10 11111001 20-20 }
bitset-for-each-set   #B{ 40 18:00000110 } counter
test count 6
test (fold-bitset     #B{ 40 18:00000110 } accumulator 0) 2

; low bits second word
test (merge-bitset    #B{ 40 20:110 } #B{ 40 20:011 }) #B{ 40 20:111 }
test (and-bitset      #B{ 40 20:110 } #B{ 40 20:011 }) #B{ 40 20:01 }
test (ior-bitset      #B{ 40 20:110 } #B{ 40 20:011 }) #B{ 40 20:111 }
test (xor-bitset      #B{ 40 20:110 } #B{ 40 20:011 }) #B{ 40 20:101 }
test (subtract-bitset #B{ 40 20:110 } #B{ 40 20:011 }) #B{ 40 20:100 }
test (not-bitset      #B{ 40 20:110 })                 #B{ 40 0-18 20:00111111 }
bitset-for-each-set   #B{ 40 20:110 } counter
test count 8
test (fold-bitset     #B{ 40 20:110 } accumulator 0) 2

; range across word bits
test (merge-bitset    #B{ 40 18-18 } #B{ 40 18-20 }) #B{ 40 18-20 }
test (merge-bitset    #B{ 40 18-18 } #B{ 40 18-20 }) #B{ 40 18-20 }
test (merge-bitset    #B{ 40 18-20 } #B{ 40 18-18 }) #B{ 40 18-20 }
test (and-bitset      #B{ 40 18-18 } #B{ 40 20-20 }) #B{ 40 }
test (and-bitset      #B{ 40 18-18 } #B{ 40 18-20 }) #B{ 40 18-18 }
test (and-bitset      #B{ 40 18-20 } #B{ 40 18-18 }) #B{ 40 18-18 }
test (ior-bitset      #B{ 40 18-18 } #B{ 40 20-20 }) #B{ 40 18-20 }
test (ior-bitset      #B{ 40 18-18 } #B{ 40 18-20 }) #B{ 40 18-20 }
test (ior-bitset      #B{ 40 18-20 } #B{ 40 18-18 }) #B{ 40 18-20 }
test (xor-bitset      #B{ 40 18-18 } #B{ 40 20-20 }) #B{ 40 18-20 }
test (xor-bitset      #B{ 40 18-18 } #B{ 40 18-20 }) #B{ 40 20-20 }
test (xor-bitset      #B{ 40 18-20 } #B{ 40 18-18 }) #B{ 40 20-20 }
test (not-bitset      #B{ 40 18-18 })                #B{ 40 0-10 20-20 }
test (not-bitset      #B{ 40 18-20 })                #B{ 40 0-10 }
test (not-bitset      #B{ 40 20-20 })                #B{ 40 0-18 }
test (subtract-bitset #B{ 40 18-18 } #B{ 40 20-20 }) #B{ 40 18-18 }
test (subtract-bitset #B{ 40 18-18 } #B{ 40 18-20 }) #B{ 40 }
test (subtract-bitset #B{ 40 18-20 } #B{ 40 18-18 }) #B{ 40 20-20 }
bitset-for-each-set   #B{ 40 18-18 } counter
test count 16
bitset-for-each-set   #B{ 40 20-20 } counter
test count 24
bitset-for-each-set   #B{ 40 18-20 } counter
test count 40
test (fold-bitset     #B{ 40 18-18 } accumulator 0) 8
test (fold-bitset     #B{ 40 18-20 } accumulator 0) 16
test (fold-bitset     #B{ 40 20-20 } accumulator 0) 8

;; exactly two (or more) idio_bitset_word_t
count = 0

; low bits first word
test (merge-bitset    #B{ 64 110 } #B{ 64 011 }) #B{ 64 111 }
test (and-bitset      #B{ 64 110 } #B{ 64 011 }) #B{ 64 01 }
test (ior-bitset      #B{ 64 110 } #B{ 64 011 }) #B{ 64 111 }
test (xor-bitset      #B{ 64 110 } #B{ 64 011 }) #B{ 64 101 }
test (subtract-bitset #B{ 64 110 } #B{ 64 011 }) #B{ 64 100 }
test (not-bitset      #B{ 64 110 })              #B{ 64 00111111 8-38 }
bitset-for-each-set   #B{ 64 110 } counter
test count 2
test (fold-bitset     #B{ 64 110 } accumulator 0) 2

; mid bits first word
test (merge-bitset    #B{ 64 10:110 } #B{ 64 10:011 }) #B{ 64 10:111 }
test (and-bitset      #B{ 64 10:110 } #B{ 64 10:011 }) #B{ 64 10:01 }
test (ior-bitset      #B{ 64 10:110 } #B{ 64 10:011 }) #B{ 64 10:111 }
test (xor-bitset      #B{ 64 10:110 } #B{ 64 10:011 }) #B{ 64 10:101 }
test (subtract-bitset #B{ 64 10:110 } #B{ 64 10:011 }) #B{ 64 10:100 }
test (not-bitset      #B{ 64 10:110 })                 #B{ 64 0-8 00111111 18-38 }
bitset-for-each-set   #B{ 64 10:110 } counter
test count 4
test (fold-bitset     #B{ 64 10:110 } accumulator 0) 2

; high bits first word
test (merge-bitset    #B{ 64 18:00000110 } #B{ 64 18:00000011 }) #B{ 64 18:00000111 }
test (and-bitset      #B{ 64 18:00000110 } #B{ 64 18:00000011 }) #B{ 64 18:0000001 }
test (ior-bitset      #B{ 64 18:00000110 } #B{ 64 18:00000011 }) #B{ 64 18:00000111 }
test (xor-bitset      #B{ 64 18:00000110 } #B{ 64 18:00000011 }) #B{ 64 18:00000101 }
test (subtract-bitset #B{ 64 18:00000110 } #B{ 64 18:00000011 }) #B{ 64 18:00000100 }
test (not-bitset      #B{ 64 18:00000110 })                      #B{ 64 0-10 11111001 20-38 }
bitset-for-each-set   #B{ 64 18:00000110 } counter
test count 6
test (fold-bitset     #B{ 64 18:00000110 } accumulator 0) 2

; low bits second word
test (merge-bitset    #B{ 64 20:110 } #B{ 64 20:011 }) #B{ 64 20:111 }
test (and-bitset      #B{ 64 20:110 } #B{ 64 20:011 }) #B{ 64 20:01 }
test (ior-bitset      #B{ 64 20:110 } #B{ 64 20:011 }) #B{ 64 20:111 }
test (xor-bitset      #B{ 64 20:110 } #B{ 64 20:011 }) #B{ 64 20:101 }
test (subtract-bitset #B{ 64 20:110 } #B{ 64 20:011 }) #B{ 64 20:100 }
test (not-bitset      #B{ 64 20:110 })                 #B{ 64 0-18 20:00111111 28-38 }
bitset-for-each-set   #B{ 64 20:110 } counter
test count 8
test (fold-bitset     #B{ 64 20:110 } accumulator 0) 2

; high bits second word
test (merge-bitset    #B{ 64 38:00000110 } #B{ 64 38:00000011 }) #B{ 64 38:00000111 }
test (and-bitset      #B{ 64 38:00000110 } #B{ 64 38:00000011 }) #B{ 64 38:0000001 }
test (ior-bitset      #B{ 64 38:00000110 } #B{ 64 38:00000011 }) #B{ 64 38:00000111 }
test (xor-bitset      #B{ 64 38:00000110 } #B{ 64 38:00000011 }) #B{ 64 38:00000101 }
test (subtract-bitset #B{ 64 38:00000110 } #B{ 64 38:00000011 }) #B{ 64 38:00000100 }
test (not-bitset      #B{ 64 38:00000110 })                      #B{ 64 0-30 11111001 }
bitset-for-each-set   #B{ 64 38:00000110 } counter
test count 10
test (fold-bitset     #B{ 64 38:00000110 } accumulator 0) 2

; range across word bits
test (merge-bitset    #B{ 64 18-18 } #B{ 64 18-20 }) #B{ 64 18-20 }
test (merge-bitset    #B{ 64 18-18 } #B{ 64 18-20 }) #B{ 64 18-20 }
test (merge-bitset    #B{ 64 18-20 } #B{ 64 18-18 }) #B{ 64 18-20 }
test (and-bitset      #B{ 64 18-18 } #B{ 64 20-20 }) #B{ 64 }
test (and-bitset      #B{ 64 18-18 } #B{ 64 18-20 }) #B{ 64 18-18 }
test (and-bitset      #B{ 64 18-20 } #B{ 64 18-18 }) #B{ 64 18-18 }
test (ior-bitset      #B{ 64 18-18 } #B{ 64 20-20 }) #B{ 64 18-20 }
test (ior-bitset      #B{ 64 18-18 } #B{ 64 18-20 }) #B{ 64 18-20 }
test (ior-bitset      #B{ 64 18-20 } #B{ 64 18-18 }) #B{ 64 18-20 }
test (xor-bitset      #B{ 64 18-18 } #B{ 64 20-20 }) #B{ 64 18-20 }
test (xor-bitset      #B{ 64 18-18 } #B{ 64 18-20 }) #B{ 64 20-20 }
test (xor-bitset      #B{ 64 18-20 } #B{ 64 18-18 }) #B{ 64 20-20 }
test (not-bitset      #B{ 64 18-18 })                #B{ 64 0-10 20-38 }
test (not-bitset      #B{ 64 18-20 })                #B{ 64 0-10 28-38 }
test (not-bitset      #B{ 64 20-20 })                #B{ 64 0-18 28-38 }
test (subtract-bitset #B{ 64 18-18 } #B{ 64 20-20 }) #B{ 64 18-18 }
test (subtract-bitset #B{ 64 18-18 } #B{ 64 18-20 }) #B{ 64 }
test (subtract-bitset #B{ 64 18-20 } #B{ 64 18-18 }) #B{ 64 20-20 }
bitset-for-each-set   #B{ 64 18-18 } counter
test count 18
bitset-for-each-set   #B{ 64 20-20 } counter
test count 26
bitset-for-each-set   #B{ 64 18-20 } counter
test count 42
test (fold-bitset     #B{ 64 18-18 } accumulator 0) 8
test (fold-bitset     #B{ 64 18-20 } accumulator 0) 16
test (fold-bitset     #B{ 64 20-20 } accumulator 0) 8

; range bits in second word
test (merge-bitset    #B{ 64 30-30 } #B{ 64 38-38 }) #B{ 64 30-38 }
test (merge-bitset    #B{ 64 30-30 } #B{ 64 30-38 }) #B{ 64 30-38 }
test (merge-bitset    #B{ 64 30-38 } #B{ 64 30-30 }) #B{ 64 30-38 }
test (and-bitset      #B{ 64 30-30 } #B{ 64 38-38 }) #B{ 64 }
test (and-bitset      #B{ 64 30-30 } #B{ 64 30-38 }) #B{ 64 30-30 }
test (and-bitset      #B{ 64 30-38 } #B{ 64 30-30 }) #B{ 64 30-30 }
test (ior-bitset      #B{ 64 30-30 } #B{ 64 38-38 }) #B{ 64 30-38 }
test (ior-bitset      #B{ 64 30-30 } #B{ 64 30-38 }) #B{ 64 30-38 }
test (ior-bitset      #B{ 64 30-38 } #B{ 64 30-30 }) #B{ 64 30-38 }
test (xor-bitset      #B{ 64 30-30 } #B{ 64 38-38 }) #B{ 64 30-38 }
test (xor-bitset      #B{ 64 30-30 } #B{ 64 30-38 }) #B{ 64 38-38 }
test (xor-bitset      #B{ 64 30-38 } #B{ 64 30-30 }) #B{ 64 38-38 }
test (not-bitset      #B{ 64 30-30 })                #B{ 64 0-28 38-38 }
bitset-for-each-set   #B{ 64 30-30 } counter
test count 50
test (fold-bitset     #B{ 64 30-30 } accumulator 0) 8
test (fold-bitset     #B{ 64 30-38 } accumulator 0) 16
test (fold-bitset     #B{ 64 38-38 } accumulator 0) 8

;; all done?
Tests? (bitset0 + 222)
