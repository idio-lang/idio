;;
;; Copyright (c) 2015, 2017, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-condition.idio
;;
module tests/condition
import libc

condition0 := Tests

test (condition-type? 0)			#f ; FIXNUM
test (condition-type? #t)			#f ; CONSTANT
test (condition-type? (integer->char 1))	#f ; CHARACTER (deprecated)
test (condition-type? #\a)			#f ; UNICODE
test (condition-type? "a")			#f ; STRING
test (condition-type? 'a)			#f ; SYMBOL
test (condition-type? :a)			#f ; KEYWORD
test (condition-type? (pair 1 2))		#f ; PAIR
test (condition-type? #[])			#f ; ARRAY
test (condition-type? #{})			#f ; HASH
test (condition-type? (function #n #n))		#f ; CLOSURE
test (condition-type? pair)			#f ; PRIMITIVE
test (condition-type? 1.0)			#f ; BIGNUM
test (condition-type? (find-module 'Idio))	#f ; MODULE
test (condition-type? (current-input-handle))	#f ; HANDLE
test (condition-type? ^error)			#t ; STRUCT_TYPE
test (condition-type? char-set:letter)		#f ; STRUCT_INSTANCE
test (condition-type? #B{ 3 })			#f ; BITSET
test (condition-type? libc/INTMAX_MAX)		#f ; C_INT
test (condition-type? libc/UINTMAX_MAX)		#f ; C_UINT

;; there is no reader form for a condition so all these tests are #f

test (condition? 0)				#f ; FIXNUM
test (condition? #t)				#f ; CONSTANT
test (condition? (integer->char 1))		#f ; CHARACTER (deprecated)
test (condition? #\a)				#f ; UNICODE
test (condition? "a")				#f ; STRING
test (condition? 'a)				#f ; SYMBOL
test (condition? :a)				#f ; KEYWORD
test (condition? (pair 1 2))			#f ; PAIR
test (condition? #[])				#f ; ARRAY
test (condition? #{})				#f ; HASH
test (condition? (function #n #n))		#f ; CLOSURE
test (condition? pair)				#f ; PRIMITIVE
test (condition? 1.0)				#f ; BIGNUM
test (condition? (find-module 'Idio))		#f ; MODULE
test (condition? (current-input-handle))	#f ; HANDLE
test (condition? ^error)			#f ; STRUCT_TYPE
test (condition? char-set:letter)		#f ; STRUCT_INSTANCE
test (condition? #B{ 3 })			#f ; BITSET
test (condition? libc/INTMAX_MAX)		#f ; C_INT
test (condition? libc/UINTMAX_MAX)		#f ; C_UINT

test (error? ^error) #f

;; make-condition-type
mct1 := make-condition-type 'mct1 ^condition 'f1
test (condition-type? mct1) #t
test (error? mct1) #f

c1 := condition mct1 (f1 10)
test (condition? c1) #t
test (condition-type? c1) #f
test (condition-ref c1 'f1) 10

mct3 := make-condition-type 'mct3 ^error 'f3
test (condition-type? mct3) #t
test (error? mct3) #f

c3 := condition mct3 (f3 30)
test (condition? c3) #t
test (condition-type? c3) #f
test (error? c3) #t
test (condition-ref c3 'f3) 30

mct4 := make-condition-type 'mct4 ^error 'f4/1 'f4/2
test (condition-type? mct4) #t
test (error? mct4) #f

c4 := condition mct4 (f4/1 41) (f4/2 42)
test (condition? c4) #t
test (condition-type? c4) #f
test (error? c4) #t
test (condition-ref c4 'f4/1) 41

;; define-condition-type
define-condition-type dct5 ^condition f5
test (condition-type? dct5) #t
test (error? dct5) #f

c5 := condition dct5 (f5 50)
test (condition-type? c5) #f
test (condition? c5) #t
test (dct5? c5) #t
test (condition-ref c5 'f5) 50
test (dct5-f5 c5) 50

define-condition-type dct6 ^condition f6/1 f6/2
test (condition-type? dct6) #t
test (error? dct6) #f

c6 := condition dct6 (f6/1 60)
test (condition-type? c6) #f
test (condition? c6) #t
test (dct6? c6) #t
test (condition-ref c6 'f6/1) 60
test (dct6-f6/1 c6) 60

;; SRFI-36-ish
test (condition-type? ^i/o-error) #t
test (condition? ^i/o-error) #f
test (error? ^i/o-error) #f

c8 := condition ^i/o-error
test (condition? c8) #t
test (i/o-error? c8) #t

test (condition-type? ^i/o-handle-error) #t
test (error? ^i/o-handle-error) #f

c9 := condition ^i/o-handle-error (handle (current-input-handle))
test (i/o-handle-error? c9) #t
test (i/o-error? c9) #t
test (i/o-handle-error-handle c9) (current-input-handle)

test (condition-type? ^i/o-no-such-file-error) #t
test (error? ^i/o-no-such-file-error) #f

test_filename := "..test-file.."
c10 := condition ^i/o-no-such-file-error (filename test_filename)
test (i/o-no-such-file-error? c10) #t
test (i/o-filename-error? c10) #t
test (i/o-error? c10) #t
test (i/o-filename-error-filename c10) test_filename

;; Try to capture the various continuable io errors generated
;; internally together with some "repair" in the handler code.
;; 
;; Exceptions generating exceptions is a bit too hairy for this
;; simplistic testing.

;; ^i/o-read-error
;;
trap ^i/o-read-error (function (c) {
			test (i/o-read-error? c) #t
			handle := i/o-handle-error-handle c

			'caught-a-read-error
}) {
  ;; printf "read handle condition\n"

  osh := (open-output-string)
  expr := *primitives*/read osh
  close-handle osh
  test expr 'caught-a-read-error
}

;; ^i/o-write-error
;;
trap ^i/o-write-error (function (c) {
			 test (i/o-write-error? c) #t
			 handle := i/o-handle-error-handle c

			 'caught-a-write-error
}) {
  ;; printf "write handle condition\n"

  ish := open-input-string "bob"
  r := *primitives*/write "Hello" ish
  close-handle ish

  test r 'caught-a-write-error
}

;; ^i/o-closed-error
;;
;; only file-handles generate this
trap ^i/o-closed-error (function (c) {
			  test (i/o-closed-error? c) #t
			  handle := i/o-handle-error-handle c

			  #t
}) {
  touch test_filename
  chmod +r test_filename

  ifh := open-input-file test_filename
  close-handle ifh
  close-handle ifh
}

;; discovered in s9-test.idio after adding the SRFI-36 conditions:
trap ^i/o-closed-error (function (c) {
			  test (i/o-closed-error? c) #t
			  #t
}) {
  ;; printf "closed handle condition\n"
  test {
    call-with-output-file testfile (function (out) {
      *primitives*/write '(this is a test) out

      ;; the cause of the error -- call-with-output-file will also
      ;; call close-output-handle (generating the condition) but we
      ;; need to close the handle here otherwise call-with-input-file
      ;; will get #eof
      close-output-handle out
      call-with-input-file testfile *primitives*/read
    })
  } '(this is a test)
}


if (e? test_filename) (delete-file test_filename)

;; A continuable error, we set a default-condition-handler to
;; specifically return a magic symbol, 'default-idio-error, something
;; we can test for.
set-default-handler! ^idio-error (function (c) {
				    'test-condition-default-idio-error
})

test (raise (make-condition ^idio-error "continuable condition" "loc" "det")) 'test-condition-default-idio-error

clear-default-handler! ^idio-error

test (condition-isa? (make-condition ^error) ^rt-command-status-error) #f

;; these two tease out some code coverage when users "accidentally"
;; use system handlers
trap ^rt-divide-by-zero-error (function (c) {
				 test #t #t
}) {
  trap ^rt-divide-by-zero-error default-SIGCHLD-handler {
    1 / 0
  }
}

trap ^rt-divide-by-zero-error (function (c) {
				 test #t #t
}) {
  trap ^rt-divide-by-zero-error default-rcse-handler {
    1 / 0
  }
}

;; all done?
Tests? (condition0 + 99)
