;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-command-error.idio
;;

module tests/command-error
import job-control libc

command-error0 := Tests
command-skipped := 0

#*

We have a bunch of test cases which should provoke a ^rt-command-error
or ^rt-parameter-type-error.  So we can write a load function which
will wrapper the actual load with a trap for (^rt-command-error
^rt-parameter-type-error) and compare the message strings.

There is a complication with commands, though, in that many of the
potential errors are going to fire in a child process, not in us. 

So, first up, we need to distinguish between conditions raised in the
parent process before we get going and then, secondly, conditions
raised in the child process which need (somehow) signalling back to
the parent.

Parent process errors should be much like other error handling code.
Child process errors need to be handled more carefully.  There's two
processes in play, for a start!

It so happens a default-child-handler trap should be arranged in the
child which will exit (1) on any ^idio-error (not just
^rt-command-error).

However, since we have forked, *this* ^rt-command-error is also in
force which, as it will successfully handle ^rt-command-error, will
return to the top level and...carry on doing whatever the toplevel was
doing.  That might well be to continue the REPL.  Which is confusing
as both parent and child are toggling reads from the controlling tty.

So, for child errors, we need to handle two cases:

In the child we can check the specific error and exit with some
specific N.  There's no point in using {test} as only the parent
process cares.

In the parent we can check that the "job failed" and that the exit
code was N (and that it was 'exit and not 'killed or 'unknown).  Three
tests per test.

It is possible that our choice of N is in conflict with something
else (in the codebase).  About all we can do is use something
not "normal" (1, 2, 3) but not > 127 when it will get confused with
signals.  So, 10, 11, 12, ...

*#

command-parent-error-load := {
  n := 0

  function (filename msg & args) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "string" filename)

    n = n + 1

    exp-tests := 1
    if (pair? args) {
      exp-tests = 2
    }

    ;eprintf "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-command-error
	  ^rt-glob-error
	  ^system-error
	  ^rt-parameter-type-error) (function (c) {
	    ;eprintf "command-parent-error #%s: %s %s\n" n msg (idio-error-location c)
	    test (idio-error-message c) msg

	    if (not (string=? (idio-error-message c) msg)) {
	      condition-report (append-string "command-parent-error-load: " filename) c (current-error-handle)
	    }

	    if (system-error? c) {
	      tested := #f
	      if (pair? args) {
		test (system-error-function c) (ph args)
		tested = #t
	      }

	      if (not tested) {
		condition-report (append-string "command-error-load: " filename) c (current-error-handle)
	      }
	    }

	    trap-return 'command-parent-error
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "command-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
    }
  }
}

command-env-error-load := {
  n := 0

  function (filename msg) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "string" filename)

    n = n + 1
    ;eprintf "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-command-error
	  ^rt-parameter-type-error) (function (c) {
	    test (idio-error-message c) msg

	    if (not (string=? (idio-error-message c) msg)) {
	      condition-report (append-string "command-child-error-load: " filename) c (current-error-handle)
	    }

	    trap-return #t
	  }) {
	    (symbol-value 'load 'Idio) filename
    }

    ;; we usually generate some stragglers...
    (wait)
  }
}

command-env-error-load "command-errors/env-format.idio" "environ 'IDIO-LIB' contains an ASCII NUL"
command-env-error-load "command-errors/env-type.idio" "environment variable 'IDIO-LIB' is not a string"

command-parent-error-load "command-errors/PATH-format.idio" "find-exe 'PATH' contains an ASCII NUL"

(cond-expand
 ("uname/sysname/SunOS" {
   ;; SunOS won't let you rmdir "." or any equivalent => EINVAL
   eprintf "SunOS: skipping test using rmdir .\n"
   command-skipped = command-skipped + 2
 })
 (else {
   cwd := (getcwd)
   command-parent-error-load "command-errors/find-exe-getcwd-rmdir.idio" "No such file or directory" "getcwd"
   chdir cwd
 }))

OPATH := PATH
command-parent-error-load "command-errors/find-exe-cmd-PATH_MAX.idio" "File name too long" "cwd+command exename length"
PATH = OPATH

command-parent-error-load "command-errors/find-exe-dir-cmd-PATH_MAX-1.idio" "File name too long" "PATH+command exename length"
PATH = OPATH

command-parent-error-load "command-errors/find-exe-dir-cmd-PATH_MAX-2.idio" "File name too long" "cwd+command exename length"
PATH = OPATH

command-parent-error-load "command-errors/find-exe-dir-cmd-PATH_MAX-3.idio" "File name too long" "dir+command exename length"
PATH = OPATH

command-parent-error-load "command-errors/find-exe-bad-format.idio" "command contains an ASCII NUL"
command-parent-error-load "command-errors/find-exe-bad-type.idio" "bad parameter type: '#t' a constant is not a symbol|string"
command-parent-error-load "command-errors/find-exe-not-found.idio" "command not found (foo)"
PATH = OPATH

command-parent-error-load "command-errors/arg-glob-format.idio" "glob contains an ASCII NUL"

;; command-errors/arg-glob-aborted requires that the call to glob(3)
;; passes the GLOB_ERR flag.  Which we don't.  If we did, this is the
;; test case.
;command-parent-error-load "command-errors/arg-glob-aborted.idio" "pattern glob failed"

command-parent-error-load "command-errors/arg-constant-idio.idio" "can't convert a constant to an execve argument: inconvertible constant"
command-parent-error-load "command-errors/arg-string-format.idio" "argument contains an ASCII NUL"
command-parent-error-load "command-errors/arg-substring-format.idio" "argument contains an ASCII NUL"
command-parent-error-load "command-errors/arg-bad-list.idio" "can't convert a pair to an execve argument: inconvertible list"
command-parent-error-load "command-errors/arg-bad-struct.idio" "can't convert a %idio-job to an execve argument: only ~path structs"
command-parent-error-load "command-errors/arg-bad-value.idio" "can't convert a struct-type to an execve argument: inconvertible type"

OPATH := PATH
command-parent-error-load "command-errors/exec-not-found.idio" "command not found (foo #n)"
PATH = OPATH

;; and again, in case we still have some stragglers...
(wait)

;; all done?
Skipped = Skipped + command-skipped
Tests? (command-error0 + 24 - command-skipped)
