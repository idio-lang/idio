;;
;; Copyright (c) 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-expander-error.idio
;;

expander-error0 := Tests

#*

We have a bunch of test cases which should provoke an error of some
kind.  So we can write a load function which will wrapper the actual
load with a trap for whatever error and compare the message strings.

One slight inconvenience is that {trap} only takes literal symbols,
not values that evaluate to a symbol.  So we need a number of
trap-thunks all of which do much of a muchness.  Cue the template.

*#

module expander

define-template (expander-trap type) {
  loader-name := append-string "expander-trap-" (symbol->string type)
  loader-sym := string->symbol loader-name
  condition-name := string->symbol (append-string "^" (symbol->string type))
  #T{

    $loader-sym := {
      function (filename msg) {
	if (not (string? filename)) (error/type ^rt-parameter-type-error '$loader-sym "not a string" filename)

	thunk := function () {
	  trap $condition-name (function (c) {
	    ;eprintf "caught %s at %s\n" msg (idio-error-location c)
	    test (idio-error-message c) msg
	    if (not (string=? (idio-error-message c) msg)) {
	      condition-report (append-string $loader-name " " filename) c (current-error-handle)
	    }
	    trap-return c
	  }) {
	    (symbol-value 'load 'Idio) filename
	  }
	}

	run-in-thread *expander-thread* thunk
      }
    }
  }
}

expander-trap st-function-arity-error
expander-trap evaluation-error

;; test the various possible errors in expander.c including an embedded
;; variant to check we pick up the correct line number

expander-trap-st-function-arity-error "expander-errors/let-1-arg.idio" "(let bindings body)"
expander-trap-evaluation-error "expander-errors/let-invalid-bindings.idio" "parameter type: bindings: pair"
expander-trap-evaluation-error "expander-errors/let-invalid-binding.idio" "parameter type: binding: pair/symbol"

expander-trap-st-function-arity-error "expander-errors/let*-1-arg.idio" "(let* bindings body)"
expander-trap-evaluation-error "expander-errors/let*-invalid-bindings.idio" "parameter type: bindings: pair"

expander-trap-st-function-arity-error "expander-errors/letrec-1-arg.idio" "(letrec bindings body)"
expander-trap-evaluation-error "expander-errors/letrec-invalid-bindings.idio" "parameter type: bindings: pair"
expander-trap-evaluation-error "expander-errors/letrec-invalid-binding.idio" "parameter type: binding: pair/symbol"

expander-trap-st-function-arity-error "expander-errors/infix-too-many-before.idio" "too many args before \":=\""
expander-trap-st-function-arity-error "expander-errors/infix-too-few-after.idio" "too few args after \":=\""

;; all done?
Tests? (expander-error0 + 10)
