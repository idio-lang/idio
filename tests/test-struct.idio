;;
;; Copyright (c) 2020-2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-struct.idio
;;
struct0 := Tests

test (struct-type? 0)				#f ; FIXNUM
test (struct-type? #t)				#f ; CONSTANT
test (struct-type? #\a)				#f ; UNICODE
test (struct-type? "a")				#f ; STRING
test (struct-type? 'a)				#f ; SYMBOL
test (struct-type? :a)				#f ; KEYWORD
test (struct-type? (pair 1 2))			#f ; PAIR
test (struct-type? #[])				#f ; ARRAY
test (struct-type? #{})				#f ; HASH
test (struct-type? (function #n #n))		#f ; CLOSURE
test (struct-type? pair)			#f ; PRIMITIVE
test (struct-type? 1.0)				#f ; BIGNUM
test (struct-type? (find-module 'Idio))		#f ; MODULE
test (struct-type? (current-input-handle))	#f ; HANDLE
test (struct-type? ^error)			#t ; STRUCT_TYPE
test (struct-type? char-set:letter)		#f ; STRUCT_INSTANCE
test (struct-type? #B{ 3 })			#f ; BITSET
test (struct-type? libc/INTMAX_MAX)		#f ; C_INT
test (struct-type? libc/UINTMAX_MAX)		#f ; C_UINT

test (struct-instance? 0)			#f ; FIXNUM
test (struct-instance? #t)			#f ; CONSTANT
test (struct-instance? #\a)			#f ; UNICODE
test (struct-instance? "a")			#f ; STRING
test (struct-instance? 'a)			#f ; SYMBOL
test (struct-instance? :a)			#f ; KEYWORD
test (struct-instance? (pair 1 2))		#f ; PAIR
test (struct-instance? #[])			#f ; ARRAY
test (struct-instance? #{})			#f ; HASH
test (struct-instance? (function #n #n))	#f ; CLOSURE
test (struct-instance? pair)			#f ; PRIMITIVE
test (struct-instance? 1.0)			#f ; BIGNUM
test (struct-instance? (find-module 'Idio))	#f ; MODULE
test (struct-instance? (current-input-handle))	#f ; HANDLE
test (struct-instance? ^error)			#f ; STRUCT_TYPE
test (struct-instance? char-set:letter)		#t ; STRUCT_INSTANCE
test (struct-instance? #B{ 3 })			#f ; BITSET
test (struct-instance? libc/INTMAX_MAX)		#f ; C_INT
test (struct-instance? libc/UINTMAX_MAX)	#f ; C_UINT

define-struct foo a b
test (struct-type? foo) #t
test (struct-instance? foo) #f
test (struct-type-name foo) 'foo
test (struct-type-parent foo) #n
test (struct-type-fields foo) '(a b)

fooi := make-foo 3 6
test (foo? fooi) #t
test (struct-instance? fooi) #t
test (struct-type? fooi) #f
test (struct-type-name (struct-instance-type fooi)) 'foo
test (struct-instance-fields fooi) '(3 6)
test (struct-instance-ref fooi 'a) 3
test (foo-a fooi) 3

set-foo-b! fooi 10
test (struct-instance-ref fooi 'b) 10
test (foo-b fooi) 10

test (fooi.'b) 10

sym := 'b
test (fooi.sym) 10

;; setters
set! fooi.sym 20
test (fooi.sym) 20

fooi.sym = 30
test (fooi.sym) 30

test (struct-type-isa? ^idio-error ^error) #t

;; all done?
Tests? (struct0 + 57)
