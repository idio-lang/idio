;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-job-control.idio
;;

module tests/job-control
import job-control libc

job-control0 := Tests

#*

We want to test the behaviour of Idio in the face of (regular and
asynchronous) commands going wrong.  We default to being very strict
in that *anything* going wrong should generate a fatal error but we
have various mechanisms to mitigate behaviour: suppress-pipefail!,
suppress-exit-on-error! and so on.

There are complications in that the commands we want the sub-Idio to
run on our behalf cuold be:

1. a "simple" command or a pipeline

   simple, here, meaning not a pipeline!

2. The command parts could be Idio or external commands.

   a. The Idio command could be a simple or compound command

      simple, here, meaning not a compound command!

      The simple-Idio-{simple,compound}-* variants are seemingly
      redundant as they're what we've been testing in every other
      example up to now:

      libc/exit 0

      {
        libc/sleep 0
        libc/exit 0
      }

      However, here we are testing that the *executor* of those
      scripts, the sub-Idio, itself exits correctly based on what the
      script it was running did.

   b. The commands could be expected to pass or fail

with a bit more perturbation caused by the use of asynchronous
commands which might be:

3. piping into or from		-- cf. Perl's "cmd args |"

4. named-pipe-into or -from	-- cf. Process Substitution

5. collect-from			-- cf. Command Substitution

Part of our problem with testing is that we want to ensure that *Idio*
behaves correctly which is a bit tricky because *we* are Idio.  *We*
don't want to exit on error but we want that other guy to.

We can facilitate that by forking(*) and running the tests in the
child ourselves.  It's up to us to keep track of our child Idio, it
won't be a regular Idio "job."  Which is important because if it was a
regular Idio job then it failing would cause us to fail.  Not ideal
when mid-test.

That's not too hard to achieve (we call libc/fork ...) although we
don't get the nicety of Idio job handling to we have to handle
collecting and managing the sub-Idio's exit status ourselves.

Of course, don't forget that the sub-Idio, the one we're keeping an
eye on for this test will itself be merrily forking and running jobs
as we exercise all the variations above.  Don't get too lost!

(*) We ought to (be able to) test by running a complete Idio external
process to load and execute the test code but Idio isn't the fastest
starting piece of code ever.  We don't have all day!

In the meanwhile, ASAN will get upset if we call libc/exit rather than
Idio/exit.

    ***

We'll have a generic testing function to do the forking and running.
The actual test code will be in files, as usual, and the sub-Idio will
simply load those files and... react.

*#

job-control-error-load := {
  n := 0

  function/name job-control-error-load (filename exp) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "string" filename)

    n = n + 1

    exp-tests := 1

    test-report "loading #%s (async) %s looking for %s\n" n filename exp

    ; standard pipe lock
    jcel-lock := (libc/pipe)

    pid := (libc/fork)
    if (C/== pid libc/0pid_t) {
      libc/close (libc/pipe-writer jcel-lock)

      ;; block waiting for the parent to be ready
      libc/read (libc/pipe-reader jcel-lock) 1
      libc/close (libc/pipe-reader jcel-lock)

      ;; do or die!
      (symbol-value 'load 'Idio) filename

      ;; if we haven't already succumbed ensure we exit 0
      libc/exit 0
    } {
      libc/close (libc/pipe-reader jcel-lock)

      ;; release the Kraken^Wchild!
      libc/close (libc/pipe-writer jcel-lock)

      r := libc/waitpid pid C/0i
      st := pht r

      t0 := Tests

      (cond
       ((null? st) {
	 printf "%6d: status is null for pid=%d?? r=%s\n" PID pid r
       })
       ((libc/WIFEXITED st) {
	 test (list 'exit (libc/WEXITSTATUS st)) exp
       })
       ((libc/WIFSIGNALED st) {
	 test (list 'kill (libc/WTERMSIG st)) exp
       })
       (else {
	 printf "%6d: status is unknown for pid=%d?? r=%s\n" PID pid r
       }))

      if (not (equal? Tests (t0 + exp-tests))) {
	eprintf "job-control-error #%s: %s did not generate \"%s\"\n" n filename exp
	Errors = Errors + 1
	Tests = t0 + exp-tests
      }
    }
  }
}

#*

There's several issues with asynchronous commands.

1. We could do with checking they have done what they should have done
   when we run them.  This is particularly an issue for the *-into
   variants as they are nominal dead-ends.

   This is a fair old issue in itself as asynchronous commands don't
   generate any errors by default so we require that the asynchronous
   command create some marker that it has done its thing, something
   that the sub-Idio can test.

   If we make them write a string to a file and check the file's
   contents afterwards then the asynchronous commands will almost
   certainly will have to be compound commands.

2. We need to test that they fail correctly

   This isn't obvious as what *should* happen if the command {b} fails
   in "{ a; b; c; }"?  There'll be no error overall (it's an
   asynchronous command) but we should only see the output from {a},
   maybe something from {b} but definitely nothing from {c}.

3. We need to test that they are reaped by the sub-Idio.  This is
   particularly hard as there's no common mechanism across platforms
   for determining a process tree, so that we can discover the
   asynchronous command as a child of the sub-Idio, and subsequently
   that the child asynchronous command has died when the sub-Idio has
   died.

   This takes us on to a Bit of a Hack.  The sub-Idio *does* know what
   the asynchronous command's PGID is so we could do with that being
   reported back to us.  Unfortunately, we only get to know it after
   the asynchronous command has been launched (no prescience...yet)
   which means that the *test* has to report the PGID (and its own
   PID) back to us.  Definitely not Art!

   For this to work we can use Yet Another Pipeline Pipe (YAPP) which
   we'll open in the parent before forking and have this
   job-control-async-load function create the pipe handle to save a
   bit of work such that the test code can simply hprintf PID,PGID to
   it (and to us).

   We must create pid-ph as a top-level variable for it to be seen by
   the sub-Idio -- for the parent it doesn't matter -- because none of
   our names are in scope in the loaded code.  (Which is normally what
   you want but not in this case as we try to bridge the divide.)

   Once we have our pair of PIDs back, that of the sub-Idio and its
   child asynchronous command, we can run "ps -p <pids> -o pid=" which
   should give us a simple, unadulterated, list of those PIDs still
   going.  On all platforms (probably...oh, hello, NetBSD, who only
   takes a single PID as an argument).

   *Any* still going is a bad thing.

*#

pid-ph := #f

job-control-async-load := {
  n := 0

  function/name job-control-async-load (filename exp) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "string" filename)

    n = n + 1

    exp-tests := 2

    test-report "loading #%s %s looking for %s\n" n filename exp

    ; pipe for reporting PIDs
    pid-pipe := (libc/pipe)

    ; standard pipe lock
    jcal-lock := (libc/pipe)

    pid := (libc/fork)
    if (C/== pid libc/0pid_t) {
      libc/close (libc/pipe-writer jcal-lock)

      ;; block waiting for the parent to be ready
      libc/read (libc/pipe-reader jcal-lock) 1
      libc/close (libc/pipe-reader jcal-lock)

      libc/close (libc/pipe-reader pid-pipe)
      pid-ph = open-output-pipe (libc/pipe-writer pid-pipe)

      ;; in the tests we are deliberately encouraging asynchronous
      ;; command failures.  We don't need to hear about it.
      suppress-async-command-report! = #t

      ;; do or die!
      (symbol-value 'load 'Idio) filename

      ;; if we haven't already succumbed ensure we exit 0
      libc/exit 0
    } {
      libc/close (libc/pipe-reader jcal-lock)

      ;; release the Kraken^Wchild!
      libc/close (libc/pipe-writer jcal-lock)

      libc/close (libc/pipe-writer pid-pipe)
      pid-ph := open-input-pipe (libc/pipe-reader pid-pipe)

      pids := read-line pid-ph
      close-handle pid-ph

      r := libc/waitpid pid
      st := pht r

      ;; we're about to use collect-output to test collect-output --
      ;; look the other way!

      ;; we want to suppress-async-command-report! because we know
      ;; ps(1) will exit non-zero if the pids do not exist
      sacr := suppress-async-command-report!
      suppress-async-command-report! = #t
      running-pids := ""
      (cond-expand
       ("uname/sysname/NetBSD" {
	 for pid in (split-string pids ",") {
	   running-pids = append-string running-pids (collect-output ps -p pid -o pid=)
	 }
       })
       (else {
	 running-pids = collect-output ps -p pids -o pid=
       }))
      suppress-async-command-report! = sacr

      t0 := Tests

      test running-pids ""
      if (not (string=? running-pids "")) {
	printf "can still see %s of %s\n" running-pids pids
	oseoe := suppress-exit-on-error!
	suppress-exit-on-error! = #t
	(cond-expand
	 ("uname/sysname/NetBSD" {
	   for pid in (split-string pids ",") {
	     ps -p pid
	   }
	 })
	 (else {
	   ps -p running-pids
	 }))
	suppress-exit-on-error! = oseoe
      }

      (cond
       ((null? st) {
	 printf "\n****\n"
	 printf "%6d: async status is null for pid=%d; ENOCHILD?? r=%s\n" PID pid r
       })
       ((libc/WIFEXITED st) {
	 test (list 'exit (libc/WEXITSTATUS st)) exp
       })
       ((libc/WIFSIGNALED st) {
	 test (list 'kill (libc/WTERMSIG st)) exp
       })
       (else {
	 printf "%6d: async status is unknown for pid=%d?? r=%s\n" PID pid r
       }))

      if (not (equal? Tests (t0 + exp-tests))) {
	eprintf "job-control-async #%s: %s did not generate \"%s\"\n" n filename exp
	Errors = Errors + 1
	Tests = t0 + exp-tests
      }
    }
  }
}

#*

some distinguishing exit statuses: broadly, the child could call exit
or be killed by a signal.

exit 0		-- default
exit 3-6	-- exits under error conditions
exit 9		-- not default and not mistakable for "normal" exits
kill USR1	-- not caught(?) and not SIGTERM
kill PIPE	-- pipeline issues
kill TERM	-- terminal signal
      
exit 3-6 are used when we want to demonstrate a distinct exit under
various error conditions.  We'll be expecting one of them and the
others are distinct to aide debugging.

Strictly, "terminal" signals include SIGUSR1, as that's its default
disposition: see signal(7).  This may change depending on if we follow
down the Bash route of trapping all known "terminal" signals across
all platforms in order that we can shutdown cleanly.

Maybe we should but... we don't.  We only handle SIGHUP and SIGTERM
cleanly.

SIGUSR1 is used in the first batch of scripts to check that Idio will
successfully fall on its sword in the same manner as its child process
did, in this case for a signal.

Also some initialisms for when these are enabled in the scripts:

seoe	- suppress-exit-on-error!
sp	- suppress-pipefail!

For suppress-*! we can use that fallback (exit 3) to demonstrate that
we "passed beyond" the error, because of the suppresion, and are still
in control such that we can have a controlled exit.

exit 4 and exit 5 can be used in compound pipelines to see if we've
fallen off the end of processing in the "shouldn't get here" sense.
We don't handle them in any way as the main job-control-error-load
function will flag them up as not being the expected result.

*#

exit-0 := list 'exit C/0i
exit-3 := list 'exit (C/integer-> 3)
exit-4 := list 'exit (C/integer-> 4)
exit-5 := list 'exit (C/integer-> 5)
exit-6 := list 'exit (C/integer-> 6)
exit-9 := list 'exit (C/integer-> 9)
kill-USR1 := list 'kill libc/SIGUSR1
kill-PIPE := list 'kill libc/SIGPIPE
kill-TERM := list 'kill libc/SIGTERM

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; simple commands - run a command which could be some Idio or an
;; external command and could be a simple (single?) command or a
;; compound block of code

;; Here we're just checking that the sub-Idio successfully exits in
;; the same way as its script did.

job-control-error-load "job-control-errors/simple-Idio-simple-exit-0.idio" exit-0
job-control-error-load "job-control-errors/simple-Idio-simple-exit-9.idio" exit-9
job-control-error-load "job-control-errors/simple-Idio-simple-kill-USR1.idio" kill-USR1

job-control-error-load "job-control-errors/simple-Idio-compound-exit-0.idio" exit-0
job-control-error-load "job-control-errors/simple-Idio-compound-exit-9.idio" exit-9
job-control-error-load "job-control-errors/simple-Idio-compound-kill-USR1.idio" kill-USR1

job-control-error-load "job-control-errors/simple-external-simple-exit-0.idio" exit-0
job-control-error-load "job-control-errors/simple-external-simple-exit-9.idio" exit-9
job-control-error-load "job-control-errors/simple-external-simple-exit-9-seoe.idio" exit-3
job-control-error-load "job-control-errors/simple-external-simple-kill-USR1.idio" kill-USR1
job-control-error-load "job-control-errors/simple-external-simple-kill-USR1-seoe.idio" exit-3

job-control-error-load "job-control-errors/simple-external-compound-exit-0.idio" exit-0
job-control-error-load "job-control-errors/simple-external-compound-exit-9.idio" exit-9
job-control-error-load "job-control-errors/simple-external-compound-exit-9-seoe-global.idio" exit-3
;job-control-error-load "job-control-errors/simple-external-compound-exit-9-seoe-local.idio" exit-3
job-control-error-load "job-control-errors/simple-external-compound-kill-USR1.idio" kill-USR1
job-control-error-load "job-control-errors/simple-external-compound-kill-USR1-seoe.idio" exit-3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; pipelines

;; pipelines become a bit more complicated as we have (at least) an
;; LHS and an RHS and either of them could fail (SIGPIPEs come later)

job-control-error-load "job-control-errors/pipeline-Idio-simple-exit-0-Idio-simple-exit-0.idio" exit-0

job-control-error-load "job-control-errors/pipeline-Idio-simple-exit-9-Idio-simple-exit-0.idio" exit-9
job-control-error-load "job-control-errors/pipeline-Idio-simple-exit-9-Idio-simple-exit-0-sp.idio" exit-3
job-control-error-load "job-control-errors/pipeline-Idio-simple-exit-9-Idio-simple-exit-0-seoe.idio" exit-3

job-control-error-load "job-control-errors/pipeline-Idio-simple-exit-0-Idio-simple-exit-9.idio" exit-9
job-control-error-load "job-control-errors/pipeline-Idio-simple-exit-0-Idio-simple-exit-9-sp.idio" exit-9
job-control-error-load "job-control-errors/pipeline-Idio-simple-exit-0-Idio-simple-exit-9-seoe.idio" exit-3

;; Idio-compound arguments: we could go for the complete
;; simple/compound combination set but let's just go with compound |
;; compound
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-0-Idio-compound-exit-0.idio" exit-0

job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-9-Idio-compound-exit-0.idio" exit-9
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-9-Idio-compound-exit-0-sp.idio" exit-3
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-9-Idio-compound-exit-0-seoe.idio" exit-3

job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-0-Idio-compound-exit-9.idio" exit-9
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-0-Idio-compound-exit-9-sp.idio" exit-9
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-0-Idio-compound-exit-9-seoe.idio" exit-3

;; simple (single?) external commands
job-control-error-load "job-control-errors/pipeline-external-simple-exit-0-external-simple-exit-0.idio" exit-0

job-control-error-load "job-control-errors/pipeline-external-simple-exit-9-external-simple-exit-0.idio" exit-9
job-control-error-load "job-control-errors/pipeline-external-simple-exit-9-external-simple-exit-0-sp.idio" exit-3
job-control-error-load "job-control-errors/pipeline-external-simple-exit-9-external-simple-exit-0-seoe.idio" exit-3

job-control-error-load "job-control-errors/pipeline-external-simple-exit-0-external-simple-exit-9.idio" exit-9
job-control-error-load "job-control-errors/pipeline-external-simple-exit-0-external-simple-exit-9-sp.idio" exit-9
job-control-error-load "job-control-errors/pipeline-external-simple-exit-0-external-simple-exit-9-seoe.idio" exit-3

;; compound external commands: more realistic, here, as we're pitting
;; Idio against external as well as external against external.  Let's
;; be comprehensive.

;; Idio compound | external compound
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-0-external-compound-exit-0.idio" exit-0

job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-9-external-compound-exit-0.idio" exit-9
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-9-external-compound-exit-0-sp.idio" exit-3
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-9-external-compound-exit-0-seoe.idio" exit-3

job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-0-external-compound-exit-9.idio" exit-9
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-0-external-compound-exit-9-sp.idio" exit-9
job-control-error-load "job-control-errors/pipeline-Idio-compound-exit-0-external-compound-exit-9-seoe.idio" exit-3

;; external compound | Idio compound
job-control-error-load "job-control-errors/pipeline-external-compound-exit-0-Idio-compound-exit-0.idio" exit-0

job-control-error-load "job-control-errors/pipeline-external-compound-exit-9-Idio-compound-exit-0.idio" exit-9
job-control-error-load "job-control-errors/pipeline-external-compound-exit-9-Idio-compound-exit-0-sp.idio" exit-3
job-control-error-load "job-control-errors/pipeline-external-compound-exit-9-Idio-compound-exit-0-seoe.idio" exit-3

job-control-error-load "job-control-errors/pipeline-external-compound-exit-0-Idio-compound-exit-9.idio" exit-9
job-control-error-load "job-control-errors/pipeline-external-compound-exit-0-Idio-compound-exit-9-sp.idio" exit-9
job-control-error-load "job-control-errors/pipeline-external-compound-exit-0-Idio-compound-exit-9-seoe.idio" exit-3

;; external compound | external compound
job-control-error-load "job-control-errors/pipeline-external-compound-exit-0-external-compound-exit-0.idio" exit-0

job-control-error-load "job-control-errors/pipeline-external-compound-exit-9-external-compound-exit-0.idio" exit-9
job-control-error-load "job-control-errors/pipeline-external-compound-exit-9-external-compound-exit-0-sp.idio" exit-3
job-control-error-load "job-control-errors/pipeline-external-compound-exit-9-external-compound-exit-0-seoe.idio" exit-3

job-control-error-load "job-control-errors/pipeline-external-compound-exit-0-external-compound-exit-9.idio" exit-9
job-control-error-load "job-control-errors/pipeline-external-compound-exit-0-external-compound-exit-9-sp.idio" exit-9
job-control-error-load "job-control-errors/pipeline-external-compound-exit-0-external-compound-exit-9-seoe.idio" exit-3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; SIGPIPEs - requires LHS be compound to include a delay

#*

The delay is because these SIGPIPE tests are foreground pipelines so
we can't use a locking pipe to (quickly?) coordinate timing as the
pipe, opened in the parent, remains open in the parent until the
pipeline completes.  Which the pipeline now can't because the lock is
being held open by the parent.

We need the LHS to delay for long enough for the RHS to exit and thus
generate the SIGPIPE when the LHS writes to stdout.  How long?  Long
enough for the RHS to exit, obviously!

No, I don't know how long is enough either but something less than the
standard "sleep 1" otherwise we'll be here all day!

Enter poll(2) where we can poller-poll for POLLPRI on STDOUT_FILENO
which we shouldn't get(*).  In the meanwhile, when the read-end closes
we'll get a POLLERR on STDOUT_FILENO and away we go to SIGPIPE city.

The only moot point, here, is the timeout(**) or, rather, who is
calling us as we're assuming we are in a pipeline.  If we're not and
we simply want to delay then we need a (the original) simple delay
function as well.

A timeout of 1000 works well enough for my dev box except when running
under valgrind.  So bump it up to 5000.

(*) So SunOS, the *BSDs and Mac OS X return POLLHUP and Mac OS X also
    returns POLLPRI.

(**) On top of that, OpenBSD doesn't appear to return these flags
     within the timeout -- so an infinite timeout is very long indeed.


*#

define (job-control-pipeline-delay n) {
  poller := make-poller (list STDOUT_FILENO POLLPRI)
  r := poller-poll poller n

  if (null? r) {
    (cond-expand
     (IDIO_DEBUG {
       eprintf "[%d] job-control-pipeline-delay: nothing from poll\n" PID
     })
     (else #t))
  } {
    for pp in r {
      if (not (or (POLLERR? (pht pp))
		  (POLLHUP? (pht pp)))) {
	eprintf "[%d] job-control-pipeline-delay: %s is not POLLERR/POLLHUP?\n" PID pp
      }
    }
  }
}

job-control-error-load "job-control-errors/pipeline-Idio-compound-SIGPIPE-Idio-simple-exit-0.idio" kill-PIPE
job-control-error-load "job-control-errors/pipeline-Idio-compound-SIGPIPE-Idio-simple-exit-0-sp.idio" exit-3
job-control-error-load "job-control-errors/pipeline-Idio-compound-SIGPIPE-Idio-simple-exit-0-seoe.idio" exit-3

job-control-error-load "job-control-errors/pipeline-external-compound-SIGPIPE-external-simple-exit-0.idio" kill-PIPE
job-control-error-load "job-control-errors/pipeline-external-compound-SIGPIPE-external-simple-exit-0-sp.idio" exit-3
job-control-error-load "job-control-errors/pipeline-external-compound-SIGPIPE-external-simple-exit-0-seoe.idio" exit-3

job-control-error-load "job-control-errors/pipeline-external-compound-SIGPIPE-external-compound-exit-0.idio" kill-PIPE
job-control-error-load "job-control-errors/pipeline-external-compound-SIGPIPE-external-compound-exit-0-sp.idio" exit-3
job-control-error-load "job-control-errors/pipeline-external-compound-SIGPIPE-external-compound-exit-0-seoe.idio" exit-3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Asynchronous commands - several flavours

#*

The pipe-into variants need to write the text they are given to a file
which is subsequently read back in to confirm the message was
delivered correctly.

---

The nominal exit-9-early named-pipe-into variants actually have
two (race condition) outcomes:

* if the child is suitably delayed then the parent can write to and
  close the pipe before the child exits

  We won't get the expected output, because the child will
  exit-9-early, but we won't get any errors in the parent.

* if the child runs before the parent it can exit 9 before the parent
  gets round to doing much in which case the pipe will be closed by
  tidy-process-substitution-job underneath the parent's feet.

  It is that (asynchronous close) that results in anomalous
  errors (fcntl, ^i/o-closed-error, SIGPIPE, etc.) depending on how
  far the parent has reached.

To force the beaviour either way -- this is for ease of testing -- we
can use the pipe lock trick and append -child or -parent to the test
name for when the child or parent process is favoured.

*#

define (job-control-write-line-to opn msg) {
  trap (^system-error
	^i/o-no-such-file-error) (function (c) {
				    ;; exit 5 if the test failed in
				    ;; the way we expect because
				    ;; tidy-process-substitution-job
				    ;; closed the FD or removed the
				    ;; FIFO
				    (cond
				     ((system-error? c) {
				       e := (system-error-errno c)
				       (cond
					((C/== e libc/EBADF) {
					  libc/exit 5
					})
					(else {
					  condition-report "jcwlt" c

					  libc/exit 7
					}))
				     })
				     ((i/o-no-such-file-error? c) {
				       libc/exit 5
				     }))
				    condition-report "jcwlt" c

				    libc/exit 8
	}) {
    oph := open-output-file opn

    ;; FIFOs can result in oph being #f
    if oph {
      hprintf oph msg
      close-handle oph
    }
  }
}

define (job-control-read-line-from ipn) {
  trap (^system-error
	^i/o-no-such-file-error) (function (c) {
				    ;; exit 5 or 6 if the test failed
				    ;; in the way we expect because
				    ;; tidy-process-substitution-job
				    ;; closed the FD or removed the
				    ;; FIFO
				    (cond
				     ((system-error? c) {
				       e := (system-error-errno c)
				       (cond
					((C/== e libc/EBADF) {
					  libc/exit 5
					})
					((C/== e libc/EAGAIN) {
					  libc/exit 6
					})
					(else {
					  condition-report "jcrlf" c

					  libc/exit 7
					}))
				     })
				     ((i/o-no-such-file-error? c) {
				       libc/exit 5
				     }))
				    condition-report "jcrlf" c

				    libc/exit 8
	}) {
    iph := open-input-file ipn

    ;; FIFOs can result in iph being #f
    msg := #f
    if iph {
      ;; read-line is not EAGAIN-aware which we require for FIFOs so
      ;; we pick up EAGAIN in the trap
      msg = read-line iph
      close-handle iph
    }
    msg
  }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pipe-into
job-control-async-load "job-control-errors/simple-pipe-into-Idio-compound-exit-0.idio" exit-0

job-control-async-load "job-control-errors/simple-pipe-into-Idio-compound-exit-9-early-child.idio" exit-4
job-control-async-load "job-control-errors/simple-pipe-into-Idio-compound-exit-9-early-parent.idio" exit-4

;; late is after it wrote the msg to testfile so we can't distinguish it from nominal success
job-control-async-load "job-control-errors/simple-pipe-into-Idio-compound-exit-9-late.idio" exit-0

job-control-async-load "job-control-errors/simple-pipe-into-external-compound-exit-0.idio" exit-0
job-control-async-load "job-control-errors/simple-pipe-into-external-compound-exit-9-early-child.idio" exit-4
job-control-async-load "job-control-errors/simple-pipe-into-external-compound-exit-9-early-parent.idio" exit-4

;; late is after it wrote the msg to testfile so we can't distinguish it from nominal success
job-control-async-load "job-control-errors/simple-pipe-into-external-compound-exit-9-late.idio" exit-0

job-control-async-load "job-control-errors/pipeline-pipe-into-external-compound-exit-0-external-compound-exit-0.idio" exit-0

job-control-async-load "job-control-errors/pipeline-pipe-into-external-compound-exit-9-early-external-compound-exit-0.idio" exit-3
job-control-async-load "job-control-errors/pipeline-pipe-into-external-compound-exit-9-late-external-compound-exit-0.idio" exit-0

job-control-async-load "job-control-errors/pipeline-pipe-into-external-compound-exit-0-external-compound-exit-9-early.idio" exit-4
job-control-async-load "job-control-errors/pipeline-pipe-into-external-compound-exit-0-external-compound-exit-9-late.idio" exit-0

; here the RHS quits early (causing a SIGPIPE for the LHS) and we get
; exit-4 because the RHS didn't create the expected file
job-control-async-load "job-control-errors/pipeline-pipe-into-external-compound-SIGPIPE-Idio-compound-exit-0.idio" exit-4
job-control-async-load "job-control-errors/pipeline-pipe-into-external-compound-SIGPIPE-external-compound-exit-0.idio" exit-4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; named-pipe-into
job-control-async-load "job-control-errors/simple-named-pipe-into-Idio-compound-exit-0.idio" exit-0

(cond-expand
 ((not /dev/fd) {
   ;; FreeBSD gets a SIGPIPE once it has opened the named pipe
   job-control-async-load "job-control-errors/simple-named-pipe-into-Idio-compound-exit-9-early-child.idio" kill-PIPE
 })
 (else {
   job-control-async-load "job-control-errors/simple-named-pipe-into-Idio-compound-exit-9-early-child.idio" exit-5
 }))
job-control-async-load "job-control-errors/simple-named-pipe-into-Idio-compound-exit-9-early-parent.idio" exit-4

;; late is after it wrote the msg to testfile so we can't distinguish it from nominal success
job-control-async-load "job-control-errors/simple-named-pipe-into-Idio-compound-exit-9-late.idio" exit-0

job-control-async-load "job-control-errors/simple-named-pipe-into-external-compound-exit-0.idio" exit-0
(cond-expand
 ((not /dev/fd) {
   ;; FreeBSD gets a SIGPIPE once it has opened the named pipe
   job-control-async-load "job-control-errors/simple-named-pipe-into-external-compound-exit-9-early-child.idio" kill-PIPE
 })
 (else {
   job-control-async-load "job-control-errors/simple-named-pipe-into-external-compound-exit-9-early-child.idio" exit-5
 }))
job-control-async-load "job-control-errors/simple-named-pipe-into-external-compound-exit-9-early-parent.idio" exit-4

;; late is after it wrote the msg to testfile so we can't distinguish it from nominal success
job-control-async-load "job-control-errors/simple-named-pipe-into-external-compound-exit-9-late.idio" exit-0

job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-exit-0-external-compound-exit-0.idio" exit-0

(cond-expand
 ((not /dev/fd) {
   job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-exit-9-early-child-external-compound-exit-0.idio" kill-PIPE
 })
 (else {
   job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-exit-9-early-child-external-compound-exit-0.idio" exit-5
 }))
job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-exit-9-early-parent-external-compound-exit-0.idio" exit-3
job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-exit-9-late-external-compound-exit-0.idio" exit-0

job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-exit-0-external-compound-exit-9-early-child.idio" exit-4
job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-exit-0-external-compound-exit-9-early-parent.idio" exit-4
job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-exit-0-external-compound-exit-9-late.idio" exit-0

; here the RHS quits early (causing a SIGPIPE for the LHS) and we get
; exit-4 because the RHS didn't create the expected file
job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-SIGPIPE-Idio-compound-exit-0.idio" exit-4
job-control-async-load "job-control-errors/pipeline-named-pipe-into-external-compound-SIGPIPE-external-compound-exit-0.idio" exit-4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; pipe-from
job-control-async-load "job-control-errors/simple-pipe-from-Idio-compound-exit-0.idio" exit-0

job-control-async-load "job-control-errors/simple-pipe-from-Idio-compound-exit-9-early.idio" exit-3

;; late is after it wrote the msg to testfile so we can't distinguish it from nominal success
job-control-async-load "job-control-errors/simple-pipe-from-Idio-compound-exit-9-late.idio" exit-0

job-control-async-load "job-control-errors/simple-pipe-from-external-compound-exit-0.idio" exit-0
job-control-async-load "job-control-errors/simple-pipe-from-external-compound-exit-9-early.idio" exit-3

;; late is after it wrote the msg to testfile so we can't distinguish it from nominal success
job-control-async-load "job-control-errors/simple-pipe-from-external-compound-exit-9-late.idio" exit-0

job-control-async-load "job-control-errors/pipeline-pipe-from-external-compound-exit-0-external-compound-exit-0.idio" exit-0
job-control-async-load "job-control-errors/pipeline-pipe-from-external-compound-exit-9-early-external-compound-exit-0.idio" exit-3
job-control-async-load "job-control-errors/pipeline-pipe-from-external-compound-exit-9-late-external-compound-exit-0.idio" exit-0

job-control-async-load "job-control-errors/pipeline-pipe-from-external-compound-exit-0-external-compound-exit-9-early.idio" exit-3
job-control-async-load "job-control-errors/pipeline-pipe-from-external-compound-exit-0-external-compound-exit-9-late.idio" exit-0

; here the RHS quits early (causing a SIGPIPE for the LHS) and we get
; exit-4 because the RHS didn't create the expected file
job-control-async-load "job-control-errors/pipeline-pipe-from-external-compound-SIGPIPE-Idio-compound-exit-0.idio" exit-3
job-control-async-load "job-control-errors/pipeline-pipe-from-external-compound-SIGPIPE-external-compound-exit-0.idio" exit-3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; named-pipe-from

job-control-async-load "job-control-errors/simple-named-pipe-from-Idio-compound-exit-0.idio" exit-0

(cond-expand
 (/dev/fd {
   job-control-async-load "job-control-errors/simple-named-pipe-from-Idio-compound-exit-9-early-child.idio" exit-5
 })
 (else {
   job-control-async-load "job-control-errors/simple-named-pipe-from-Idio-compound-exit-9-early-child.idio" exit-3
 }))
job-control-async-load "job-control-errors/simple-named-pipe-from-Idio-compound-exit-9-early-parent.idio" exit-3

;; late is after it wrote the msg to testfile so we can't distinguish it from nominal success
job-control-async-load "job-control-errors/simple-named-pipe-from-Idio-compound-exit-9-late.idio" exit-0

job-control-async-load "job-control-errors/simple-named-pipe-from-external-compound-exit-0.idio" exit-0
(cond-expand
 ("uname/sysname/SunOS" {
   ;; SunOS doesn't seem to mind reading from the named pipe when the
   ;; write end process has gone away.
   job-control-async-load "job-control-errors/simple-named-pipe-from-external-compound-exit-9-early-child.idio" exit-5
 })
 (/dev/fd {
   job-control-async-load "job-control-errors/simple-named-pipe-from-external-compound-exit-9-early-child.idio" exit-5
 })
 (else {
   job-control-async-load "job-control-errors/simple-named-pipe-from-external-compound-exit-9-early-child.idio" exit-3
 }))
job-control-async-load "job-control-errors/simple-named-pipe-from-external-compound-exit-9-early-parent.idio" exit-3

;; late is after it wrote the msg to testfile so we can't distinguish it from nominal success
job-control-async-load "job-control-errors/simple-named-pipe-from-external-compound-exit-9-late.idio" exit-0

job-control-async-load "job-control-errors/pipeline-named-pipe-from-external-compound-exit-0-external-compound-exit-0.idio" exit-0
job-control-async-load "job-control-errors/pipeline-named-pipe-from-external-compound-exit-9-early-external-compound-exit-0.idio" exit-3
job-control-async-load "job-control-errors/pipeline-named-pipe-from-external-compound-exit-9-late-external-compound-exit-0.idio" exit-0

job-control-async-load "job-control-errors/pipeline-named-pipe-from-external-compound-exit-0-external-compound-exit-9-early.idio" exit-3
job-control-async-load "job-control-errors/pipeline-named-pipe-from-external-compound-exit-0-external-compound-exit-9-late.idio" exit-0

; here the RHS quits early (causing a SIGPIPE for the LHS) and we get
; exit-4 because the RHS didn't create the expected file
job-control-async-load "job-control-errors/pipeline-named-pipe-from-external-compound-SIGPIPE-Idio-compound-exit-0.idio" exit-3
job-control-async-load "job-control-errors/pipeline-named-pipe-from-external-compound-SIGPIPE-external-compound-exit-0.idio" exit-3

;; all done?
Tests? (job-control0 + 187)
