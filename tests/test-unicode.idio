;;
;; Copyright (c) 2020-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-unicode.idio
;;

#*

As a reminder, UTF-8 is, in effect, a run-length encoding where
Unicode has mandated that the maximum length is four bytes.

On the other hand, in this file, we refer to the internal Idio
encoding of strings as arrays of Unicode code points which we maintain
as arrays of 1 or 2 or 4 bytes depending on the width of the largest
code point we see.

So a UTF-8 encoding of code points between U+0800 and U+FFFF will be 3
bytes but will go into a 4-byte array.

*#

unicode-test0 := Tests
import unicode

test (unicode? 0)			#f ; FIXNUM
test (unicode? #t)			#f ; CONSTANT
test (unicode? #\a)			#t ; UNICODE
test (unicode? "a")			#f ; STRING
test (unicode? 'a)			#f ; SYMBOL
test (unicode? :a)			#f ; KEYWORD
test (unicode? (pair 1 2))		#f ; PAIR
test (unicode? #[])			#f ; ARRAY
test (unicode? #{})			#f ; HASH
test (unicode? (function #n #n))	#f ; CLOSURE
test (unicode? pair)			#f ; PRIMITIVE
test (unicode? 1.0)			#f ; BIGNUM
test (unicode? (find-module 'Idio))	#f ; MODULE
test (unicode? (current-input-handle))	#f ; HANDLE
test (unicode? ^error)			#f ; STRUCT_TYPE
test (unicode? char-set:letter)		#f ; STRUCT_INSTANCE
test (unicode? #B{ 3 })			#f ; BITSET
test (unicode? libc/INT_MAX)		#f ; C_INT
test (unicode? libc/UINT_MAX)		#f ; C_UINT
test (unicode? <class>)			#f ; instance

test (unicode->plane #U+65)    0
test (unicode->plane #U+fffd)  0
test (unicode->plane #U+10000) 1

test (unicode->plane-codepoint #U+65)    #x65
; #xfffd is a big number in decimal that no-one will recognize so
; we'll use, uh, #xfffd as the expected result
test (unicode->plane-codepoint #U+fffd)  #xfffd
test (unicode->plane-codepoint #U+10000) 0

test (unicode->integer #U+65)     #x65
test (unicode->integer #\A)       65
test (unicode->integer #\{nul})   0
test (unicode->integer #\{space}) 32

test (integer->unicode 0)    #U+0
test (integer->unicode 65)   #\A
test (integer->unicode 32)   #\{space}
test (integer->unicode 65.0) #\A

test (unicode? (integer->unicode 0)) #t

test (unicode=? #\+ #\+) #t
test (unicode=? #\+ #\-) #f
test (unicode=? #\A #\A) #t
test (unicode=? #\A #\a) #f
test (unicode=? #\a #\A) #f
test (unicode=? #\a #\a) #t
test (unicode=? #\a #\a #\a) #t
test (unicode=? #\a #\a #\b #\a) #f

; some named codepoints
test (unicode=? #U+0 #\{nul}) #t
test (unicode=? #\{nul} #U+0) #t
; ASCII C0 and C escapes can overlap
test (unicode=? #\{bel} #\{alarm} #U+7) #t
test (unicode=? #\{bs} #\{backspace} #U+8) #t

; multiple names for some
test (unicode=? #\{del} #\{delete} #U+7f) #t

; some specials
test (unicode=? #\{{} #\{lbrace} #U+7b) #t

; unicode.idio interfaces

; Derived Property: Alphabetic
;  Generated from: Uppercase + Lowercase + Lt + Lm + Lo + Nl + Other_Alphabetic

; These examples are the first in UnicodeData.txt/PropList.txt!

; Uppercase (Lu) - 0041;LATIN CAPITAL LETTER A
test (Alphabetic? #\A)       #t
; Lowercase (Ll) - 0061;LATIN SMALL LETTER A
test (Alphabetic? #\a)       #t
; Lt (Titlecase letter) - U+01C5;LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON
test (Alphabetic? #U+01c5)   #t
; Lm (Modifier letter) - 02B0;MODIFIER LETTER SMALL H
test (Alphabetic? #U+02b0)   #t
; Lo (Other letter) - 00AA;FEMININE ORDINAL INDICATOR
test (Alphabetic? #U+aa)     #t
; Nl (Letter number) - 16EE;RUNIC ARLAUG SYMBOL
test (Alphabetic? #U+16EE)   #t
; Other_Alphabetic - 0345;COMBINING GREEK YPOGEGRAMMENI
test (Alphabetic? #U+0345)   #t

; some things that are not Alphabetic
; White_Space - 0020;SPACE (technically, U+0009 is first!)
test (Alphabetic? #\{space}) #f
; Terminal_Punctuation - 0021;EXCLAMATION MARK
test (Alphabetic? #\!)       #f
; Hex_Digit - 0030;DIGIT ZERO
test (Alphabetic? #\0)       #f
; Diacritic - 005E;CIRCUMFLEX ACCENT
test (Alphabetic? #U+5E)     #f

test (Decimal_Number?	#\0)     #t
test (Decimal_Number?	#U+0030) #t
test (Decimal_Number?	#\a)     #f
test (Decimal_Number?	#\-)     #f
; Nl (Letter number) - 16EE;RUNIC ARLAUG SYMBOL
test (Decimal_Number?	#U+16EE) #f

test (White_Space? #\0)                   #f
test (White_Space? #\a)                   #f
test (White_Space? #\ )                   #t
test (White_Space? #\{space})             #t
test (White_Space? #U+0020)               #t
test (White_Space? (integer->unicode 32)) #t
test (White_Space? #\{newline})           #t
test (White_Space? #U+000A)               #t
test (White_Space? (integer->unicode 10)) #t

test (->Lowercase #\a) #\a
test (->Lowercase #\A) #\a
test (->Lowercase #\!) #\!
test (->Lowercase #\0) #\0

test (Lowercase? #\a) #t
test (Lowercase? #\A) #f
test (Lowercase? #\!) #f
test (Lowercase? #\0) #f

test (->Uppercase #\a) #\A
test (->Uppercase #\A) #\A
test (->Uppercase #\!) #\!
test (->Uppercase #\0) #\0

test (Uppercase? #\a) #f
test (Uppercase? #\A) #t
test (Uppercase? #\!) #f
test (Uppercase? #\0) #f

c1 := #U+130				; 0130;LATIN CAPITAL LETTER I WITH DOT ABOVE
test (Uppercase? c1) #t
test (Lowercase? c1) #f
c2 := ->Lowercase c1			; 0069;LATIN SMALL LETTER I
test (Uppercase? c2) #f
test (Lowercase? c2) #t
c3 := ->Uppercase c2			; 0049;LATIN CAPITAL LETTER I
test (Uppercase? c3) #t
test (Lowercase? c3) #f
c4 := ->Lowercase c3			; 0069;LATIN SMALL LETTER I
test (Uppercase? c4) #f
test (Lowercase? c4) #t

;; start with a Titlecase character, neither upper nor lower case!
l1 := #U+01C8				; 01C8;LATIN CAPITAL LETTER L WITH SMALL LETTER J
test (Uppercase? l1) #f
test (Lowercase? l1) #f
; force the upcase conversion from Titlecase!
l2 := ->Uppercase l1			; 01C7;LATIN CAPITAL LETTER LJ
test (Uppercase? l2) #t
test (Lowercase? l2) #f
l3 := ->Lowercase l2			; 01C9;LATIN SMALL LETTER LJ
test (Uppercase? l3) #f
test (Lowercase? l3) #t
l4 := ->Uppercase l3			; 01C7;LATIN CAPITAL LETTER LJ
test (Uppercase? l4) #t
test (Lowercase? l4) #f

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Idio Unicode tests

;; gcc prints some words bookended with U+2018 and U+2019 which has
;; annoyed me no end...
str := "‘stack’"

test (string-length str) 7
c := string-ref str 0
test (unicode? c) #t
test c #U+2018
test str.0 #U+2018
test str.1 #\s
test str.6 #U+2019

;; 1-byte encoding (all code points < 0x80)

;; test # formats give the same value
test (unicode? #U+0041) #t
test (unicode? #U+003A) #t
test (unicode? #U+003a) #t
test (unicode? #\A) #t
test #U+0041 #\A
test #U+3A #U+3a

;; U+0041 LATIN CAPITAL LETTER A
c = #U+0041
test (unicode? c) #t
str = make-string 10 c
test (string? str) #t
test (string-length str) 10
test str.4 #\A

;; U+0000 <control> NULL -- aka ASCII control character, NUL -- this,
;; of course, is perfectly valid Unicode so we should be able to pass
;; a string of these around like, uh, normal.
c = #U+00
test (unicode? c) #t
str = make-string 10 c
test (string? str) #t
test (string-length str) 10
test str.4 #U+0

;; bounce the NUL around inside a constructed string
delim := make-string 1 c
; "hello[NUL]world"
str = join-string delim '("hello" "world")
test (string? str) #t
test (string-length str) 11
test str.4 #\o
test str.5 #U+0
test str.6 #\w

;; '("he" "o[NUL]wor" "d")
sa := split-string str "l"

test (string-length sa.0) 2
test (string-length sa.1) 5
sa2 := sa.1
test sa2.0 #\o
test sa2.1 #U+0
test sa2.2 #\w

;; U+00FF LATIN SMALL LETTER Y WITH DIAERESIS -- this, if read as a
;; byte with getc, is -1 if it is compared to EOF in C.  So this
;; should catch some of those cases.
c = #U+00FF
test (unicode? c) #t
str = make-string 10 c
test (string? str) #t
test (string-length str) 10
test str.4 #U+0000FF			; we allow any hex number...

;; 2-byte encoding (0xff < all code points <= 0xffff)

;; U+0127 LATIN SMALL LETTER H WITH STROKE
c = #U+0127
test (unicode? c) #t
str = make-string 10 c
test (string? str) #t
test (string-length str) 10
test str.4 #U+127			; we allow U+h .. U+hhhhhh

;; embed a 2-byte string in a 1-byte string
delim = make-string 1 c
str = join-string delim '("hello" "world")
test (string-length str) 11
sa = split-string str "l"

test (string-length sa.0) 2
test (string-length sa.1) 5
sa2 := sa.1
test sa2.0 #\o
test sa2.1 #U+0127
test sa2.2 #\w

;; 4-byte encoding (any code point > 0xFFFF)

;; U+1FBF8 SEGMENTED DIGIT 8
c = #U+1FBF8
test (unicode? c) #t
str = make-string 10 c
test (string? str) #t
test (string-length str) 10
test str.4 #U+1FBF8

;; embed a 4-byte string in a 1-byte string
delim = make-string 1 c
str = join-string delim '("hello" "world")
test (string-length str) 11
sa = split-string str "l"

test (string-length sa.0) 2
test (string-length sa.1) 5
sa2 := sa.1
test sa2.0 #\o
test sa2.1 #U+1FBF8
test sa2.2 #\w

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; a bit of code coverage

; string->list and string-set! have 6 variants which are
; string/substring and 1/2/4 byte code points.  Clearly we can do the
; tests for string then take a substring of the string and repeat the
; command.

; Also repeat the string/substring comparision tests forward and back
; for coverage.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 1-byte code points
c = #\h
str = make-string 2 c
string->list str
string-set! str 0 #\i
test str "ih"

; we'll test end and not-end escapes -- a "short" (ie. not two hex
; digit) \x escape is tricky to actually test as the exemplar string
; is just as hard to generate!  Remember, #\a is a possible hex digit
; and #\z is not.
test "\x69a" "ia"
test "\x6z" (append-string (make-string 1 #U+6) "z")
test "a\x69" "ai"
test "a\x6" (append-string "a" (make-string 1 #U+6))
test "\u0069a" "ia"
test "\u69z" "iz"
test "a\u69" "ai"
test "\U00000069a" "ia"
test "\U69z" "iz"
test "a\U69" "ai"

ss := substring str 0 1
string->list ss
string-set! ss 0 #\j
test ss "j"
test "j" ss				; args reversed
test str "jh"

; a quick code coverage for string-fill! and substrings while we're
; here...
string-fill! ss #\k
test ss "k"
test str "kh"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 2-byte code points
c = #U+127
str = make-string 2 c
string->list str
string-set! str 0 #U+129		; LATIN SMALL LETTER I WITH TILDE
test (string-ref str 0) #U+129

; after the end/not-end including \x tests above we now want to do
; code coverage of the possible 2-byte Unicode code points
test "\u0135a" "ĵa"			; LATIN SMALL LETTER J WITH CIRCUMFLEX
test "\u135z" "ĵz"
test "a\u135" "aĵ"
test "\U00000135a" "ĵa"
test "\U135z" "ĵz"
test "a\U135" "aĵ"

; test case insensitivity while we're here
test "\uF06z" "༆z"			; TIBETAN MARK CARET YIG MGO PHUR SHAD MA
test "a\Uf06" "a༆"

ss := substring str 0 1
string->list ss
string-set! ss 0 #U+135			; LATIN SMALL LETTER J WITH CIRCUMFLEX
test (string-ref ss 0) #U+135
test ss "ĵ"
test "ĵ" ss				; args reversed
test (string-ref str 0) #U+135
test str "ĵħ"

; coverage: 2-byte substring copy
copy-string ss

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 4-byte code points
c = #U+1FBF8
str = make-string 2 c
string->list str
string-set! str 0 #U+1FBF1		; SEGMENTED DIGIT 1
test (string-ref str 0) #U+1FBF1
test str "🯱🯸"				; "18"

; cannot use \u for 5 hex digits
test "\U1fbf7z" "🯷z"
test "a\U1fbf7" "a🯷"

ss := substring str 0 1
string->list ss
string-set! ss 0 #U+1FBF7		; SEGMENTED DIGIT 7
test (string-ref ss 0) #U+1FBF7
test ss "🯷"				; "7"
test "🯷" ss				; args reversed
test (string-ref str 0) #U+1FBF7
test str "🯷🯸"				; "78"

; coverage: 4-byte substring copy
test (copy-string ss) ss

; Hmm, somehow a call using putc and a 4-byte UTF-8 sequence has
; escaped us
osh := (open-output-string)
write-char #U+10000 osh
close-handle osh

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; append-string returns the empty string if supplied with no args
test (append-string) ""

; substring of a substring
str = "hello"
ss = substring str 1 4			; "ell"
test (string-length ss) 3
test ss "ell"
sss := substring ss 1 2			; "l"
test (string-length sss) 1
test sss "l"

; split-string without the delimiter
str = "hello world"
test (split-string str ":") (list str)
test (split-string str "") (list str)
test (split-string "" "foo") (list "")
test (split-string str "d") (list "hello worl")
delim = "delim"
ss = substring delim 0 1
test (split-string str ss) (list "hello worl")

str = ":a::b:"
test (split-string str ":") '("a" "b")
;test (split-string-exactly str ":") '("a" "" "b")

; split-string with 2 and 4 byte code points for both the string and
; the delimiter

; 2-byte delim in (nominally) 1-byte strings
c = #U+127
delim = make-string 1 c
str = join-string delim '("hello" "world") ; str is 2-byte because of delim
test (string-length str) 11
test str "helloħworld"
sa = split-string str delim
test sa.0 "hello"			; sa.1 is a 2-byte string
test sa.1 "world"			; sa.2 is a 2-byte string

; again for a substring of str
ss = substring str 1 ((string-length str) - 1)
test (string-length ss) 9
test ss "elloħworl"
sa = split-string ss delim
test sa.0 "ello"
test sa.1 "worl"

; 4-byte delim in (nominally) 1-byte strings
c = #U+1FBF8
delim = make-string 1 c
str = join-string delim '("hello" "world") ; str is 4-byte because of delim
test (string-length str) 11
test str "hello🯸world"
sa = split-string str delim
test sa.0 "hello"			; sa.1 is a 4-byte string
test sa.1 "world"			; sa.2 is a 4-byte string

; again for a substring of str
ss = "bad data"
ss = substring str 1 ((string-length str) - 1)
test (string-length ss) 9
test ss "ello🯸worl"
sa = split-string ss delim
test sa.0 "ello"
test sa.1 "worl"

;; Unicode variable names

;; The reduced Planck constant is U+210F (PLANCK CONSTANT OVER TWO PI)
;; -- Wikipedia suggested it is the italic variant of ћ U+045B
;; (CYRILLIC SMALL LETTER TSHE) -- known as h-bar and is measured in
;; in J⋅s/radian
h-bar := 1.054571817e-34
ℏ := h-bar
test ℏ h-bar

;; Unicode interpolation characters
define-template (unicode-safe in) {
  ;; the unquote character is U+0127 meaning we should return the
  ;; value passed in
  #Tħ{
    ħin
  }
}

test (unicode-safe "foo") "foo"
test (unicode-safe "ħ") "ħ"

;; all done?
Tests? (unicode-test0 + 230)
