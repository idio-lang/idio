;;
;; Copyright (c) 2015, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-array.idio
;;
array0 := Tests

test (array? 0)				#f ; FIXNUM
test (array? #t)			#f ; CONSTANT
test (array? #\a)			#f ; UNICODE
test (array? "a")			#f ; STRING
test (array? 'a)			#f ; SYMBOL
test (array? :a)			#f ; KEYWORD
test (array? (pair 1 2))		#f ; PAIR
test (array? #[])			#t ; ARRAY
test (array? #{})			#f ; HASH
test (array? (function #n #n))		#f ; CLOSURE
test (array? pair)			#f ; PRIMITIVE
test (array? 1.0)			#f ; BIGNUM
test (array? (find-module 'Idio))	#f ; MODULE
test (array? (current-input-handle))	#f ; HANDLE
test (array? ^error)			#f ; STRUCT_TYPE
test (array? char-set:letter)		#f ; STRUCT_INSTANCE
test (array? #B{ 3 })			#f ; BITSET
test (array? libc/INTMAX_MAX)		#f ; C_INT
test (array? libc/UINTMAX_MAX)		#f ; C_UINT

a := (make-array 3)
test (array? a) #t
test (array-length a) 3
test (array-ref a 0) #f

a = (make-array 5 "foo")
test (array? a) #t
test (array-length a) 5
test (array-ref a 0) "foo"

a = make-array 1.0

;; copying
a = #[ 1 (2 3) ]

b := copy-array a 'shallow
test (array? b) #t
test (eq (array-length a) (array-length b)) #t
test (eq? a b) #f
test (equal? a b) #t

b := copy-array a 'deep
test (array? b) #t
test (eq (array-length a) (array-length b)) #t
test (eq? a b) #f
test (equal? a b) #t

; c has an extra element allocated but not used
c := copy-array a 'shallow 1
test (array? c) #t
test (eq (array-length a) (array-length c)) #t
test (eq? a c) #f
test (equal? a c) #t

; code coverage
c := copy-array a 'shallow 1.0
test (array? c) #t
test (eq (array-length a) (array-length c)) #t
test (eq? a c) #f
test (equal? a c) #t

;; basic array access
a = #[ 1 2 3 ]

test (array? a) #t
test a '#[ 1 2 3 ]

test (array-length a) 3
test (array-ref a 1) 2
test (array-ref a -1) 3
array-set! a 1 4
test (array-ref a 1) 4

; code coverage
array-ref a 1.0

;; generate some OOB errors
trap ^rt-array-error (function (c) {
			test (rt-array-error? c) #t
			#f
}) {
  array-ref a 4
  array-ref a -4
  array-set! a 99 "boo!"
  array-set! a -99 "boo!"

  ;; referencing into an empty array
  a = #[]

  ; will fail -- no elements
  array-ref a 0

  ; will fail, trying to insert other than equivalent to a push
  array-set! a 1 "boo"

  ; we should be able to set the first, cf. push
  array-set! a 0 "woo"

  123456789
}

;; fill
a = #[ 1 2 3 ]
array-fill! a "apple"
test (array-length a) 3
test (array-ref a 1) "apple"
test (array-ref a 1) (array-ref a 0) 

;; from lists
a = list->array '(1 2 3)
test a '#[ 1 2 3 ]

;; to lists
test (array->list a) '( 1 2 3 )

;; array operator tests
a = #[ 1 2 3 ]

;; push
a =+ 'r
test a '#[ 1 2 3 r ]

;; pop
v := a =-
test v 'r
test a '#[ 1 2 3 ]

;; unshift
a += 'r
test a '#[ r 1 2 3 ]

;; shift
v = a -=
test v 'r
test a '#[ 1 2 3 ]

;; again with an empty array
a = #[]
test a '#[]

;; push
a =+ 'r
test a '#[ r ]

;; pop
v = a =-
test v 'r
test a '#[]

;; unshift
a += 'r
test a '#[ r ]

;; shift
v = a -=
test v 'r
test a '#[]

;; pop/shift of an empty array
v = a =-
test v #n
test a '#[]

v = a -=
test v #n
test a '#[]

;; array indexing
a = #[ 1 #[ 10 20 30 ] 3 ]

;; formatting
test (a.0) 1
test (a . 0) 1
test (a. 0) 1
test (a .0) 1

b := 2
test (a.b) 3
test (a.(1 + 1)) 3

test (a.1) '#[ 10 20 30 ]

;; a.1.1 looks like a . 1.1 so use whitespace or a variable instead of
;; any literal integer followed by a DOT
test (a . 1 . 1) 20
test (a.1 .1) 20

i := 1
test (a.i.i) 20
test (a.i.1) 20
test (a.(0 + 1).(0 + 1)) 20

;; setter
a = #[ 1 2 3 ]
set! a.0 4
test (a.0) 4
a.0 = 5
test (a.0) 5

a = #[ 1 #[ 10 20 30 ] 3 ]
a.1 .1 = 40
test (a.1 .1) 40

a = make-array 4
a.0 = 1
a.2 = 3
; a == #[ 1 #f 3 #f ]

test (fold-array a (function (i v val) {
		      if v {
			val + v
		      } {
			val
		      }
}) 0) 4

c := 0
array-for-each-set a (function (i v) {
			if v {
			  c = c + 1
			}
})
test c 2


;; all done?
Tests? (array0 + 92)
