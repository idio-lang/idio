;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-file-handle-error.idio
;;

module tests/file-handle-errors
export fd
import libc

file-handle-error0 := Tests
file-handle-error-skipped := 0

file-handle-error-load := {
  n := 0

  function/name file-handle-error-load (filename msg & args) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "string" filename)

    n = n + 1

    exp-tests := 1
    if (pair? args) {
      exp-tests = 2
    }

    test-report "loading #%s %s looking for %s\n" n filename msg
    trap (^i/o-error
	  ^rt-parameter-error
	  ^system-error
	  ^rt-environ-variable-error) (function (c) {
	    ;eprintf "file-handle-error #%s: %s %s\n" n msg (idio-error-location c)
	    test (idio-error-message c) msg

	    if (not (string=? (idio-error-message c) msg)) {
	      condition-report (append-string "file-handle-error-load: " filename) c (current-error-handle)
	    }

	    if (system-error? c) {
	      tested := #f
	      if (pair? args) {
		test (system-error-function c) (ph args)
		tested = #t
	      }

	      if (not tested) {
		condition-report (append-string "file-handle-error-load: " filename) c (current-error-handle)
	      }
	    }

	    trap-return #f
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "file-handle-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
    }
  }
}

fd := #f

file-handle-error-load "file-handle-errors/open-file-from-fd-bad-fd-type.idio" "bad parameter type: '#t' a constant is not a C/int"
file-handle-error-load "file-handle-errors/open-file-from-fd-filename-format.idio" "open-file-from-fd filename contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-file-from-fd-filename-PATH_MAX.idio" "malformed filename: name too long"
file-handle-error-load "file-handle-errors/open-file-from-fd-filename-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-file-from-fd-mode-format.idio" "open-file-from-fd mode contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-file-from-fd-mode-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-file-from-fd-mode-invalid.idio" "open-file-from-fd mode invalid"
file-handle-error-load "file-handle-errors/open-file-from-fd-mode-letter-invalid-1.idio" "open-file-from-fd mode invalid"
file-handle-error-load "file-handle-errors/open-file-from-fd-mode-letter-invalid-2.idio" "open-file-from-fd mode invalid"
file-handle-error-load "file-handle-errors/open-file-from-fd-mode-letter-inconsistent.idio" "open-file-from-fd mode file status flags inconsistent"
close fd

file-handle-error-load "file-handle-errors/open-input-file-from-fd-bad-fd-type.idio" "bad parameter type: '#t' a constant is not a C/int"
file-handle-error-load "file-handle-errors/open-input-file-from-fd-filename-format.idio" "open-input-file-from-fd filename contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-input-file-from-fd-filename-PATH_MAX.idio" "malformed filename: name too long"
file-handle-error-load "file-handle-errors/open-input-file-from-fd-filename-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-input-file-from-fd-mode-format.idio" "open-input-file-from-fd mode contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-input-file-from-fd-mode-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-input-file-from-fd-mode-invalid.idio" "open-input-file-from-fd mode invalid"
file-handle-error-load "file-handle-errors/open-input-file-from-fd-mode-letter-invalid-1.idio" "open-input-file-from-fd mode invalid"
file-handle-error-load "file-handle-errors/open-input-file-from-fd-mode-letter-invalid-2.idio" "open-input-file-from-fd mode invalid"
file-handle-error-load "file-handle-errors/open-input-file-from-fd-mode-letter-inconsistent.idio" "open-input-file-from-fd mode file status flags inconsistent"
close fd

file-handle-error-load "file-handle-errors/open-output-file-from-fd-bad-fd-type.idio" "bad parameter type: '#t' a constant is not a C/int"
file-handle-error-load "file-handle-errors/open-output-file-from-fd-filename-format.idio" "open-output-file-from-fd filename contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-output-file-from-fd-filename-PATH_MAX.idio" "malformed filename: name too long"
file-handle-error-load "file-handle-errors/open-output-file-from-fd-filename-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-output-file-from-fd-mode-format.idio" "open-output-file-from-fd mode contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-output-file-from-fd-mode-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-output-file-from-fd-mode-invalid.idio" "open-output-file-from-fd mode invalid"
file-handle-error-load "file-handle-errors/open-output-file-from-fd-mode-letter-invalid-1.idio" "open-output-file-from-fd mode invalid"
file-handle-error-load "file-handle-errors/open-output-file-from-fd-mode-letter-invalid-2.idio" "open-output-file-from-fd mode invalid"
file-handle-error-load "file-handle-errors/open-output-file-from-fd-mode-letter-inconsistent.idio" "open-output-file-from-fd mode file status flags inconsistent"
close fd

file-handle-error-load "file-handle-errors/open-input-pipe-bad-fd-type.idio" "bad parameter type: '#t' a constant is not a C/int"
file-handle-error-load "file-handle-errors/open-input-pipe-filename-format.idio" "open-input-pipe filename contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-input-pipe-filename-PATH_MAX.idio" "malformed filename: name too long"
file-handle-error-load "file-handle-errors/open-input-pipe-filename-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-input-pipe-mode-format.idio" "open-input-pipe mode contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-input-pipe-mode-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-input-pipe-mode-invalid.idio" "open-input-pipe mode invalid"
file-handle-error-load "file-handle-errors/open-input-pipe-mode-letter-invalid-1.idio" "open-input-pipe mode invalid"
file-handle-error-load "file-handle-errors/open-input-pipe-mode-letter-invalid-2.idio" "open-input-pipe mode invalid"
file-handle-error-load "file-handle-errors/open-input-pipe-mode-letter-inconsistent.idio" "open-input-pipe mode file status flags inconsistent"
close fd

file-handle-error-load "file-handle-errors/open-output-pipe-bad-fd-type.idio" "bad parameter type: '#t' a constant is not a C/int"
file-handle-error-load "file-handle-errors/open-output-pipe-filename-format.idio" "open-output-pipe filename contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-output-pipe-filename-PATH_MAX.idio" "malformed filename: name too long"
file-handle-error-load "file-handle-errors/open-output-pipe-filename-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-output-pipe-mode-format.idio" "open-output-pipe mode contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-output-pipe-mode-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-output-pipe-mode-invalid.idio" "open-output-pipe mode invalid"
file-handle-error-load "file-handle-errors/open-output-pipe-mode-letter-invalid-1.idio" "open-output-pipe mode invalid"
file-handle-error-load "file-handle-errors/open-output-pipe-mode-letter-invalid-2.idio" "open-output-pipe mode invalid"
file-handle-error-load "file-handle-errors/open-output-pipe-mode-letter-inconsistent.idio" "open-output-pipe mode file status flags inconsistent"
close fd

file-handle-error-load "file-handle-errors/open-file-mode-invalid.idio" "open-file mode invalid"
file-handle-error-load "file-handle-errors/open-file-mode-letter-invalid-1.idio" "open-file mode invalid"
file-handle-error-load "file-handle-errors/open-file-mode-letter-invalid-2.idio" "open-file mode invalid"

file-handle-error-load "file-handle-errors/file-handle-fd-bad-type.idio" "bad parameter type: '#t' a constant is not a file_handle"

file-handle-error-load "file-handle-errors/fd-handle-fd-bad-type.idio" "bad parameter type: '#t' a constant is not a fd_handle"

file-handle-error-load "file-handle-errors/pipe-handle-fd-bad-type.idio" "bad parameter type: '#t' a constant is not a pipe_handle"

file-handle-error-load "file-handle-errors/pipe-handle-seek.idio" "seek-handle method: seek not available"

tmpfile := (make-tmp-file)

;; ^i/o-file-protection-error
;;
;; NB. Nothing internally generates a ^i/o-file-is-read-only-error and
;; read-only issues are collected under the guise of protection errors
;; (EACCES)
'chmod \= tmpfile
if running-as-root {
  eprintf "NOTICE: EUID == 0: skipping 3 permission failure tests\n"
  file-handle-error-skipped = file-handle-error-skipped + 3
} {
  file-handle-error-load "file-handle-errors/open-file-protection.idio" "open-file: Permission denied"
  file-handle-error-load "file-handle-errors/open-input-file-protection.idio" "open-input-file: Permission denied"
  file-handle-error-load "file-handle-errors/open-output-file-protection.idio" "open-output-file: Permission denied"
}
'chmod +r tmpfile

;; ^i/o-file-already-exists-error
;;
;; Here we're calling open(2) with O_EXCL which is supported on all
;; platforms.  fopen(3) with the "x" mode flag is not supported on
;; OpenIndiana 1.5.1.
file-handle-error-load "file-handle-errors/open-file-exists.idio" "open-file: File exists"

;; ^i/o-filename-error
;;
;; This is slightly different to those above as it is the Operating
;; System generating the errors not us catching overly long filenames
;; in pre-checks.
file-handle-error-load "file-handle-errors/open-file-filename-PATH_MAX.idio" (append-string "open-file: " ENAMETOOLONG-str)
file-handle-error-load "file-handle-errors/open-input-file-filename-PATH_MAX.idio" (append-string "open-input-file: " ENAMETOOLONG-str)
file-handle-error-load "file-handle-errors/open-output-file-filename-PATH_MAX.idio" (append-string "open-output-file: " ENAMETOOLONG-str)

;; ^i/o-filename-error
;;
;; ie. none of the below.  Let's try ENOTDIR.  Opening a non-existent
;; directory name, eg.  ..../tmpfile, gets an ^i/o-no-such-file-error
;; so you seem to need to use an existing non-dir file in the position
;; of a directory (actually, much like the man page says...).  Here,
;; we'll use tmpfile in a directory component as ./tmpfile/tmpfile
file-handle-error-load "file-handle-errors/open-file-dirname-missing.idio" "open-file: Not a directory"
file-handle-error-load "file-handle-errors/open-input-file-dirname-missing.idio" "open-input-file: Not a directory"
file-handle-error-load "file-handle-errors/open-output-file-dirname-missing.idio" "open-output-file: Not a directory"

delete-file tmpfile

;; ^i/o-no-such-file-error
;;
;; NB fopen(3): "w" and "a" flags imply O_CREAT -- so this only works for "r" variants
file-handle-error-load "file-handle-errors/open-file-filename-missing.idio" "open-file: No such file or directory"
file-handle-error-load "file-handle-errors/open-input-file-filename-missing.idio" "open-input-file: No such file or directory"

;; Technically this could fail with EMFILE or ENFILE, depending on the
;; state of the system.
file-handle-error-load "file-handle-errors/EMFILE.idio" (strerror EMFILE) "open (final)"
(cond-expand
 ("uname/sysname/Darwin" {
   eprintf "XXX: Darwin: requiring extra GC collection\n"
   (gc/collect)
 }))

file-handle-error-load "file-handle-errors/open-file-filename-format.idio" "open-file filename contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-file-filename-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/open-file-mode-format.idio" "open-file mode contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-file-mode-type.idio" "bad parameter type: '#t' a constant is not a string"

file-handle-error-load "file-handle-errors/open-input-file-filename-format.idio" "open-input-file filename contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-input-file-filename-type.idio" "bad parameter type: '#t' a constant is not a string"

file-handle-error-load "file-handle-errors/open-output-file-filename-format.idio" "open-output-file filename contains an ASCII NUL"
file-handle-error-load "file-handle-errors/open-output-file-filename-type.idio" "bad parameter type: '#t' a constant is not a string"

file-handle-error-load "file-handle-errors/ready-handlep-closed-handle.idio" "handle already closed"
file-handle-error-load "file-handle-errors/ready-handlep-bad-handle.idio" "handle read error"

file-handle-error-load "file-handle-errors/close-closed-handle.idio" "handle already closed"

file-handle-error-load "file-handle-errors/lseek-negative-offset.idio" "Invalid argument" "lseek"

file-handle-error-load "file-handle-errors/close-fd-handle-on-exec-bad-type.idio" "bad parameter type: '#t' a constant is not a fd_handle"

OIDIOLIB := IDIOLIB
file-handle-error-load "file-handle-errors/find-lib-IDIOLIB-format.idio" "libfile-find: environment variable 'IDIOLIB' contains an ASCII NUL"
IDIOLIB = OIDIOLIB

file-handle-error-load "file-handle-errors/find-lib-bad-type.idio" "bad parameter type: '#t' a constant is not a string"

(cond-expand
 ("uname/sysname/SunOS" {
   ;; SunOS won't let you rmdir "." or any equivalent => EINVAL
   eprintf "NOTICE: SunOS: skipping test using rmdir .\n"
   file-handle-error-skipped = file-handle-error-skipped + 2
 })
 (else {
   cwd := (getcwd)
   file-handle-error-load "file-handle-errors/find-lib-getcwd-rmdir.idio" "No such file or directory" "getcwd"
   chdir cwd
 }))

file-handle-error-load "file-handle-errors/find-lib-abs-file-PATH_MAX.idio" ENAMETOOLONG-str "/file.idio libname length"

file-handle-error-load "file-handle-errors/find-lib-dir-lib-PATH_MAX-1.idio" ENAMETOOLONG-str "IDIOLIB+file.idio libname length"
IDIOLIB = OIDIOLIB

file-handle-error-load "file-handle-errors/find-lib-dir-lib-PATH_MAX-2.idio" ENAMETOOLONG-str "cwd+file.idio libname length"
IDIOLIB = OIDIOLIB

file-handle-error-load "file-handle-errors/find-lib-dir-lib-PATH_MAX-3.idio" ENAMETOOLONG-str "dir+file.idio libname length"
IDIOLIB = OIDIOLIB

file-handle-error-load "file-handle-errors/find-lib-format.idio" "find-lib filename contains an ASCII NUL"

file-handle-error-load "file-handle-errors/load-format.idio" "load filename contains an ASCII NUL"
file-handle-error-load "file-handle-errors/load-not-found.idio" "load: No such file or directory"

file-handle-error-load "file-handle-errors/delete-file-bad-type.idio" "bad parameter type: '#t' a constant is not a string"
file-handle-error-load "file-handle-errors/delete-file-format.idio" "delete-file filename contains an ASCII NUL"

if running-as-root {
  file-handle-error-load "file-handle-errors/delete-file-EACCESS.idio" "remove: No such file or directory"
} {
  file-handle-error-load "file-handle-errors/delete-file-EACCESS.idio" "remove: Permission denied"
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; dynamic load extension code coverage

;; This requires creating variously broken dynamically loaded
;; extensions.  We'll take a copy of the very simple {empty} extension
;; and badly rebuild it as {foo-bar}

filename := "foo-bar"

extension-error-load := {
  n := 0

  function/name extension-error-load (msg & args) {
    n = n + 1

    exp-tests := 1
    if (pair? args) {
      exp-tests = 2
    }

    test-report "loading #%s %s looking for %s\n" n filename msg
    trap (^i/o-error
	  ^system-error
	  ^rt-load-error) (function (c) {
			     ;eprintf "file-handle-error #%s: %s %s\n" n msg (idio-error-location c)
			     test (idio-error-message c) msg

			     if (not (string=? (idio-error-message c) msg)) {
			       condition-report (append-string "extension-error-load: " filename) c (current-error-handle)
			     }

			     if (system-error? c) {
			       tested := #f
			       if (pair? args) {
				 test (system-error-function c) (ph args)
				 tested = #t
			       }

			       if (not tested) {
				 condition-report (append-string "extension-error-load: " filename) c (current-error-handle)
			       }
			     }

			     trap-return #f
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "extension-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
	  }
  }
}

OPWD := PWD

tmpdir := (libc/make-tmp-dir)

path-prepend 'IDIOLIB tmpdir

;; (findlib "empty") =>
;; ".../lib/idio/{idio-ver}/empty/{empty-ver}/{ARCH}/libempty.so" from
;; which we want "..."
subdir := #S{lib/idio/${IDIO_MM_VERSION}}
parts := regexec (regcomp #S!{(.*)/!{subdir}/empty/[^/]+/[^/]+/[^/]+$}) (find-lib "empty")
dirs := #f
if parts {
  {
    libc/chdir (append-string parts.1 "/" subdir)
    tar cf '- empty
  } | {
    libc/chdir tmpdir
    tar xf '-
  }

  libc/chdir tmpdir
  ; make a authoritative source copy of empty
  mv "empty" "empty.0"

  ;; create module foo-bar, a copy of empty

  ;; {mod}/latest does not exist
  cp -r "empty.0" "foo-bar"
  rm "foo-bar/latest"

  extension-error-load "load: No such file or directory"

  ;; {mod}/latest is more than our guesstimate of a max 10 bytes --
  ;; here including a newline -- but this is only a warning
  echo "1234567890" > "foo-bar/latest"

  ;; we actually want to make the file unreadable
  'chmod 0 "foo-bar/latest"

  if running-as-root {
    eprintf "NOTICE: EUID == 0: skipping 1 permission failure test\n"
    file-handle-error-skipped = file-handle-error-skipped + 2
  } {
    extension-error-load "Permission denied" "open"
  }

  ;; now it isn't of the form {mod}@{mod-ver}
  'chmod a+r,u+w "foo-bar/latest"

  extension-error-load "find-lib: no @ in \"1234567890\n\""

  ;; now it's the wrong {mod} in {mod}@{mod-ver}
  cp "empty.0/latest" "foo-bar/latest"

  extension-error-load "find-lib: wrong module in \"empty@1.0\n\""

  ;; now it's a non-existent {mod-ver} in {mod}@{mod-ver}
  echo "foo-bar@9.9" > "foo-bar/latest"

  extension-error-load "find-lib: module version doesn't exist \"foo-bar@9.9\""

  ;; now there isn't an {ARCH}
  rm -rf "foo-bar"
  cp -r "empty.0" "foo-bar"
  sed -i -e "s/empty/foo-bar/" "foo-bar/latest"

  ;; This should be [:digit:] but FreeBSD and Mac OS X aren't so
  ;; keen -- careful, Bash supports it but glob(3) doesn't
  arch-dir-pattern := append-string "foo-bar/[0-9]*/" IDIO_SYSTEM_ARCH
  dirs = make-struct-instance ~path arch-dir-pattern
  if (null? dirs) {
    eprintf "test-file-handle-error: failed to match %s\n" arch-dir-pattern
    ls -l "foo-bar"
    exit 1
  }
  arch-dir := nth dirs 0
  arch-dir-0 := append-string arch-dir ".0"
  mv arch-dir arch-dir-0

  extension-error-load "load: No such file or directory"

  ;; now there is an {ARCH} but the wrong .so (libempty.so not libfoo-bar.so)
  mv arch-dir-0 arch-dir

  extension-error-load "load: No such file or directory"

  ;; IDIO_DEBUG -- this test leaves a GC-protected object lying
  ;; about.  Nothing critical except for the warning from a debug
  ;; build.

  ;; the right libfoo-bar.so (OK, linked to libempty.so.1) but
  ;; therefore the wrong idio_init_NAME symbol
  mv (append-string arch-dir "/libempty.so") (append-string arch-dir "/libfoo-bar.so")

  extension-error-load "dlsym: idio_init_foo_bar"

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Separately, we defend against an *extension* being loaded more
  ;; than once to avoid the C code initialising itself more than
  ;; once.
  load "empty"
  filename = "empty"

  extension-error-load "duplicate module: already loaded"
} {
  eprintf "test-file-handle-error: failed to match for empty.so in IDIOLIB=%s\n" IDIOLIB
  eprintf "looking for subdir=%s in (find-lib \"empty\")=%s\n" subdir (find-lib "empty")
  exit 1
}

libc/chdir OPWD
rm -rf tmpdir

IDIOLIB = OIDIOLIB

;; all done?
Skipped = Skipped + file-handle-error-skipped
Tests? (file-handle-error0 + 113 - file-handle-error-skipped)
