;;
;; Copyright (c) 2015, 2017, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-hash.idio
;;
hash0 := Tests

test (hash? 0)				#f ; FIXNUM
test (hash? #t)				#f ; CONSTANT
test (hash? (integer->char 1))		#f ; CHARACTER (deprecated)
test (hash? #\a)			#f ; UNICODE
test (hash? "a")			#f ; STRING
test (hash? 'a)				#f ; SYMBOL
test (hash? :a)				#f ; KEYWORD
test (hash? (pair 1 2))			#f ; PAIR
test (hash? #[])			#f ; ARRAY
test (hash? #{})			#t ; HASH
test (hash? (function #n #n))		#f ; CLOSURE
test (hash? pair)			#f ; PRIMITIVE
test (hash? 1.0)			#f ; BIGNUM
test (hash? (find-module 'Idio))	#f ; MODULE
test (hash? (current-input-handle))	#f ; HANDLE
test (hash? ^error)			#f ; STRUCT_TYPE
test (hash? char-set:letter)		#f ; STRUCT_INSTANCE
test (hash? #B{ 3 })			#f ; BITSET
test (hash? libc/INTMAX_MAX)		#f ; C_INT
test (hash? libc/UINTMAX_MAX)		#f ; C_UINT

;; hash operator tests
ht := (make-hash)

test (hash-size ht) 0
test (hash-exists? ht 'a) #f

hash-set! ht 'a 3
test (hash-size ht) 1
test (hash-exists? ht 'a) #t
test (hash-ref ht 'a) 3

trap ^rt-hash-key-not-found-error (function (c) {
			       test (rt-hash-key-not-found-error? c) #t
			       #f
}) {
  test (hash-ref ht 'b) #f
}

default := function () 99

test (hash-ref ht 'b default) 99

hash-set! ht 'b 5
test (hash-ref ht 'b default) 5

;; hash-update!
add10 := function (v) {
  v + 10
}

hash-update! ht 'a add10
test (hash-ref ht 'a) 13

hash-update! ht 'c add10 default
test (hash-ref ht 'c) 109

hash-delete! ht 'a
test (hash-size ht) 2
test (hash-exists? ht 'a) #f

hash-delete! ht 'd
test (hash-size ht) 2

;; no guaranteed order so can only count
test (length (hash-keys ht)) 2
test (length (hash-values ht)) 2

;; hash-walk
sum := 0
addv := function (k v) {
	  sum = sum + v
}

;; we should have b and c in the hash with values 5 and 109
hash-walk ht addv
test sum 114

;; fold-hash
accv := function (k v i) {
	  i + v
}

test (fold-hash ht accv 0) 114

;; copy-hash
nht := copy-hash ht

test (hash-size nht) 2
test (fold-hash nht accv 0) 114

hash-set! nht 'a 3
test (hash-size nht) 3
test (fold-hash nht accv 0) 117

;; check we have not changed ht
test (hash-size ht) 2
test (fold-hash ht accv 0) 114

;; merge-hash
ht = merge-hash! ht nht
test (hash-size ht) 3
test (fold-hash ht accv 0) 117

;; Other forms of creation:

;; alist->hash
ht = alist->hash '((b & 5) (c & 109))
test (hash-exists? ht 'a) #f
test (hash-exists? ht 'b) #t
test (hash-size ht) 2
test (fold-hash ht accv 0) 114

;; #{ ... }
ht = #{ (b & 5) (c & 109) }
test (hash-exists? ht 'a) #f
test (hash-exists? ht 'b) #t
test (hash-size ht) 2
test (fold-hash ht accv 0) 114

;; equivalence functions

;; default is the C-land equal? and we'll get the symbol back
ht = (make-hash)
test (hash-equivalence-function ht) 'equal?

;; same default if you pass #n
ht = (make-hash #n)
test (hash-equivalence-function ht) 'equal?

;; same default if you pass the symbol 'equal?
ht = (make-hash 'equal?)
test (hash-equivalence-function ht) 'equal?

;; use C-land eq?
ht = (make-hash 'eq?)
test (hash-equivalence-function ht) 'eq?

;; use our own: define an integer comparator
;;
;; Remember the default key is #n so we will be asked to compare #n
;; several times.  Catch those and return #f.
;;
;; Explicitly catch non-integers and raise a continuable
;; ^rt-parameter-type-error -- as the C code for {==} generates
;; non-continuable conditions
ht-integer-eq? := function (k1 k2) {
		    cond (((null? k1) or
			  (null? k2)) #f) \
			 ((not (integer? k1)) {
			   c := make-condition ^rt-parameter-type-error "k1 is not an integer" 'ht-integer-eq? k1
			   raise c
			 }) \
			 ((not (integer? k2)) {
			   c := make-condition ^rt-parameter-type-error "k2 is not an integer" 'ht-integer-eq? k2
			   raise c
			 }) \
			 (else (eq k1 k2))
}

ht = make-hash ht-integer-eq?
test (hash-equivalence-function ht) ht-integer-eq?

;; make sure it works!
hash-set! ht 1 "apple"
hash-set! ht 2 "banana"
test (hash-size ht) 2
test (hash-exists? ht 1) #t
test (hash-exists? ht 3) #f
test (hash-ref ht 2) "banana"

;; Make sure it fails!  That is to say, check we are actually using
;; our hash equivalence function.

;; Note that this is *not* the hashing function.  We are using the
;; default hashing function which doesn't care if keys are integers or
;; not.  In other words we can insert, say, *characters* as keys quite
;; happily.  The hash equivalence function will come into play when a
;; clash between keys at an index needs to be checked.

;; That was true until I fixed the idio_verify_chain code to actually
;; use the equivalence function whereon we *immediately* fail during
;; verification of a non-integer key, albeit after insertion of said
;; key.  The verification error raises a generic ^idio-error.

;; NB key collisions can occur several times so check to only
;; increment the test count once
done_verify := #f
done_param := #f

trap (^rt-parameter-type-error ^idio-error) \
     (function (c) {
	if (idio-error? c) {
	  if (not done_verify) {
	    test #t #t
	    done_verify = #t
	  }

	  ;; return #t (as though from ht-integer-eq?) so that
	  ;; idio_hash_verify_chain doesn't re-raise an error
	  #t
	} {
	  if (not done_param) {
	    test #t #t
	    done_param = #t
	  }

	  ;; return #f (as though from ht-integer-eq?)
	  #f
	}
     }) {
  i := 65

  hash-set! ht i "integer"
  test ht.i "integer"

  c := integer->unicode i

  hash-set! ht c "character"

  ;; a test was incremented in the trap but we can test again for good
  ;; measure
  test ht.c "character"
}

;; if we copy the hash we should copy the equivalence function

;; NB get a fresh hash (with our equivalence function) as the existing
;; one is full of character keys that generate errors during the copy
ht = make-hash ht-integer-eq?
hash-set! ht 1 "apple"
hash-set! ht 2 "banana"

nht = copy-hash ht
test (hash-equivalence-function nht) ht-integer-eq?

;; hashing functions

;; default is the C-land idio_hash_hashval and we'll get the #n symbol
;; back
ht = (make-hash)
test (hash-hash-function ht) #n

;; same default if you pass #n
ht = (make-hash #n #n)
test (hash-hash-function ht) #n

;; use our own: define a numeric hashing function
;;
;; Explicitly catch non-integers and raise ^rt-parameter-type-error --
;; as the C code for {remainder} generates non-continuable
;; ^rt-parameter-type-error conditions
ht-integer-hash := {
  bound := (expt 2 29) - 3

  function (v) {
    if (not (integer? v)) {
      c := make-condition ^rt-parameter-type-error "not an integer" 'ht-integer-hash v

      ;; WARNING: our trap handler (below) will return 0 as the result
      ;; of this {raise}.  Hence we cannot fall through to the call to
      ;; {remainder} as it will still generate a non-cont
      ;; ^rt-parameter-type-error as {v} is unchanged.
      ;;
      ;; This {raise} must be the final clause of ht-integer-hash so
      ;; that it, in turn, returns the 0.
      ;;
      ;;   Or we could assign to {v} or something but at this point we
      ;;   know we've failed (and set {done} in the trap handler) so
      ;;   there's no point in any further calculation.  Return
      ;;   whatever the trap handler gave us and be done with it.
      raise c
    } {
      remainder v bound
    }
  }
}

ht = make-hash #n ht-integer-hash
test (hash-hash-function ht) ht-integer-hash

;; make sure it works!
hash-set! ht 1 "apple"
hash-set! ht 2 "banana"
test (hash-size ht) 2
test (hash-exists? ht 1) #t
test (hash-exists? ht 3) #f
test (hash-ref ht 2) "banana"

;; Make sure it fails!  That is to say, check we are actually using
;; it.

;; Here we want to provoke the ht-integer-hash into producing an
;; error, an ^rt-parameter-type-error in particular, because we're
;; trying to insert a character as a key when ht-integer-hash only
;; works with integers.

;; Note that this trap handler returns 0 (zero) to the {raise} in
;; {ht-integer-hash} which, in turn returns it to the internals of
;; {hash-set!}.  So even though {ht-integer-hash} only works with
;; integers and correctly raised an error we have told it to shut up
;; and use 0 regardless.

;; If you judiciously add debug statements to this you might realise
;; that more than one trap gets raised (probably).  This is because
;; when we calculate our index in the hash we potentially need to
;; follow a chain.  So we call the hashing function once to determine
;; which chain to follow.  Is it is a non-zero chain you *should* end
;; up with an out-of-hash-index.  That means that we have to call the
;; hashing function again in the parent (dumb, I know) to decide how
;; to insert this key within the chain.  We then call at least two
;; verify_chain functions, each of which calls the hashing function on
;; our key in the chain.

done := #f
trap ^rt-parameter-type-error (function (c) {
				 ;; be called several times when a key collides in which case we'll
				 ;; get an error raised several times.
				 if (not done) {
				   test #t #t
				   ;; set done
				   done = #t
				 }

				 ;; return 0 (to ht-integer-hash, which returns it to the internals
				 ;; of hash-set!)
				 0
}) {
  i := 65
  c := integer->unicode i
  hash-set! ht c "carrot"

  test (hash-exists? ht i) #f
  test (hash-exists? ht c) #t
}

;; if we copy the hash we should copy the hash function

;; NB get a fresh hash (with our hash function) as the existing one is
;; full of character keys that generate errors during the copy
ht = make-hash #n ht-integer-hash
hash-set! ht 1 "apple"
hash-set! ht 2 "banana"

nht = copy-hash ht
test (hash-hash-function nht) ht-integer-hash

;; hash index operators
test (ht.1) "apple"
test (ht . 1) "apple"
test (ht. 1) "apple"
test (ht .1) "apple"

b := 2
test (ht.b) "banana"
test (ht.(1 + 1)) "banana"

hash-set! ht 1 #{ ("cat" & 10) ("dog" & 20) }
test (ht.1 ."cat") 10

test (hash-exists? ht.1 "elephant") #f

;; setter
set! ht.2 "carrot"
test (ht.2) "carrot"
ht.4 = "durian"
test (ht.4) "durian"

ht = #{ (1 & "apple") (2 & #{ ("cow" "beef") ("sheep" "lamb")}) }
ht.2 ."pig" = "pork"
test (ht.2 ."pig") "pork"

;; (comment not relevant any more but worth keeping the test) dumb
;; equality bug in idio_hash_verify_chain -- the second use of the
;; (non-integer) key would trigger a key not found error.
ht."one" = 1
ht."one" = 2

test ht."one" 2

;; code coverage: substring
ss := substring "hello world" 0 5
hash-set! ht ss 2
test (hash-ref ht ss) 2

;; code coverage: module
m := find-module 'Idio
hash-set! ht m 3
test (hash-ref ht m) 3

;; code coverage: C/int
hash-set! ht libc/INTMAX_MAX 4
test (hash-ref ht libc/INTMAX_MAX) 4

;; code coverage: C/uint
hash-set! ht libc/UINTMAX_MAX 4
test (hash-ref ht libc/UINTMAX_MAX) 4

;; code coverage: delete non-existent thing
hash-delete! ht "bob"

;; code coverage: the symbol table is a hash table with string keys
st := (symbols)

;; code coverage: an eqv? hash -- although they're nearly impossible
;; to use
ht := make-hash 'eqv?
test (hash-equivalence-function ht) 'eqv?

;; code coverage: copy depth
test (hash-equivalence-function (copy-hash ht 'deep)) 'eqv?
test (hash-equivalence-function (copy-hash ht 'shallow)) 'eqv?

;; all done?
Tests? (hash0 + 97)
