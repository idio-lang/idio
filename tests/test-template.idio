;;
;; Copyright (c) 2020 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-template.idio
;;
template0 := Tests

x-sym := 'x
x-str := symbol->string x-sym
x-list := '(1 2)

;; Scheme-ly backquote, unquote, unquote-splicing
test `x-sym 'x-sym
test `,x-sym 'x
test `(list ,x-sym) '(list x)
test `,x-list '(1 2)
test `(,x-list) '((1 2))
test `(,@x-list) '(1 2)
test `',x-list ''(1 2)

;; Idio template, dereference
test #T{ x-sym } 'x-sym
test #T{ $x-sym } 'x

;; vary the delimiters
test #T{ (list $x-sym) } '(list x)
test #T( (list $x-sym) ) '(list x)

;; dereference-splicing
test #T{ $x-list } '(1 2)
test #T{ ($x-list) } '((1 2))
test #T{ ($@x-list) } '(1 2)

;; vary the interpolation sigils: dereference sigil
test #T%{ %x-sym } 'x
test #T%{ (%@x-list) } '(1 2)

;; vary the interpolation sigils: dereference-splicing sigil
test #T.%{ $x-sym } 'x
test #T.%{ %x-sym } '%x-sym
test #T.%{ ($@x-list) } '(@x-list)
test #T.%{ ($%x-list) } '(1 2)

;; vary the interpolation sigils: dereference and dereference-splicing sigil

;; This test should be to '$x-sym but the "$" is read as the default
;; "," (ie. unquote)
test #T%^{ $x-sym } (string->symbol "$x-sym")
test #T%^{ %x-sym } 'x
test #T%^{ (%@x-list) } '(@x-list)
test #T%^{ (%^x-list) } '(1 2)

;; vary the interpolation sigils: quoting sigil
test #T..%{ $x-sym } 'x
test #T..%{ %x-sym } ''x-sym
test #T..%{ %$x-list } ''(1 2)
test #T..%{ %($@x-list) } ''(1 2)

;; vary the interpolation sigils: escape sigil
test #T...%{ $x-sym } 'x
test #T...%{ ($@x-list) } '(1 2)
test #T...%{ (1 + 2) } '(binary-+ 1 2)
test #T...%{ (1 %+ 2) } '(1 \+ 2)

;; all done?
Tests? (template0 + 32)
