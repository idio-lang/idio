;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-vars-error.idio
;;

vars-error0 := Tests

#*

We have a bunch of test cases which should provoke a
^rt-parameter-error.  So we can write a load function which will
wrapper the actual load with a trap for ^rt-parameter-error and
compare the message strings.

*#

vars-error-load := {
  n := 0

  function/name vars-error-load (filename msg) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "string" filename)

    n = n + 1

    exp-tests := 1

    ;eprintf "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-parameter-error) (function (c) {
      ;eprintf "vars-error #%s: %s %s\n" n msg (idio-error-location c)
      test (idio-error-message c) msg

      if (not (string=? (idio-error-message c) msg)) {
	condition-report (append-string "vars-error-load: " filename) c (current-error-handle)
      }
      
      trap-return 'vars-error
    }) {
      t0 := Tests
      (symbol-value 'load 'Idio) filename
      if (not (equal? Tests (t0 + exp-tests))) {
	eprintf "vars-error #%s: %s did not generate \"%s\"\n" n filename msg
	Errors = Errors + 1
	Tests = t0 + exp-tests
      }
    }
  }
}

vars-error-load "vars-errors/RANDOM-set-float.idio" "RANDOM seed='1.1e+0' a bignum is not a integer bignum"
vars-error-load "vars-errors/RANDOM-set-bad-type.idio" "bad parameter type: '#t' a constant is not a integer C/uint|fixnum|bignum"

;; all done?
Tests? (vars-error0 + 2)
