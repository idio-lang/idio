;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-libc-poll-error.idio
;;

module tests/libc-poll
import libc

libc-poll-error0 := Tests

#*

We have a bunch of test cases which should provoke a ^rt-libc-error,
^system-error or ^rt-parameter-error.  So we can write a load function
which will pollper the actual load with a trap for
(^rt-libc-error ...) and compare the message strings.

*#

libc-poll-error-load := {
  n := 0

  function/name libc-poll-error-load (filename msg & args) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "string" filename)

    n = n + 1

    exp-tests := 1
    if (pair? args) {
      exp-tests = 3
    }

    test-report "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-libc-error
	  ^system-error
	  ^rt-parameter-error
	  ^rt-hash-key-not-found-error) (function (c) {
	    ;eprintf "libc-poll-error #%s: %s %s\n" n msg (idio-error-location c)
	    test (idio-error-message c) msg

	    if (not (string=? (idio-error-message c) msg)) {
	      condition-report (append-string "libc-poll-error-load: " filename) c (current-error-handle)
	    }

	    if (system-error? c) {
	      tested := #f
	      if (pair? args) {
		test (system-error-errno c) (ph args)
		if (pair? (pt args)) {
		  test (system-error-function c) (pht args)
		  tested = #t
		}
	      } 

	      if (not tested) {
		condition-report (append-string "libc-poll-error-load: " filename) c (current-error-handle)
	      }
	    }

	    trap-return 'libc-poll-error
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "libc-poll-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
    }
  }
}

poller := (make-poller)

libc-poll-error-load "libc-poll-errors/poller-register-bad-poller-type.idio" "bad parameter type: '#t' a constant is not a C/pointer"
libc-poll-error-load "libc-poll-errors/poller-register-invalid-poller-pointer-type.idio" "poller-register poller='#<C/* C/pointer>' a C/pointer is not a struct idio_libc_poller_s"
libc-poll-error-load "libc-poll-errors/poller-register-bad-fdh-type.idio" "bad parameter type: '#t' a constant is not a fd-handle|C/int"
libc-poll-error-load "libc-poll-errors/poller-register-bad-eventmask-list-type.idio" "bad parameter type: '#t' a constant is not a C_int"
libc-poll-error-load "libc-poll-errors/poller-register-bad-eventmask-type.idio" "bad parameter type: '#t' a constant is not a C_int"

libc-poll-error-load "libc-poll-errors/poller-deregister-bad-poller-type.idio" "bad parameter type: '#t' a constant is not a C/pointer"
libc-poll-error-load "libc-poll-errors/poller-deregister-invalid-poller-pointer-type.idio" "poller-deregister poller='#<C/* C/pointer>' a C/pointer is not a struct idio_libc_poller_s"
libc-poll-error-load "libc-poll-errors/poller-deregister-bad-fdh-type.idio" "bad parameter type: '#t' a constant is not a fd-handle|C/int"

libc-poll-error-load "libc-poll-errors/poller-poll-bad-poller-type.idio" "bad parameter type: '#t' a constant is not a C/pointer"
libc-poll-error-load "libc-poll-errors/poller-poll-invalid-poller-pointer-type.idio" "poller-poll poller='#<C/* C/pointer>' a C/pointer is not a struct idio_libc_poller_s"
libc-poll-error-load "libc-poll-errors/poller-poll-bad-timeout-type.idio" "bad parameter type: '#t' a constant is not a fixnum|bignum|C/int"

libc-poll-error-load "libc-poll-errors/poll-name-bad-type.idio" "bad parameter type: '#t' a constant is not a fixnum|C/int"

;; POLLIN? etc. -- if one works, they'll all work the same
;
;; Technically, we don't know if POLLIN? is defined because we don't
;; know if POLLIN is defined.  It should be, though...
libc-poll-error-load "libc-poll-errors/pollin-p-bad-type.idio" "bad parameter type: '#t' a constant is not a C/short"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; select

libc-poll-error-load "libc-poll-errors/select-bad-list-element-type.idio" "bad parameter type: '#t' a constant is not a C/int|fd-handle"
libc-poll-error-load "libc-poll-errors/select-bad-list-fd-value.idio" "select fd='98765': 0 <= fd < FD_SETSIZE"

libc-poll-error-load "libc-poll-errors/select-timeout-float.idio" "select timeout='1.1e+0' a bignum is not a integer bignum"

libc-poll-error-load "libc-poll-errors/select-bad-timeout-type.idio" "bad parameter type: '#t' a constant is not a fixnum|bignum|C/struct-timeval"

libc-poll-error-load "libc-poll-errors/select-bad-rlist-type.idio" "bad parameter type: '#t' a constant is not a list"
libc-poll-error-load "libc-poll-errors/select-bad-wlist-type.idio" "bad parameter type: '#t' a constant is not a list"
libc-poll-error-load "libc-poll-errors/select-bad-elist-type.idio" "bad parameter type: '#t' a constant is not a list"


;; all done?
Tests? (libc-poll-error0 + 20)
