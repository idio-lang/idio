;;
;; Copyright (c) 2015, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-string.idio
;;
module tests/string
string0 := Tests

test (string? 0)			#f ; FIXNUM
test (string? #t)			#f ; CONSTANT
test (string? #\a)			#f ; UNICODE
test (string? "a")			#t ; STRING
test (string? 'a)			#f ; SYMBOL
test (string? :a)			#f ; KEYWORD
test (string? (pair 1 2))		#f ; PAIR
test (string? #[])			#f ; ARRAY
test (string? #{})			#f ; HASH
test (string? (function #n #n))		#f ; CLOSURE
test (string? pair)			#f ; PRIMITIVE
test (string? 1.0)			#f ; BIGNUM
test (string? (find-module 'Idio))	#f ; MODULE
test (string? (current-input-handle))	#f ; HANDLE
test (string? ^error)			#f ; STRUCT_TYPE
test (string? char-set:letter)		#f ; STRUCT_INSTANCE
test (string? #B{ 3 })			#f ; BITSET
test (string? libc/INTMAX_MAX)		#f ; C_INT
test (string? libc/UINTMAX_MAX)		#f ; C_UINT

test (string? %B"hello")	#t
test (string? %P"hello")	#t

test (octet-string?   "hello")	#f
test (octet-string? %B"hello")	#t
test (octet-string? %P"hello")	#f

test "hello" "hello"
test "Hello" "Hello"
test "Hello
World" "Hello\nWorld"

test (make-string 0)        ""
test (make-string 1)        " "
test (make-string 0 #\a)    ""
test (make-string 1 #\a)    "a"
test (make-string 1 #U+127) "ħ"
test (make-string 1.0 #\a)  "a"
test (make-string 3 #\a)    "aaa"

test (string->list "")    #n
test (string->list "abc") '(#\a #\b #\c)

test (list->string '()) ""
test (list->string '(#\a #\b #\c)) "abc"

test (string->symbol "abc") 'abc

test (append-string)             ""
test (append-string "a")         "a"
test (append-string "a" "h")     "ah"
test (append-string "a" "ħ")     "aħ"
test (append-string "ħ" "a")     "ħa"
test (append-string "a" "b" "c") "abc"

;; graceful degradation of string class
test (string?       (append-string "a"   "b")) #t
test (string?       (append-string %P"a" "b")) #t
test (pathname?     (append-string %P"a" "b")) #t
test (octet-string? (append-string %P"a" "b")) #f
test (string?       (append-string %B"a" "b")) #t
test (pathname?     (append-string %B"a" "b")) #f
test (octet-string? (append-string %B"a" "b")) #t
test (string?       (append-string "a" %P"b")) #t
test (pathname?     (append-string "a" %P"b")) #t
test (octet-string? (append-string "a" %P"b")) #f
test (string?       (append-string "a" %B"b")) #t
test (pathname?     (append-string "a" %B"b")) #f
test (octet-string? (append-string "a" %B"b")) #t

;; concatenate-string is a simple call to append-string but
;; join-string has both delim and args components
test (string?       (join-string   "d" '("a"   "b"))) #t
test (string?       (join-string %P"d" '("a"   "b"))) #t
test (pathname?     (join-string %P"d" '("a"   "b"))) #t
test (octet-string? (join-string %P"d" '("a"   "b"))) #f
test (string?       (join-string %B"d" '("a"   "b"))) #t
test (pathname?     (join-string %B"d" '("a"   "b"))) #f
test (octet-string? (join-string %B"d" '("a"   "b"))) #t
test (string?       (join-string   "d" '(%P"a" "b"))) #t
test (pathname?     (join-string   "d" '(%P"a" "b"))) #t
test (octet-string? (join-string   "d" '(%P"a" "b"))) #f
test (string?       (join-string   "d" '(%B"a" "b"))) #t
test (pathname?     (join-string   "d" '(%B"a" "b"))) #f
test (octet-string? (join-string   "d" '(%B"a" "b"))) #t
test (string?       (join-string   "d" '("a" %P"b"))) #t
test (pathname?     (join-string   "d" '("a" %P"b"))) #t
test (octet-string? (join-string   "d" '("a" %P"b"))) #f
test (string?       (join-string   "d" '("a" %B"b"))) #t
test (pathname?     (join-string   "d" '("a" %B"b"))) #f
test (octet-string? (join-string   "d" '("a" %B"b"))) #t

;; more appended strings -- pick them apart, put them back together

;; XXX do not try this at home -- here we *know*, because we are
;; carefully crafting the string, that we can pick apart and put back
;; together.  In general you don't.

;; In particular, when degraded to a pathname/octet-string we can
;; reproduce a viable unicode string but only because we know what's
;; in it.  In general you will silently get U+FFFD (REPLACEMENT
;; CHARACTER).  We'll demonstrate that case too!

;; You can get the UTF-8 representations with:
;; echo (make-string 1 #U+127) | od -t x1

;; The display-string function, in effect, calls the UTF-8 decoding
;; code.  You will get bitten if you pass non-UTF-8 sequences of
;; bytes.

;; Annoyingly, the code path is very slightly different between
;; pathnames and octet-strings (as pathnames degrade to octet-strings)
;; so we need to test both.

;; 1-byte strings -> pathnames
str := append-string "a" %P"b"
test (string-length str) 2
test (string-ref str 0) #\a
test (string-ref str 1) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #\a
test (string-ref str 1) #\b

;; 1-byte strings -> octet-strings
str := append-string "a" %B"b"
test (string-length str) 2
test (string-ref str 0) #\a
test (string-ref str 1) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #\a
test (string-ref str 1) #\b

;; 2-byte strings (2-byte encoding) -> pathnames
;; U+0127 LATIN SMALL LETTER H WITH STROKE
;; UTF-8 representation is 0xC4 0xA7
str := append-string (make-string 1 #U+0127) %P"b"
test (string-length str) 3
test (string-ref str 0) #U+C4
test (string-ref str 1) #U+A7
test (string-ref str 2) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #U+127
test (string-ref str 1) #\b

;; 2-byte strings (2-byte encoding) -> octet-strings
;; U+0127 LATIN SMALL LETTER H WITH STROKE
;; UTF-8 representation is 0xC4 0xA7
str := append-string (make-string 1 #U+0127) %B"b"
test (string-length str) 3
test (string-ref str 0) #U+C4
test (string-ref str 1) #U+A7
test (string-ref str 2) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #U+127
test (string-ref str 1) #\b

;; 2-byte strings (3-byte encoding) -> pathnames
;; U+0905 DEVANAGARI LETTER A
;; UTF-8 representation is 0xE0 0xA4 0x85
str := append-string (make-string 1 #U+905) %P"b"
test (string-length str) 4
test (string-ref str 0) #U+E0
test (string-ref str 1) #U+A4
test (string-ref str 2) #U+85
test (string-ref str 3) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #U+905
test (string-ref str 1) #\b

;; 2-byte strings (3-byte encoding) -> octet-strings
;; U+0905 DEVANAGARI LETTER A
;; UTF-8 representation is 0xE0 0xA4 0x85
str := append-string (make-string 1 #U+905) %B"b"
test (string-length str) 4
test (string-ref str 0) #U+E0
test (string-ref str 1) #U+A4
test (string-ref str 2) #U+85
test (string-ref str 3) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #U+905
test (string-ref str 1) #\b

;; 4-byte strings -> pathnames
;; U+1FBF8 SEGMENTED DIGIT 8
;; UTF-8 representation is 0xF0 0x9F 0xAF 0xB8
str := append-string (make-string 1 #U+1fbf8) %P"b"
test (string-length str) 5
test (string-ref str 0) #U+F0
test (string-ref str 1) #U+9F
test (string-ref str 2) #U+AF
test (string-ref str 3) #U+B8
test (string-ref str 4) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #U+1fbf8
test (string-ref str 1) #\b

;; 4-byte strings -> octet-strings
;; U+1FBF8 SEGMENTED DIGIT 8
;; UTF-8 representation is 0xF0 0x9F 0xAF 0xB8
str := append-string (make-string 1 #U+1fbf8) %B"b"
test (string-length str) 5
test (string-ref str 0) #U+F0
test (string-ref str 1) #U+9F
test (string-ref str 2) #U+AF
test (string-ref str 3) #U+B8
test (string-ref str 4) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #U+1fbf8
test (string-ref str 1) #\b

;; XXX 5- and 6-byte encodings?

;; non-UTF-8 strings -> pathnames
;; \xA9 (COPYRIGHT SIGN in ISO-8859-1)
;; UTF-8 representation is 0xFFFD (REPLACEMENT CHARACTER)!!!
str := append-string %P"\xA9" %P"b"
test (string-length str) 2
test (string-ref str 0) #U+A9
test (string-ref str 1) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #U+fffd
test (string-ref str 1) #\b

;; non-UTF-8 strings -> octet-strings
;; \xA9 (COPYRIGHT SIGN in ISO-8859-1)
;; UTF-8 representation is 0xFFFD (REPLACEMENT CHARACTER)!!!
str := append-string %P"\xA9" %B"b"
test (string-length str) 2
test (string-ref str 0) #U+A9
test (string-ref str 1) #\b
str = display-string str
test (string-length str) 2
test (string-ref str 0) #U+fffd
test (string-ref str 1) #\b

test (concatenate-string '())             ""
test (concatenate-string '("a"))         "a"
test (concatenate-string '("a" "h"))     "ah"
test (concatenate-string '("a" "ħ"))     "aħ"
test (concatenate-string '("ħ" "a"))     "ħa"
test (concatenate-string '("a" "b" "c")) "abc"

test (copy-string "")  ""
test (copy-string "a") "a"

test (string-length "")   0
test (string-length "a")  1
test (string-length "ah") 2
test (string-length "aħ") 2
test (string-length "ħa") 2

test (string-ref "ah" 0)   #\a
test (string-ref "ah" 1)   #\h
test (string-ref "ah" 0.0) #\a
test (string-ref "ah" 1.0) #\h
test (string-ref "aħ" 0)   #\a
test (string-ref "aħ" 1)   #U+127	; #\ħ

str := (copy-string "hello")
string-set! str 1   #\a
test str "hallo"
string-set! str 4.0 #\e
test str "halle"

;; XXX str is only 1 byte wide -- we need more
str = join-string (make-string 1 #U+127) '("a" "b")
test str "aħb"
string-set! str 1   #\h
test str "ahb"
string-set! str 1   #U+127
test str "aħb"

string-fill! str #\a
test str "aaa"
string-fill! str #U+127
test str "ħħħ"

str = (make-string 0)
string-fill! str #\a
test str ""

test (substring "" 0 0) ""
test (substring "abc" 0 0) ""
test (substring "abc" 0 1) "a"
test (substring "abc" 0 2) "ab"
test (substring "abc" 0 3) "abc"
test (substring "abc" 0)   "abc"
test (substring "abc" 1 1) ""
test (substring "abc" 1 2) "b"
test (substring "abc" 1 3) "bc"
test (substring "abc" 1)   "bc"
test (substring "abc" 2 2) ""
test (substring "abc" 2 3) "c"
test (substring "abc" 2)   "c"
test (substring "abc" 3 3) ""
test (substring "abc" 3)   ""
test (substring "abc" 0.0 3.0) "abc"
test (substring "abc" 0.0)     "abc"

test (string-index "hello" #\h) 0
test (string-index "hello" #\l) 2
test (string-index "hello" #\o) 4
test (string-index "hello" #\q) #f

test (string-rindex "hello" #\h) 0
test (string-rindex "hello" #\l) 3
test (string-rindex "hello" #\o) 4
test (string-rindex "hello" #\q) #f

;; XXX string*? are not Unicode/locale-aware -- they are calling
;; strncmp(3).  UTF-8 means it probably works as there is an absolute
;; order?

s107 := make-string 1 #U+107		; LATIN SMALL LETTER C WITH ACUTE
s117 := make-string 1 #U+117		; LATIN SMALL LETTER E WITH DOT ABOVE
s127 := make-string 1 #U+127		; LATIN SMALL LETTER H WITH STROKE

c106 := make-string 1 #U+106		; LATIN CAPITAL LETTER C WITH ACUTE
c116 := make-string 1 #U+116		; LATIN CAPITAL LETTER E WITH DOT ABOVE
c126 := make-string 1 #U+126		; LATIN CAPITAL LETTER H WITH STROKE

test (string<? "ab1" "ab1")		#f
test (string<? "ab1" "ab2")		#t
test (string<? "ab2" "ab1")		#f
test (string<? "ab1" "ab1" "ab1")	#f
test (string<? "ab1" "ab2" "ab2")	#f
test (string<? "ab1" "ab2" "ab3")	#t
test (string<? "ab1" "ab3" "ab2")	#f
test (string<? "ab3" "ab2" "ab1")	#f
test (string<? s107 s107)		#f
test (string<? s107 s117)		#t
test (string<? s117 s107)		#f
test (string<? s107 s107 s107)		#f
test (string<? s107 s117 s117)		#f
test (string<? s107 s117 s127)		#t
test (string<? s107 s127 s117)		#f
test (string<? s127 s117 s107)		#f

test (string<=? "ab1" "ab1")		#t
test (string<=? "ab1" "ab2")		#t
test (string<=? "ab2" "ab1")		#f
test (string<=? "ab1" "ab1" "ab1")	#t
test (string<=? "ab1" "ab2" "ab2")	#t
test (string<=? "ab1" "ab2" "ab3")	#t
test (string<=? "ab1" "ab3" "ab2")	#f
test (string<=? "ab3" "ab2" "ab1")	#f
test (string<=? s107 s107)		#t
test (string<=? s107 s117)		#t
test (string<=? s117 s107)		#f
test (string<=? s107 s107 s107)		#t
test (string<=? s107 s117 s117)		#t
test (string<=? s107 s117 s127)		#t
test (string<=? s107 s127 s117)		#f
test (string<=? s127 s117 s107)		#f

test (string=? "ab1" "ab1")		#t
test (string=? "ab1" "ab2")		#f
test (string=? "ab2" "ab1")		#f
test (string=? "ab1" "ab1" "ab1")	#t
test (string=? "ab1" "ab2" "ab2")	#f
test (string=? "ab1" "ab2" "ab3")	#f
test (string=? "ab1" "ab3" "ab2")	#f
test (string=? "ab3" "ab2" "ab1")	#f
test (string=? s107 s107)		#t
test (string=? s107 s117)		#f
test (string=? s117 s107)		#f
test (string=? s107 s107 s107)		#t
test (string=? s107 s117 s117)		#f
test (string=? s107 s117 s127)		#f
test (string=? s107 s127 s117)		#f
test (string=? s127 s117 s107)		#f

test (string>=? "ab1" "ab1")		#t
test (string>=? "ab1" "ab2")		#f
test (string>=? "ab2" "ab1")		#t
test (string>=? "ab1" "ab1" "ab1")	#t
test (string>=? "ab1" "ab2" "ab2")	#f
test (string>=? "ab1" "ab2" "ab3")	#f
test (string>=? "ab1" "ab3" "ab2")	#f
test (string>=? "ab3" "ab2" "ab1")	#t
test (string>=? s107 s107)		#t
test (string>=? s107 s117)		#f
test (string>=? s117 s107)		#t
test (string>=? s107 s107 s107)		#t
test (string>=? s107 s117 s117)		#f
test (string>=? s107 s117 s127)		#f
test (string>=? s107 s127 s117)		#f
test (string>=? s127 s117 s107)		#t

test (string>? "ab1" "ab1")		#f
test (string>? "ab1" "ab2")		#f
test (string>? "ab2" "ab1")		#t
test (string>? "ab1" "ab1" "ab1")	#f
test (string>? "ab1" "ab2" "ab2")	#f
test (string>? "ab1" "ab2" "ab3")	#f
test (string>? "ab1" "ab3" "ab2")	#f
test (string>? "ab3" "ab2" "ab1")	#t
test (string>? s107 s107)		#f
test (string>? s107 s117)		#f
test (string>? s117 s107)		#t
test (string>? s107 s107 s107)		#f
test (string>? s107 s117 s117)		#f
test (string>? s107 s117 s127)		#f
test (string>? s107 s127 s117)		#f
test (string>? s127 s117 s107)		#t

;; XXX string-ci*? are not Unicode/locale-aware -- they are calling
;; strncasecmp(3)

test (string-ci<? "ab1" "ab1")		#f
test (string-ci<? "ab1" "ab2")		#t
test (string-ci<? "ab2" "ab1")		#f
test (string-ci<? "ab1" "ab1" "ab1")	#f
test (string-ci<? "ab1" "ab2" "ab2")	#f
test (string-ci<? "ab1" "ab2" "ab3")	#t
test (string-ci<? "ab1" "ab3" "ab2")	#f
test (string-ci<? "ab3" "ab2" "ab1")	#f
test (string-ci<? s107 s107)		#f
test (string-ci<? s107 s117)		#t
test (string-ci<? s117 s107)		#f
test (string-ci<? s107 s107 s107)	#f
test (string-ci<? s107 s117 s117)	#f
test (string-ci<? s107 s117 s127)	#t
test (string-ci<? s107 s127 s117)	#f
test (string-ci<? s127 s117 s107)	#f

;; case-insensitive
test (string-ci<? "a" "A")		#f
test (string-ci<? "A" "a")		#f
test (string-ci<? "a" "B")		#t
test (string-ci<? "B" "a")		#f
;; but not Unicode-aware
test (string-ci<? s107 c106)		#f
test (string-ci<? c106 s107)		#t

test (string-ci<=? "ab1" "ab1")		#t
test (string-ci<=? "ab1" "ab2")		#t
test (string-ci<=? "ab2" "ab1")		#f
test (string-ci<=? "ab1" "ab1" "ab1")	#t
test (string-ci<=? "ab1" "ab2" "ab2")	#t
test (string-ci<=? "ab1" "ab2" "ab3")	#t
test (string-ci<=? "ab1" "ab3" "ab2")	#f
test (string-ci<=? "ab3" "ab2" "ab1")	#f
test (string-ci<=? s107 s107)		#t
test (string-ci<=? s107 s117)		#t
test (string-ci<=? s117 s107)		#f
test (string-ci<=? s107 s107 s107)	#t
test (string-ci<=? s107 s117 s117)	#t
test (string-ci<=? s107 s117 s127)	#t
test (string-ci<=? s107 s127 s117)	#f
test (string-ci<=? s127 s117 s107)	#f

;; case-insensitive
test (string-ci<=? "a" "A")		#t
test (string-ci<=? "A" "a")		#t
test (string-ci<=? "a" "B")		#t
test (string-ci<=? "B" "a")		#f
;; but not Unicode-aware
test (string-ci<=? s107 c106)		#f
test (string-ci<=? c106 s107)		#t

test (string-ci=? "ab1" "ab1")		#t
test (string-ci=? "ab1" "ab2")		#f
test (string-ci=? "ab2" "ab1")		#f
test (string-ci=? "ab1" "ab1" "ab1")	#t
test (string-ci=? "ab1" "ab2" "ab2")	#f
test (string-ci=? "ab1" "ab2" "ab3")	#f
test (string-ci=? "ab1" "ab3" "ab2")	#f
test (string-ci=? "ab3" "ab2" "ab1")	#f
test (string-ci=? s107 s107)		#t
test (string-ci=? s107 s117)		#f
test (string-ci=? s117 s107)		#f
test (string-ci=? s107 s107 s107)	#t
test (string-ci=? s107 s117 s117)	#f
test (string-ci=? s107 s117 s127)	#f
test (string-ci=? s107 s127 s117)	#f
test (string-ci=? s127 s117 s107)	#f

test (string-ci>=? "ab1" "ab1")		#t
test (string-ci>=? "ab1" "ab2")		#f
test (string-ci>=? "ab2" "ab1")		#t
test (string-ci>=? "ab1" "ab1" "ab1")	#t
test (string-ci>=? "ab1" "ab2" "ab2")	#f
test (string-ci>=? "ab1" "ab2" "ab3")	#f
test (string-ci>=? "ab1" "ab3" "ab2")	#f
test (string-ci>=? "ab3" "ab2" "ab1")	#t
test (string-ci>=? s107 s107)		#t
test (string-ci>=? s107 s117)		#f
test (string-ci>=? s117 s107)		#t
test (string-ci>=? s107 s107 s107)	#t
test (string-ci>=? s107 s117 s117)	#f
test (string-ci>=? s107 s117 s127)	#f
test (string-ci>=? s107 s127 s117)	#f
test (string-ci>=? s127 s117 s107)	#t

;; case-insensitive
test (string-ci>=? "a" "A")		#t
test (string-ci>=? "A" "a")		#t
test (string-ci>=? "a" "B")		#f
test (string-ci>=? "B" "a")		#t
;; but not Unicode-aware
test (string-ci>=? s107 c106)		#t
test (string-ci>=? c106 s107)		#f

test (string-ci>? "ab1" "ab1")		#f
test (string-ci>? "ab1" "ab2")		#f
test (string-ci>? "ab2" "ab1")		#t
test (string-ci>? "ab1" "ab1" "ab1")	#f
test (string-ci>? "ab1" "ab2" "ab2")	#f
test (string-ci>? "ab1" "ab2" "ab3")	#f
test (string-ci>? "ab1" "ab3" "ab2")	#f
test (string-ci>? "ab3" "ab2" "ab1")	#t
test (string-ci>? s107 s107)		#f
test (string-ci>? s107 s117)		#f
test (string-ci>? s117 s107)		#t
test (string-ci>? s107 s107 s107)	#f
test (string-ci>? s107 s117 s117)	#f
test (string-ci>? s107 s117 s127)	#f
test (string-ci>? s107 s127 s117)	#f
test (string-ci>? s127 s117 s107)	#t

;; case-insensitive
test (string-ci>? "a" "A")		#f
test (string-ci>? "A" "a")		#f
test (string-ci>? "a" "B")		#f
test (string-ci>? "B" "a")		#t
;; but not Unicode-aware
test (string-ci>? s107 c106)		#t
test (string-ci>? c106 s107)		#f

;; split
test (split-string "abc" "b") '("a" "c")
test (split-string "abc" "a") '("bc")
test (split-string "abc" "c") '("ab")

test (split-string "abbc" "b") '("a" "c")
test (split-string "aabc" "a") '("bc")
test (split-string "abcc" "c") '("ab")

test (split-string "abc" "z") '("abc")
test (split-string "" "z") '("")

;; multiple characters in the delimiter
test (split-string "abcd" "bc")  '("a" "d")
test (split-string "abcd" "xbc") '("a" "d")
test (split-string "abcd" "bxc") '("a" "d")
test (split-string "abcd" "bcx") '("a" "d")
test (split-string "abcd" "ax")  '("bcd")
test (split-string "abcd" "xa")  '("bcd")
test (split-string "abcd" "dx")  '("abc")
test (split-string "abcd" "xd")  '("abc")

test (split-string "abcd" "xy")  '("abcd")

;; default to IFS
;; IFS itself defaults to SPACE TAB NEWLINE
test (split-string "hello world")     '("hello" "world")
test (split-string "hello \t world")  '("hello" "world")
test (split-string "hello
world")  '("hello" "world")

;; bespoke IFS
{
  IFS :~ "bc"
  test (split-string "abcd")  '("a" "d")
}

;; split-string will produce substrings so can we split those?
;; strtok(3) man page:

STR := "a/bbb///cc;xxx:yyy:"
DE1 := ":;"
DE2 := "/"

RES := map (function (substr) {
	      SUBRES := map (function (subsubstr) {
			       subsubstr
	      }) (split-string substr DE2)
	      pair substr SUBRES
}) (split-string STR DE1)
test RES '(("a/bbb///cc" "a" "bbb" "cc") ("xxx" "xxx") ("yyy" "yyy"))

;; tripped up over this walking over DerivedCoreProperties.txt
STR = "002B          ; Math # Sm       PLUS SIGN"
parts := split-string STR "#"
dcp_parts := split-string (ph parts) ";"
range := split-string (ph dcp_parts) ".." ; boom! substring extends beyong parent string length: 111011129 002B          ; Math 

;; fields
test (fields "hello world") #[ "hello world" "hello" "world"]
test "hello world".fields.0 "hello world"
test "hello world".fields.1 "hello"

;; join
test (join-string "b" '("a" "c")) "abc"
test (join-string "b" '("a")) "a"
test (join-string "" '("a" "c")) "ac"
test (join-string "b" #n) ""

;; operators
s := "abc"
test (string-ref s 0) #\a
test (s.0) #\a

test/error (string-set! s 0 #\x) #n "bad parameter: string (\"abc\") is constant"
s = copy-string s
string-set! s 0 #\x
test (string-ref s 0) #\x
test (s.0) #\x

;; setters
set! s.1 #\y
test (s.1) #\y

s.2 = #\z
test (s.2) #\z

test s "xyz"

; code coverage - copy a substring
s = "hello world"
sa := split-string s " "
ss-dup := copy-string sa.1
test ss-dup sa.1

test (string-length (make-string 1e1)) 10

test (string-length (list->string '(#U+100))) 1
test (string-length (list->string '(#U+10000))) 1

test (concatenate-string #n) ""

test (string-ref "hello" 1.0) #\e

string-set! (copy-string "hello") 1.0 #\a

test (string-fill! (make-string 3) #\a) "aaa"

test (substring "hello world" 0.0 5.0) "hello"

;; strip-string: basics
test (strip-string "abc" "a")        "abc"
test (strip-string "abc" "a" 'left)  "bc"
test (strip-string "abc" "a" 'right) "abc"
test (strip-string "abc" "a" 'both)  "bc"
test (strip-string "abc" "a" 'none)  "abc"

test (strip-string "abca" "ac")        "ab"
test (strip-string "abca" "ac" 'left)  "bca"
test (strip-string "abca" "ac" 'right) "ab"
test (strip-string "abca" "ac" 'both)  "b"
test (strip-string "abca" "ac" 'none)  "abca"

;; code coverage: empty strings
test (strip-string "abc" "")         "abc"
test (strip-string "" "a")           ""

;; code coverage: strip the lot
test (strip-string "abc" "abc")	      ""
test (strip-string "abc" "abc" 'left) ""

;; code coverage: strip...nothing!
test (strip-string "abc" "x")	      "abc"

;; code coverage: substrings
str := "abca"
sub := substring str 2			; "ca"
test (strip-string str sub) "ab"
test (strip-string sub str) ""

;; code coverage: different string codepoint widths
;; 2-byte string
;; U+0127 LATIN SMALL LETTER H WITH STROKE
s := make-string 1 #U+0127
test (strip-string s "h")       s
test (strip-string s "h" 'left) s
test (strip-string "h" s)       "h"
test (strip-string "h" s 'left) "h"

;; 4-byte string
;; U+1FBF8 SEGMENTED DIGIT 8
s := make-string 1 #U+1FBF8
test (strip-string s "h")       s
test (strip-string s "h" 'left) s
test (strip-string "h" s)       "h"
test (strip-string "h" s 'left) "h"

; code coverage
test (equal? (string->pathname "hello")   "hello")	#f
test (equal? (string->pathname "hello") %P"hello")	#t

test (equal? (string->octet-string "hello")   "hello")	#f
test (equal? (string->octet-string "hello") %B"hello")	#t

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; for

;; testing `for` against a single string requires a little bit of
;; artiface as we only know what to test for if we know what we've
;; already seen

prev := #f

for x in "abc" {
  if prev {
    (case prev
     ((#\a) {
       test x #\b
       prev = x
     })
     ((#\b) {
       test x #\c
       prev = x
     }))
  } {
    test x #\a
    prev = x
  }
}

;; for multiple strings (in a list) we can check they line up

strings := list "abc" "xyz"
for (x y) in strings {
  (case x
   ((#\a) (test y #\x))
   ((#\b) (test y #\y))
   ((#\c) (test y #\z)))
  (case y
   ((#\x) (test x #\a))
   ((#\y) (test x #\b))
   ((#\z) (test x #\c)))
}

strings := list "abc" "xyz" "123"
for (x y z) in strings {
  (case x
   ((#\a) {
     test y #\x
     test z #\1
   })
   ((#\b) {
     test y #\y
     test z #\2
   })
   ((#\c) {
     test y #\z
     test z #\3
   }))
}

;; all done?
Tests? (string0 + 474)

;Local Variables:
;mode: Idio
;buffer-file-coding-system: utf-8-unix
;End:
