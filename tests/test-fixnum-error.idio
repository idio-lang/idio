;;
;; Copyright (c) 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-fixnum-error.idio
;;

fixnum-error0 := Tests

fixnum-error-load := {
  n := 0

  function (filename msg) {
    if (not (string? filename)) (error/type ^rt-parameter-type-error 'load "string" filename)

    n = n + 1

    exp-tests := 1

    ;eprintf "loading #%s %s looking for %s\n" n filename msg
    trap (^rt-fixnum-error
	  ^rt-divide-by-zero-error
	  ^rt-parameter-error) (function (c) {
	    ;eprintf "fixnum-error #%s: %s %s\n" n msg (idio-error-location c)
	    test (idio-error-message c) msg

	    if (not (string=? (idio-error-message c) msg)) {
	      condition-report (append-string "fixnum-error-load: " filename) c (current-error-handle)
	    }

	    trap-return 'fixnum-error
	  }) {
	    t0 := Tests
	    (symbol-value 'load 'Idio) filename
	    if (not (equal? Tests (t0 + exp-tests))) {
	      eprintf "fixnum-error #%s: %s did not generate \"%s\"\n" n filename msg
	      Errors = Errors + 1
	      Tests = t0 + exp-tests
	    }
    }
  }
}

fixnum-error-load "fixnum-errors/floor-bad-type.idio" "bad parameter type: '#t' a constant is not a number"

fixnum-error-load "fixnum-errors/remainder-divide-by-zero.idio" "fixnum divide by zero"
fixnum-error-load "fixnum-errors/remainder-fixnum-bad-type.idio" "bad parameter type: '#t' a constant is not a number"
fixnum-error-load "fixnum-errors/remainder-bignum-bad-type.idio" "bad parameter type: '#t' a constant is not a number"
fixnum-error-load "fixnum-errors/remainder-bad-type.idio" "bad parameter type: '#t' a constant is not a number"

fixnum-error-load "fixnum-errors/quotient-divide-by-zero.idio" "fixnum divide by zero"
fixnum-error-load "fixnum-errors/quotient-fixnum-bad-type.idio" "bad parameter type: '#t' a constant is not a number"
fixnum-error-load "fixnum-errors/quotient-bignum-bad-type.idio" "bad parameter type: '#t' a constant is not a number"
fixnum-error-load "fixnum-errors/quotient-bad-type.idio" "bad parameter type: '#t' a constant is not a number"

;; The C macro arithmetic primitives all follow the same code (being
;; the same macro and all) so we only need run through some exemplars

;; 0+-arg prefix arithmetic functions
fixnum-error-load "fixnum-errors/prefix-add-bad-type.idio" "bad parameter type: '#t' a constant is not a number"

;; 1+-arg prefix arithmetic functions
fixnum-error-load "fixnum-errors/prefix-subtract-bad-type-1.idio" "bad parameter type: '#t' a constant is not a number"
fixnum-error-load "fixnum-errors/prefix-subtract-bad-type-2.idio" "bad parameter type: '#t' a constant is not a number"

;; / prefix arithmetic function
fixnum-error-load "fixnum-errors/prefix-divide-bad-type.idio" "bad parameter type: '#t' a constant is not a number"

;; 1+-arg prefix comparison functions
fixnum-error-load "fixnum-errors/prefix-eq-bad-type-1.idio" "bad parameter type: '#t' a constant is not a number"
fixnum-error-load "fixnum-errors/prefix-eq-bad-type-2.idio" "bad parameter type: '#t' a constant is not a number"

;; infix binary arithmetic functions
fixnum-error-load "fixnum-errors/infix-add-bad-type-1.idio" "bad parameter type: '#t' a constant is not a number"
fixnum-error-load "fixnum-errors/infix-add-bad-type-2.idio" "bad parameter type: '#t' a constant is not a number"

;; infix binary / arithmetic functions
fixnum-error-load "fixnum-errors/infix-divide-bad-type-1.idio" "bad parameter type: '#t' a constant is not a number"
fixnum-error-load "fixnum-errors/infix-divide-bad-type-2.idio" "bad parameter type: '#t' a constant is not a number"

;; infix binary comparison functions
fixnum-error-load "fixnum-errors/infix-eq-bad-type-1.idio" "bad parameter type: '#t' a constant is not a number"
fixnum-error-load "fixnum-errors/infix-eq-bad-type-2.idio" "bad parameter type: '#t' a constant is not a number"

fixnum-error-load "fixnum-errors/integer2unicode-fixnum-invalid-code-point.idio" "integer->unicode code point: U+110000: is invalid"
fixnum-error-load "fixnum-errors/integer2unicode-bignum-invalid-code-point.idio" "integer->unicode code point: U+110000: is invalid"
fixnum-error-load "fixnum-errors/integer2unicode-bad-type.idio" "bad parameter type: '#t' a constant is not a integer"
fixnum-error-load "fixnum-errors/integer2unicode-fixnum-range.idio" "integer->unicode code point: U+-1: cannot be negative"
fixnum-error-load "fixnum-errors/integer2unicode-bignum-range.idio" "integer->unicode code point: U+-1: cannot be negative"

;; all done?
Tests? (fixnum-error0 + 26)
