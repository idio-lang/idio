;;
;; Copyright (c) 2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test-object.idio
;;

module test/object

object0 := Tests

test (instance? 0)			#f ; FIXNUM
test (instance? #t)			#f ; CONSTANT
test (instance? #\a)			#f ; UNICODE
test (instance? "a")			#f ; STRING
test (instance? 'a)			#f ; SYMBOL
test (instance? :a)			#f ; KEYWORD
test (instance? (pair 1 2))		#f ; PAIR
test (instance? #[])			#f ; ARRAY
test (instance? #{})			#f ; HASH
test (instance? (function #n #n))	#f ; CLOSURE
test (instance? pair)			#f ; PRIMITIVE
test (instance? 1.0)			#f ; BIGNUM
test (instance? (find-module 'Idio))	#f ; MODULE
test (instance? (current-input-handle))	#f ; HANDLE
test (instance? ^error)			#f ; STRUCT_TYPE
test (instance? char-set:letter)	#f ; STRUCT_INSTANCE
test (instance? #B{ 3 })		#f ; BITSET
test (instance? libc/INT_MAX)		#f ; C_INT
test (instance? libc/UINT_MAX)		#f ; C_UINT
test (instance? <class>)		#t ; instance

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; classes

;; simple class
define-class A #n a

test (class? A)			#t
test (class-name A)		'A
test (class-direct-supers A)	(list <object>)
test (class-direct-slots A)	'((a))
test (class-cpl A)		(list A <object> <top>)
test (class-slots A)		'((a))
test (class-nfields A)		1

;; single-inheritance; no slots
define-class A1 A

test (class? A1)		#t
test (class-name A1)		'A1
test (class-direct-supers A1)	(list A)
test (class-direct-slots A1)	#n
test (class-cpl A1)		(list A1 A <object> <top>)
test (class-slots A1)		'((a))
test (class-nfields A1)		1

;; single-inheritance; one slot
define-class A2 A a2

test (class? A2)		#t
test (class-name A2)		'A2
test (class-direct-supers A2)	(list A)
test (class-direct-slots A2)	'((a2))
test (class-cpl A2)		(list A2 A <object> <top>)
test (class-slots A2)		'((a2) (a))
test (class-nfields A2)		2

;; single-inheritance; one slot -- identical to A2 except we pass a
;; list of super-classes
define-class A3 (A) a3

test (class? A3)		#t
test (class-name A3)		'A3
test (class-direct-supers A3)	(list A)
test (class-direct-slots A3)	'((a3))
test (class-cpl A3)		(list A3 A <object> <top>)
test (class-slots A3)		'((a3) (a))
test (class-nfields A3)		2

;; multiple inheritance; no slots
define-class A12 (A1 A2)

test (class? A12)		#t
test (class-name A12)		'A12
test (class-direct-supers A12)	(list A1 A2)
test (class-direct-slots A12)	#n
test (class-cpl A12)		(list A12 A1 A2 A <object> <top>)
test (class-slots A12)		'((a2) (a))
test (class-nfields A12)	2

;; multiple inheritance; one slot
define-class A23 (A2 A3) a23

test (class? A23)		#t
test (class-name A23)		'A23
test (class-direct-supers A23)	(list A2 A3)
test (class-direct-slots A23)	'((a23))
test (class-cpl A23)		(list A23 A2 A3 A <object> <top>)
test (class-slots A23)		'((a23) (a2) (a3) (a))
test (class-nfields A23)	4

;; duplicate slot names in super-classes
define-class B1 #n b
define-class B2 #n b
define-class B12 (B1 B2)

test (class? B12)		#t
test (class-name B12)		'B12
test (class-direct-supers B12)	(list B1 B2)
test (class-direct-slots B12)	#n
test (class-cpl B12)		(list B12 B1 B2 <object> <top>)
test (class-slots B12)		'((b))
test (class-nfields B12)	1

;; duplicate slot names in self
define-class C1 #n c
define-class C2 #n c
define-class C12 (C1 C2) c

test (class? C12)		#t
test (class-name C12)		'C12
test (class-direct-supers C12)	(list C1 C2)
test (class-direct-slots C12)	'((c))
test (class-cpl C12)		(list C12 C1 C2 <object> <top>)
test (class-slots C12)		'((c))
test (class-nfields C12)	1

;; multiple duplicate slot names across the piece
define-class D1 #n a b c
define-class D2 #n b c d
define-class D12 (D1 D2) c d e

test (class? D12)		#t
test (class-name D12)		'D12
test (class-direct-supers D12)	(list D1 D2)
test (class-direct-slots D12)	'((c) (d) (e))
test (class-cpl D12)		(list D12 D1 D2 <object> <top>)
test (class-slots D12)		'((c) (d) (e) (a) (b))
test (class-nfields D12)	5

;; deeper tree
define-class E D12 e
define-class F E f

test (class? F)			#t
test (class-name F)		'F
test (class-direct-supers F)	(list E)
test (class-direct-slots F)	'((f))
test (class-cpl F)		(list F E D12 D1 D2 <object> <top>)
test (class-slots F)		'((f) (e) (c) (d) (a) (b))
test (class-nfields F)		6

;; the C3 linearization example from
;; https://en.wikipedia.org/wiki/C3_linearization together with slots
;; (and which also demonstrates that you can overwrite previous
;; definitions although you'll end up with method madness)
define-class O #n o
define-class A O a
define-class B O b
define-class C O c
define-class D O d
define-class E O e

define-class K1 (C B A) k1
define-class K3 (A D)   k3
define-class K2 (B D E) k2

define-class Z (K1 K3 K2) z

test (class-cpl Z)		(list Z K1 C K3 K2 B A D E O <object> <top>)
test (class-slots Z)		'((z) (k1) (c) (k3) (k2) (b) (a) (d) (e) (o))
test (class-nfields Z)		10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; methods

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; single-inheritance
define-class G1
define-class G2 G1
define-class G3 G2

g1 := make-instance G1
g2 := make-instance G2
g3 := make-instance G3

test (generic? g1)  #f
test (method? g1)   #f
test (class? g1)    #f
test (instance? g1) #t

define-method (which-g (g G1)) "a G1"
define-method (which-g (g G2)) "a G2"
define-method (which-g (g G3)) "a G3"

test (generic? which-g)  #t
test (method? which-g)   #f
test (class? which-g)    #f
test (instance? which-g) #t		; everything is an instance

test (which-g g1)	"a G1"
test (which-g g2)	"a G2"
test (which-g g3)	"a G3"

;; next-method
define-method (chain-g (g G1)) "a G1"	; (next-method) would raise a "no applicable methods/next methods" error
define-method (chain-g (g G2)) (sprintf "a G2; %s" (next-method))
define-method (chain-g (g G3)) (sprintf "a G3; %s" (next-method))

test (chain-g g1)	"a G1"
test (chain-g g2)	"a G2; a G1"
test (chain-g g3)	"a G3; a G2; a G1"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; multiple-inheritance
define-class H0				; we need a backstop for chaining
define-class H1 H0
define-class H2 H0
define-class H12 (H1 H2)
define-class H21 (H2 H1)

h12 := make-instance H12
h21 := make-instance H21

define-method (which-h (h H1)) "an H1"
define-method (which-h (h H2)) "an H2"

test (which-h h12)	"an H1"		; first applicable method
test (which-h h21)	"an H2"		; first applicable method

define-method (chain-h (h H0)) "an H0"
define-method (chain-h (h H1)) (sprintf "an H1; %s" (next-method))
define-method (chain-h (h H2)) (sprintf "an H2; %s" (next-method))

test (chain-h h12)	"an H1; an H2; an H0" ; all applicable methods
test (chain-h h21)	"an H2; an H1; an H0" ; all applicable methods

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; slot values -- no inheritance

;; no :initarg
define-class J1 #n s1

j1-1 := make-instance J1
j1-2 := make-instance J1 :rubbish #t
j1-3 := make-instance J1 :s1 10

test (slot-ref j1-1 's1)	#f
test (slot-ref j1-2 's1)	#f
test (slot-ref j1-3 's1)	#f

;; slot is a simple list but no :initarg => (s :initarg :slot-name)
define-class J2 #n (s1)

j2-1 := make-instance J2
j2-2 := make-instance J2 :rubbish #t
j2-3 := make-instance J2 :s1 10

test (slot-ref j2-1 's1)	#f
test (slot-ref j2-2 's1)	#f
test (slot-ref j2-3 's1)	10

;; slot is a list of stuff but no :initarg => (s :initarg :slot-name ...)
define-class J3 #n (s1 :dummy 'value)

j3-1 := make-instance J3
j3-2 := make-instance J3 :rubbish #t
j3-3 := make-instance J3 :s1 10

test (slot-ref j3-1 's1)	#f
test (slot-ref j3-2 's1)	#f
test (slot-ref j3-3 's1)	10

;; slot is a list of stuff with :initarg
define-class J4 #n (s1 :initarg :slot1)

j4-1 := make-instance J4
j4-2 := make-instance J4 :rubbish #t
j4-3 := make-instance J4 :slot1 10

test (slot-ref j4-1 's1)	#f
test (slot-ref j4-2 's1)	#f
test (slot-ref j4-3 's1)	10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; slot values -- single inheritance

;; no :initarg
define-class K1 #n s1
define-class K2 K1 s2

k2-1 := make-instance K2
k2-2 := make-instance K2 :rubbish #t
k2-3 := make-instance K2 :s1 10
k2-4 := make-instance K2 :s2 20
k2-5 := make-instance K2 :s1 10 :s2 20
k2-6 := make-instance K2 :s2 20 :s1 10

test (slot-ref k2-1 's1)	#f
test (slot-ref k2-1 's2)	#f
test (slot-ref k2-2 's1)	#f
test (slot-ref k2-2 's2)	#f
test (slot-ref k2-3 's1)	#f
test (slot-ref k2-3 's2)	#f
test (slot-ref k2-4 's1)	#f
test (slot-ref k2-4 's2)	#f
test (slot-ref k2-5 's1)	#f
test (slot-ref k2-5 's2)	#f
test (slot-ref k2-6 's1)	#f
test (slot-ref k2-6 's2)	#f

;; slot is a simple list but no :initarg => (s :initarg :slot-name)
define-class K3 #n (s1)
define-class K4 K3 (s2)

k4-1 := make-instance K4
k4-2 := make-instance K4 :rubbish #t
k4-3 := make-instance K4 :s1 10
k4-4 := make-instance K4 :s2 20
k4-5 := make-instance K4 :s1 10 :s2 20
k4-6 := make-instance K4 :s2 20 :s1 10

test (slot-ref k4-1 's1)	#f
test (slot-ref k4-1 's2)	#f
test (slot-ref k4-2 's1)	#f
test (slot-ref k4-2 's2)	#f
test (slot-ref k4-3 's1)	10
test (slot-ref k4-3 's2)	#f
test (slot-ref k4-4 's1)	#f
test (slot-ref k4-4 's2)	20
test (slot-ref k4-5 's1)	10
test (slot-ref k4-5 's2)	20
test (slot-ref k4-6 's1)	10
test (slot-ref k4-6 's2)	20

;; slot is a list of stuff but no :initarg => (s :initarg :slot-name ...)
define-class K5 #n (s1 :dummy 'value)
define-class K6 K5 (s2 :dummy 'value)

k6-1 := make-instance K6
k6-2 := make-instance K6 :rubbish #t
k6-3 := make-instance K6 :s1 10
k6-4 := make-instance K6 :s2 20
k6-5 := make-instance K6 :s1 10 :s2 20
k6-6 := make-instance K6 :s2 20 :s1 10

test (slot-ref k6-1 's1)	#f
test (slot-ref k6-1 's2)	#f
test (slot-ref k6-2 's1)	#f
test (slot-ref k6-2 's2)	#f
test (slot-ref k6-3 's1)	10
test (slot-ref k6-3 's2)	#f
test (slot-ref k6-4 's1)	#f
test (slot-ref k6-4 's2)	20
test (slot-ref k6-5 's1)	10
test (slot-ref k6-5 's2)	20
test (slot-ref k6-6 's1)	10
test (slot-ref k6-6 's2)	20

;; slot is a list of stuff with :initarg
define-class K7 #n (s1 :initarg :slot1)
define-class K8 K7 (s2 :initarg :slot2)

k8-1 := make-instance K8
k8-2 := make-instance K8 :rubbish #t
k8-3 := make-instance K8 :slot1 10
k8-4 := make-instance K8 :slot2 20
k8-5 := make-instance K8 :slot1 10 :slot2 20
k8-6 := make-instance K8 :slot2 20 :slot1 10

test (slot-ref k8-1 's1)	#f
test (slot-ref k8-1 's2)	#f
test (slot-ref k8-2 's1)	#f
test (slot-ref k8-2 's2)	#f
test (slot-ref k8-3 's1)	10
test (slot-ref k8-3 's2)	#f
test (slot-ref k8-4 's1)	#f
test (slot-ref k8-4 's2)	20
test (slot-ref k8-5 's1)	10
test (slot-ref k8-5 's2)	20
test (slot-ref k8-6 's1)	10
test (slot-ref k8-6 's2)	20

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; slot values -- single inheritance; same slot

;; no :initarg
define-class L1 #n s1
define-class L2 L1 s1

l2-1 := make-instance L2
l2-2 := make-instance L2 :rubbish #t
l2-3 := make-instance L2 :s1 10

test (slot-ref l2-1 's1)	#f
test (slot-ref l2-2 's1)	#f
test (slot-ref l2-3 's1)	#f

;; slot is a simple list but no :initarg => (s :initarg :slot-name)
define-class L3 #n (s1)
define-class L4 L3 (s1)

l4-1 := make-instance L4
l4-2 := make-instance L4 :rubbish #t
l4-3 := make-instance L4 :s1 10

test (slot-ref l4-1 's1)	#f
test (slot-ref l4-2 's1)	#f
test (slot-ref l4-3 's1)	10

;; slot is a list of stuff but no :initarg => (s :initarg :slot-name ...)
define-class L5 #n (s1 :dummy 'value)
define-class L6 L5 (s1 :dummy 'value)

l6-1 := make-instance L6
l6-2 := make-instance L6 :rubbish #t
l6-3 := make-instance L6 :s1 10

test (slot-ref l6-1 's1)	#f
test (slot-ref l6-2 's1)	#f
test (slot-ref l6-3 's1)	10

;; slot is a list of stuff with same :initarg
define-class L7 #n (s1 :initarg :slot1)
define-class L8 L7 (s1 :initarg :slot1)

l8-1 := make-instance L8
l8-2 := make-instance L8 :rubbish #t
l8-3 := make-instance L8 :slot1 10

test (slot-ref l8-1 's1)	#f
test (slot-ref l8-2 's1)	#f
test (slot-ref l8-3 's1)	10

;; slot is a list of stuff with different :initarg
;;
;; Here, the internal slot-init function getarg stops with the first
;; matching :initarg which it looks for in CPL-order.  Hence if
;; :L10-slot is specified at all, it "wins"
define-class L9  #n (s1 :initarg :L9-slot)
define-class L10 L9 (s1 :initarg :L10-slot)

l10-1 := make-instance L10
l10-2 := make-instance L10 :rubbish #t
l10-3 := make-instance L10 :L9-slot  10
l10-4 := make-instance L10 :L10-slot 20
l10-5 := make-instance L10 :L9-slot  10 :L10-slot 20
l10-6 := make-instance L10 :L10-slot 20 :L9-slot  10

test (slot-ref l10-1 's1)	#f
test (slot-ref l10-2 's1)	#f
test (slot-ref l10-3 's1)	10
test (slot-ref l10-4 's1)	20
test (slot-ref l10-5 's1)	20
test (slot-ref l10-6 's1)	20

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; slot values -- multiple inheritance

;; no :initarg
define-class M1 #n      s1
define-class M2 #n      s2
define-class M3 (M1 M2) s3

m3-1 := make-instance M3
m3-2 := make-instance M3 :rubbish #t
m3-3 := make-instance M3 :s1 10
m3-4 := make-instance M3 :s2 20
m3-5 := make-instance M3 :s3 30
m3-6 := make-instance M3 :s1 10 :s2 20 :s3 30
m3-7 := make-instance M3 :s3 30 :s2 20 :s1 10

test (slot-ref m3-1 's1)	#f
test (slot-ref m3-1 's2)	#f
test (slot-ref m3-1 's3)	#f
test (slot-ref m3-2 's1)	#f
test (slot-ref m3-2 's2)	#f
test (slot-ref m3-2 's3)	#f
test (slot-ref m3-3 's1)	#f
test (slot-ref m3-3 's2)	#f
test (slot-ref m3-3 's3)	#f
test (slot-ref m3-4 's1)	#f
test (slot-ref m3-4 's2)	#f
test (slot-ref m3-4 's3)	#f
test (slot-ref m3-5 's1)	#f
test (slot-ref m3-5 's2)	#f
test (slot-ref m3-5 's3)	#f
test (slot-ref m3-6 's1)	#f
test (slot-ref m3-6 's2)	#f
test (slot-ref m3-6 's3)	#f
test (slot-ref m3-7 's1)	#f
test (slot-ref m3-7 's2)	#f
test (slot-ref m3-7 's3)	#f

;; slot is a simple list but no :initarg => (s :initarg :slot-name)
define-class M4 #n      (s1)
define-class M5 #n      (s2)
define-class M6 (M4 M5) (s3)

m6-1 := make-instance M6
m6-2 := make-instance M6 :rubbish #t
m6-3 := make-instance M6 :s1 10
m6-4 := make-instance M6 :s2 20
m6-5 := make-instance M6 :s3 30
m6-6 := make-instance M6 :s1 10 :s2 20 :s3 30
m6-7 := make-instance M6 :s3 30 :s2 20 :s1 10

test (slot-ref m6-1 's1)	#f
test (slot-ref m6-1 's2)	#f
test (slot-ref m6-1 's3)	#f
test (slot-ref m6-2 's1)	#f
test (slot-ref m6-2 's2)	#f
test (slot-ref m6-2 's3)	#f
test (slot-ref m6-3 's1)	10
test (slot-ref m6-3 's2)	#f
test (slot-ref m6-3 's3)	#f
test (slot-ref m6-4 's1)	#f
test (slot-ref m6-4 's2)	20
test (slot-ref m6-4 's3)	#f
test (slot-ref m6-5 's1)	#f
test (slot-ref m6-5 's2)	#f
test (slot-ref m6-5 's3)	30
test (slot-ref m6-6 's1)	10
test (slot-ref m6-6 's2)	20
test (slot-ref m6-6 's3)	30
test (slot-ref m6-7 's1)	10
test (slot-ref m6-7 's2)	20
test (slot-ref m6-7 's3)	30

;; slot is a list of stuff but no :initarg => (s :initarg :slot-name ...)
define-class M7 #n       (s1 :dummy 'value)
define-class M8 #n       (s2 :dummy 'value)
define-class M9  (M7 M8) (s3 :dummy 'value)

m9-1 := make-instance M9
m9-2 := make-instance M9 :rubbish #t
m9-3 := make-instance M9 :s1 10
m9-4 := make-instance M9 :s2 20
m9-5 := make-instance M9 :s3 30
m9-6 := make-instance M9 :s1 10 :s2 20 :s3 30
m9-7 := make-instance M9 :s3 30 :s2 20 :s1 10

test (slot-ref m9-1 's1)	#f
test (slot-ref m9-1 's2)	#f
test (slot-ref m9-1 's3)	#f
test (slot-ref m9-2 's1)	#f
test (slot-ref m9-2 's2)	#f
test (slot-ref m9-2 's3)	#f
test (slot-ref m9-3 's1)	10
test (slot-ref m9-3 's2)	#f
test (slot-ref m9-3 's3)	#f
test (slot-ref m9-4 's1)	#f
test (slot-ref m9-4 's2)	20
test (slot-ref m9-4 's3)	#f
test (slot-ref m9-5 's1)	#f
test (slot-ref m9-5 's2)	#f
test (slot-ref m9-5 's3)	30
test (slot-ref m9-6 's1)	10
test (slot-ref m9-6 's2)	20
test (slot-ref m9-6 's3)	30
test (slot-ref m9-7 's1)	10
test (slot-ref m9-7 's2)	20
test (slot-ref m9-7 's3)	30

;; slot is a list of stuff with :initarg
define-class M10 #n        (s1 :initarg :slot1)
define-class M11 #n        (s2 :initarg :slot2)
define-class M12 (M10 M11) (s3 :initarg :slot3)

m12-1 := make-instance M12
m12-2 := make-instance M12 :rubbish #t
m12-3 := make-instance M12 :slot1 10
m12-4 := make-instance M12 :slot2 20
m12-5 := make-instance M12 :slot3 30
m12-6 := make-instance M12 :slot1 10 :slot2 20 :slot3 30
m12-7 := make-instance M12 :slot3 30 :slot2 20 :slot1 10

test (slot-ref m12-1 's1)	#f
test (slot-ref m12-1 's2)	#f
test (slot-ref m12-1 's3)	#f
test (slot-ref m12-2 's1)	#f
test (slot-ref m12-2 's2)	#f
test (slot-ref m12-2 's3)	#f
test (slot-ref m12-3 's1)	10
test (slot-ref m12-3 's2)	#f
test (slot-ref m12-3 's3)	#f
test (slot-ref m12-4 's1)	#f
test (slot-ref m12-4 's2)	20
test (slot-ref m12-4 's3)	#f
test (slot-ref m12-5 's1)	#f
test (slot-ref m12-5 's2)	#f
test (slot-ref m12-5 's3)	30
test (slot-ref m12-6 's1)	10
test (slot-ref m12-6 's2)	20
test (slot-ref m12-6 's3)	30
test (slot-ref m12-7 's1)	10
test (slot-ref m12-7 's2)	20
test (slot-ref m12-7 's3)	30

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; slot values -- multiple inheritance; same slot

;; no :initarg
define-class N1 #n      s1
define-class N2 #n      s1
define-class N3 (N1 N2) s1

n2-1 := make-instance N2
n2-2 := make-instance N2 :rubbish #t
n2-3 := make-instance N2 :s1 10

test (slot-ref n2-1 's1)	#f
test (slot-ref n2-2 's1)	#f
test (slot-ref n2-3 's1)	#f

;; slot is a simple list but no :initarg => (s :initarg :slot-name)
define-class N4 #n      (s1)
define-class N5 #n      (s1)
define-class N6 (N4 N5) (s1)

n6-1 := make-instance N6
n6-2 := make-instance N6 :rubbish #t
n6-3 := make-instance N6 :s1 10

test (slot-ref n6-1 's1)	#f
test (slot-ref n6-2 's1)	#f
test (slot-ref n6-3 's1)	10

;; slot is a list of stuff but no :initarg => (s :initarg :slot-name ...)
define-class N7 #n      (s1 :dummy 'value)
define-class N8 #n      (s1 :dummy 'value)
define-class N9 (N7 N8) (s1 :dummy 'value)

n9-1 := make-instance N9
n9-2 := make-instance N9 :rubbish #t
n9-3 := make-instance N9 :s1 10

test (slot-ref n9-1 's1)	#f
test (slot-ref n9-2 's1)	#f
test (slot-ref n9-3 's1)	10

;; slot is a list of stuff with same :initarg
define-class N10 #n        (s1 :initarg :slot1)
define-class N11 #n        (s1 :initarg :slot1)
define-class N12 (N10 N11) (s1 :initarg :slot1)

n12-1 := make-instance N12
n12-2 := make-instance N12 :rubbish #t
n12-3 := make-instance N12 :slot1 10

test (slot-ref n12-1 's1)	#f
test (slot-ref n12-2 's1)	#f
test (slot-ref n12-3 's1)	10

;; slot is a list of stuff with different :initarg
;;
;; Here, the internal slot-init function getarg stops with the first
;; matching :initarg which it looms for in CPL-order.  Hence if
;; :N15-slot is specified at all, it "wins", then :N13-slot then
;; :N14-slot
define-class N13 #n        (s1 :initarg :N13-slot)
define-class N14 #n        (s1 :initarg :N14-slot)
define-class N15 (N13 N14) (s1 :initarg :N15-slot)

n15-01 := make-instance N15
n15-02 := make-instance N15 :rubbish #t
n15-03 := make-instance N15 :N13-slot 10
n15-04 := make-instance N15 :N14-slot 20
n15-05 := make-instance N15 :N15-slot 30
n15-06 := make-instance N15 :N13-slot 10 :N14-slot 20
n15-07 := make-instance N15 :N14-slot 20 :N13-slot 10
n15-08 := make-instance N15 :N13-slot 10 :N15-slot 30
n15-09 := make-instance N15 :N15-slot 30 :N13-slot 10
n15-10 := make-instance N15 :N14-slot 10 :N15-slot 30
n15-11 := make-instance N15 :N15-slot 30 :N14-slot 10
n15-12 := make-instance N15 :N13-slot 10 :N14-slot 10 :N15-slot 30
n15-13 := make-instance N15 :N15-slot 30 :N14-slot 10 :N13-slot 10

test (slot-ref n15-01 's1)	#f
test (slot-ref n15-02 's1)	#f
test (slot-ref n15-03 's1)	10
test (slot-ref n15-04 's1)	20
test (slot-ref n15-05 's1)	30
test (slot-ref n15-06 's1)	20
test (slot-ref n15-07 's1)	20
test (slot-ref n15-08 's1)	30
test (slot-ref n15-09 's1)	30
test (slot-ref n15-10 's1)	30
test (slot-ref n15-11 's1)	30
test (slot-ref n15-12 's1)	30
test (slot-ref n15-13 's1)	30

;; all done?
Tests? (object0 + 298)
