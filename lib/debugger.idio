;;
;; Copyright (c) 2020-2023 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; debugger.idio
;;

module debugger
export (
	 debug
)

debug := #n
dih := (current-input-handle)
doh := (current-output-handle)
deh := (current-error-handle)

{
  debug-k := #n
  continuations := #n

  define (dread-line) {
    read-line dih
  }

  define (dprintf & args) {
    apply hprintf deh args
  }

  define (dputs s) {
    puts s deh
  }

  define (ddisplay* & args) {
    apply hdisplay* deh args
  }

  define (dnewline) {
    newline deh
  }

  debug-c := function (n v) {
    if (n le ((array-length continuations) - 1)) {
      dprintf "invoking continuation %d: %s\n" n (pht continuations.n)
      %%vm-apply-continuation n v
    } {
      dprintf "%d: invalid choice\n" n
    }
  }

  debug-v := function (val) {
    debug-k val

    ddisplay* "debug-v: not seen here with" val
  }

  debug = function/name debug args {
    ddisplay* "This is the Idio debugger\n"
    ddisplay* "debugger input is from" dih

    if (not (null? args)) {
      ddisplay* debug-k \= ph args
    }

    continuations = (%%vm-continuations)
    ;idio-debug "continuations = %s\n" continuations

    debug-loop :+ function () {
      dputs "\n---\n"
      al := array-length continuations
      if (al gt 0) {
	dprintf "Choose between the following continuations:\n"
	dloop :+ function (n) {
	  if (n ge 0) {
	    dprintf "  %d%s: %s\n" n (if (eq? (ph continuations.n) debug-k) "*" " ") (pht continuations.n)
	    dloop (n - 1)
	  }
	}

	dloop (al - 1)
	dprintf "c <num> [<val>]	Invoke continuation <num>\n"
      }

      dprintf "v <val>		return a value to the continuation of the failed expression\n"
      dprintf "a		abort the current expression\n"
      dprintf "q		quit Idio\n"
      (dnewline)
      dprintf "ct		show the tree of call frames (to the most recent ABORT)\n"
      dprintf "ft		show the tree of VM frames\n"
      dprintf "ds		decode the current stack\n"
      dprintf "its		show the thread state (idio-thread-state)\n"
      dprintf "dt		dump VM tables (cf. --vm-tables)\n"
      dprintf "debug> "

      line := (dread-line)
      lsh := open-input-string line
      cmd := read-expr lsh

      (cond
       ((and (eqv? "" line)
	     (eof-handle? dih)) {
	 debug-k 'debugger-eof
       })
       ((eq? 'c cmd) {
	 n := read-expr lsh
	 v := read-expr lsh
	 debug-c n v
       })
       ((eqv? 'v cmd) {
	 v := read-expr lsh
	 debug-k v
       })
       ((eqv? 'a cmd) {
	 (%vm-abort)
       })
       ((eqv? 'q cmd) {
	 exit 0
       })
       ((eqv? 'ct cmd) {
	 %vm-call-tree 1
       })
       ((eqv? 'ft cmd) {
	 (%vm-frame-tree)
       })
       ((eqv? 'ds cmd) {
	 (%vm-decode-stack)
       })
       ((eqv? 'its cmd) {
	 idio-thread-state 1
       })
       ((eqv? 'dt cmd) {
	 (%vm-tables)
	 (dnewline)
       })
       (else (dprintf "unrecognised line %s\n" line)))

      (debug-loop)
    }

    call/cc (function (k) {
      debug-k = k
      (debug-loop)
    })
  }
}

;; done
provide debugger
