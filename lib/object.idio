;;
;; Copyright (c) 2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; object.idio
;;

;; IOS is derived from Gregor Kiczales' Tiny CLOS with ideas from
;; Erick Gallesio's STklos and Eli Barzilay's Swindle.
;;
;; The Tiny CLOS copyright is:

; **********************************************************************
; Copyright (c) 1992 Xerox Corporation.
; All Rights Reserved.
;
; Use, reproduction, and preparation of derivative works are permitted.
; Any copy of this software or of any derivative work must include the
; above copyright notice of Xerox Corporation, this paragraph and the
; one after it.  Any distribution of this software or derivative works
; must comply with all applicable United States export control laws.
;
; This software is made available AS IS, and XEROX CORPORATION DISCLAIMS
; ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
; PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
; LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
; EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
; NEGLIGENCE) OR STRICT LIABILITY, EVEN IF XEROX CORPORATION IS ADVISED
; OF THE POSSIBILITY OF SUCH DAMAGES.
; **********************************************************************

module object
export (
	 make-instance
	 make-class define-class
	 ensure-generic define-generic
	 define-method

	 %set-instance-proc!
	 add-method!

	 ;; initialization protocol
	 initialize

	 ;; instance structure protocol
	 allocate-instance compute-getter-and-setter

	 ;; class initialization protocol
	 compute-cpl compute-slots

	 ;; generic invocation protocol
	 compute-apply-generic compute-methods compute-method-more-specific? compute-apply-methods

	 ;; utilities
	 class-instance
)

define (class-instance name & args) "

return the instance of the class `name`

:param name: name of the class or the class instance
:type name: symbol or instance
:return: class
:rtype: instance

``class-instance`` is usually used in templates to map the supplied
class names into class instances.  Circumstances might be such that it
is called in regular flow where the class' name has been evaluated to
the class instance in which case ``class-instance`` simply returns the
class instance.

" {
  cl := name
  if (symbol? name) {
    cl = evaluate/symbol-value-recurse name (current-module) #f
  }

  if (class? cl) cl {
    if (pair? args) (ph args) {
      ;; Test Case: object-errors/class-instance-bad-instance-type.idio
      ;;
      ;; class-instance #t
      error/type ^rt-parameter-type-error 'class-instance "class or the name of a class" name
    }
  }
}

;; This definition of make-instance is still only a bootstrap variant
define* (make-instance class
	      (:name name #f)
	      (:direct-supers supers #f)
	      (:direct-slots slots #f)

	      ; :name is declared above
	      (:documentation doc #n)

	      (:generic-function gf #f)
	      (:specializers spec #n)
	      (:procedure proc #n)) "
" {
  (cond
   ((eq? class <generic>) {
     if name {
       %make-instance class 'generic name doc
     } {
       ;; Test Case: n/a -- function overridden
       error/type ^rt-parameter-value-error 'make-instance ":name is mandatory" class
     }
   })
   ((eq? class <method>) {
     if (and gf
	     spec
	     proc) {
       %make-instance class 'method gf spec proc
     } {
       ;; Test Case: n/a -- function overridden
       error/type ^rt-parameter-value-error 'make-instance ":generic-function :specializers :procedure are mandatory" class
     }
   })
   ((eq? class <class>) {
     if (and name
	     supers
	     slots) {
       %make-instance class 'class name supers slots
     } {
       ;; Test Case: n/a -- function overridden
       error/type ^rt-parameter-value-error 'make-instance ":name is mandatory" class
     }
   })
   (else {
     ;; Test Case: n/a -- function overridden
     error/type ^rt-parameter-value-error 'make-instance "unexpected class" class
   }))
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; class
;;

define (make-class name supers slots) "

create a new class, `name`, with super-classes and slots

:param name: name of the class
:type name: symbol
:param supers: super-classes of the new class
:type supers: list of class instances
:param slots: slots of the new class
:type slots: list of symbols
:return: new class
:rtype: instance

``make-class`` would not normally be called by users.

.. seealso:: :ref:`define-class <object/define-class>`

" {
  make-instance <class> :name name :direct-supers supers :direct-slots slots
}

define-template (define-class name & args) {
  if (not (symbol? name)) {
    ;; Test Case: n/a - raised during template expansion
    error/type ^rt-parameter-type-error 'define-class "symbol" name
  }

  supers := #n
  slots := #n
  if (pair? args) {
    supers = ph args
    slots = pt args
  }

  ;; supers is a list of symbols at this point
  supers = (cond
	    ((pair? supers)   supers)
	    ((symbol? supers) (list supers))
	    ((null? supers)   (list '<object>))
	    (else	      {
	      ;; Test Case: n/a - raised during template expansion
	      (error/type ^rt-parameter-value-error
			  'define-class
			  (sprintf "'%s', a %s, is not a list|symbol" supers (typename supers)))
	    }))

  ;; slots is also a list of unevaluated expressions where we want to
  ;; massage the list such that we evaluate to cover where someone has
  ;; passed an expression for a slot option argument -- which also
  ;; includes the names of functions, otherwise they are symbols and
  ;; looked for on the PATH...he noted.
  ;;
  ;; XXX remember to quote the slot name!
  #T{
    define $name (make-class '$name (map class-instance '$supers) (list $@(map (function/name define-class/slots (slot) {
      (cond
       ((pair? slot) #T{
	 (list
	  '$(ph slot)
	  $@(map (function/name define-class/slot-args (e) #T{ $e }) (pt slot)))
       })
       (else #T{
	 '$slot
       }))
    }) slots)))
  }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; generic
;;

;; ensure-generic is from STklos allowing the user to blast away with
;; define-method without bothering creating the (underlying) generic.
;;
;; Note that it will define {name} in the current module as a
;; <generic> rather than, perhaps, the <method> you thought you were
;; getting with define-method.

define* (ensure-generic name
			(:documentation doc #n)) {
  old := evaluate/symbol-value-recurse name (current-module) #f
  if (generic? old) old {
    evaluate/set-symbol-value! name (make-instance <generic> :name name :documentation doc) (current-module)
  }
}

;; there's still a need for make-generic in the bootstrap below
define* (make-generic (:name name (gensym 'gf))
		      (:documentation doc #n)) "

create a new generic function, `name`, with optional documentation

:param name: name of the generic function
:type name: symbol
:param doc: documentation string, defaults to ``#n``
:type doc: string or ``#n``, optional
:return: generic function
:rtype: instance

Additionally, the symbol `name` will be bound to the new generic function.

``make-generic`` would not normally be called by users as generic
functions are implicitly created through the use of
:ref:`define-method <object/define-method>`.

.. seealso:: :ref:`define-method <object/define-method>`

" {
  make-instance <generic> :name name :documentation doc
}

define-template (define-generic name & args) {
  doc := #n
  if (pair? args) {
    doc = ph args
  }

  #T{
    define $name (ensure-generic '$name :documentation $doc)
  }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; method
;;

define (compute-method-formals args) "

Pick out the formal parameter names from some, possibly specialized,
list of parameters.

The formal parameter names will be prefixed with ``next-method``.
" {
  loop :+ function/name compute-method-formals/loop (a*) {
    if (pair? a*) {
      pair (if (pair? (ph a*)) (phh a*) (ph a*)) (loop (pt a*))
    } a*
  }

  formals := loop args
  append (list 'next-method) formals
}

define (compute-method-specializers args) "

Pick out the specializers from some, possibly specialized, list of
parameters.  The default specializer is ``<top>`` and the result is a
list of specialisers.

" {
  (cond
   ((null? args) #n)
   ((pair? args) {
     (pair (if (pair? (ph args)) (phth args) <top>)
	   (compute-method-specializers (pt args)))
   })
   (else <top>))
}

define (%method-specializers-equal? gf m1 m2) {
  equal? (method-specializers m1) (method-specializers m2)
}


;; Sneaky pre-method definition
define (method-specializers-equal? gf m1 m2) {
  %method-specializers-equal? gf m1 m2
}

define (compute-new-methods gf m) {
  method* := generic-methods gf

  ;; Tiny CLOS uses collect-if and every and some dynamic predicates.
  ;; STklos hunts down the list for a match and stamps over it.
  loop :+ function/name compute-new-methods/loop (m*) {
    if (null? m*) {
      ;; no duplicate specializers so prefix method* with m
      pair m method*
    } {
      if (method-specializers-equal? gf (ph m*) m) {
	;; overwrite the old
	set-ph! m* m

	;; return method* (with the now overwritten element)
	method*
      } {
	loop (pt m*)
      }
    }
  }

  loop method*
}

define (add-method! gf m) "

add method `m` to generic function `gf`'s list of methods

:param gf: generic function
:type gf: instance
:param m: method
:type m: instance
:return: ``#<unspec>``

`m` will override any existing method with the same specializers

``add-method!`` would not normally be called by users as methods are
implicitly added through the use of :ref:`define-method
<object/define-method>`.

.. seealso:: :ref:`define-method <object/define-method>`

" {
  slot-set! gf 'methods (compute-new-methods gf m)
  %set-instance-proc! gf (compute-apply-generic gf)
}

define-template (define-method args & body) {
  name := ph args
  args = pt args
  doc := #n
  if (and (pair? body)
	  (string? (ph body))
	  (pair? (pt body))) {
    doc = ph body
    body = pt body
  }
  gf := gensym 'gf

  ;; $gf is local to the block, below, although ensure-generic will
  ;; define {name} in the current module (if not already defined as a
  ;; <generic>) rather than the <method> that define-method suggests.
  ;;
  ;; The evaluator doesn't pick up the dynamically defined name so we
  ;; need to assign to $gf here as well so that it is in scope for
  ;; add-method! on the next line.
  ;;
  ;; Also, as this is a template and therefore args is a bunch of
  ;; symbols, we need to map the specializers into class instances.

  #T{
    {
      $gf := ensure-generic '$name :documentation $doc
      add-method! $gf (make-instance <method>
			    :generic-function $gf
			    :specializers     (map class-instance '$(compute-method-specializers args))
			    :procedure        (function/name $name $(compute-method-formals args) $@body))
    }
  }
}

;; some Tiny CLOS utilities (from support.scm)

define (TC/last l) {
  loop :+ function/name TC/last/loop (l) {
    (cond
     ((null? l)      #f)
     ((null? (pt l)) (ph l))
     (else           (loop (pt l))))
  }

  loop l
}

define (TC/every test & lists) {
  scan :+ function/name TC/every/scan (tails) {
    if (any-null? tails) #t {
      (and (apply test (ph-of tails))
	   (scan (pt-of tails)))
    }
  }

  scan lists
}

define (TC/collect-if test? list) {
  (cond
   ((null? list)      #n)
   ((test? (ph list)) (pair (ph list) (TC/collect-if test? (pt list))))
   (else              (TC/collect-if test? (pt list))))
}

;; initargs is (... :kw val ...)
define (TC/get-keyword-arg initargs name & args) {
  scan :+ function/name TC/get-keyword-arg/scan (initarg*) {
    (cond
     ((null? initarg*) {
       if (pair? args) (ph args) {
	 ;; Test Case: object-errors/TC-get-keyword-arg-not-found.idio
	 ;;
	 ;; TC/get-keyword-arg '(:foo 3) :bar
	 error/type ^rt-parameter-error 'TC/get-keyword-arg "keyword not found" name
       }
     })
     ((null? (pt initarg*)) {
       ;; Test Case: object-errors/TC-get-keyword-arg-unbalanced.idio
       ;;
       ;; TC/get-keyword-arg '(:foo) :bar
       error/type ^rt-parameter-error 'TC/get-keyword-arg "unbalanced keyword list" initargs
     })
     ((eq? (ph initarg*) name) (pht initarg*))
     (else                     (scan (ptt initarg*))))
  }

  scan initargs
}

;; get multiple items meaning the result can be #n (saving a default
;; value)
define (TC/get-keyword-args initargs name) {
  scan :+ function/name TC/get-keyword-args/scan (a*) {
    (cond
     ((null? a*) #n)
     ((null? (pt a*)) {
       ;; Test Case: object-errors/TC-get-keyword-args-unbalanced.idio
       ;;
       ;; TC/get-keyword-args '(:foo) :bar
       error/type ^rt-parameter-error 'TC/get-keyword-args "unbalanced keyword list" initargs
     })
     ((eq? (ph a*) name) (pair (pht a*) (scan (ptt a*))))
     (else               (scan (ptt a*))))
  }

  scan initargs
}

;; a couple of utility functions in tiny-clos.scm
define (TC/applicable? c arg) {
  memq c (class-cpl (class-of arg))
}

define (TC/more-specific? c1 c2 arg) {
  memq c2 (memq c1 (class-cpl (class-of arg)))
}

;; and a couple of variants with using pre-computed
;; (class-cpl (class-of arg))
define (TC/cpl-applicable? c cpl-arg) {
  memq c cpl-arg
}

define (TC/cpl-more-specific? c1 c2 cpl-arg) {
  memq c2 (memq c1 cpl-arg)
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; declare some generic functions which we'll set up in a moment
;;
;; Technically, we only need to pre-define compute-apply-generic
;; (because we're going to call %set-instance-proc! with it below) as
;; all the rest are auto-defined by define-method.

;; initialization protocol
initialize                    := (make-generic
				  :name 'initialize
				  :documentation "

Initialize the instance `inst` from `initargs`.  ``initialize`` is
called from :ref:`make-instance <object/make-instance>`.

The following methods are defined:

* ``(<method> <top>)``

* ``(<generic> <top>)``

* ``(<class> <top>)``

* ``(<object> <top>)``

")

;; instance structure protocol
allocate-instance             := (make-generic
				  :name 'allocate-instance
				  :documentation "

Allocate space for an instance of class `cl`.  ``allocate-instance``
is called from :ref:`make-instance <object/make-instance>`.

The following methods are defined:

* ``(<entity-class>)``

* ``(<class>)``

")

compute-getter-and-setter     := (make-generic
				  :name 'compute-getter-and-setter
				  :documentation "

Compute the getter and setter information for slot `slot` in class
`cl` using allocator `allocator`.

The following method is defined:

* ``(<class> <top> <top>)``

")

;; generic invocation protocol
compute-apply-generic         := (make-generic
				  :name 'compute-apply-generic
				  :documentation "

Return a function to be used as the instance proc for generic `gf`.

The function takes any number of arguments and calls
:ref:`compute-methods <object/compute-methods>` and
:ref:`compute-apply-methods <object/compute-apply-methods>`.

The following method is defined:

* ``(<generic>)``

")

compute-methods               := (make-generic
				  :name 'compute-methods
				  :documentation "

Return a function to be used to calculate the sorted list of methods
given the generic function's arguments.

The function calls :ref:`compute-method-more-specific?
<object/compute-method-more-specific?>`.

The following method is defined:

* ``(<generic>)``

")

compute-method-more-specific? := (make-generic
				  :name 'compute-method-more-specific?
				  :documentation "

Return a function to be used to sort methods by their specializers.

The following method is defined:

* ``(<generic>)``

")

compute-apply-methods         := (make-generic
				  :name 'compute-apply-methods
				  :documentation "

Return a function to be used to call the :ref:`method-procedure
<object/method-procedure>` for the sorted list of applicable methods
determined previously.

The function takes a list of methods and the generic function's
arguments.

The following method is defined:

* ``(<generic>)``

")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; compute-apply-generic and friends

; From tiny-clos.scm:

; Adding a method calls COMPUTE-APPLY-GENERIC, the result of which calls
; the other generics in the generic invocation protocol.  Two, related,
; problems come up.  A chicken and egg problem and a infinite regress
; problem.
;
; In order to add our first method to COMPUTE-APPLY-GENERIC, we need
; something sitting there, so it can be called.  The first definition
; below does that.
;
; Then, the second definition solves both the infinite regress and the
; not having enough of the protocol around to build itself problem the
; same way: it special cases invocation of generics in the invocation
; protocol.

%set-instance-proc! compute-apply-generic (function/name compute-apply-generic (gf) {
  m := ph (generic-methods gf)
  ;; func next-method args
  (method-procedure m) #f gf
})

define-method (compute-apply-generic (gf <generic>)) {
  ;; base-generics is a list of the generic functions above, not their
  ;; names
  base-generics := (list compute-apply-generic
			 compute-methods
			 compute-method-more-specific?
			 compute-apply-methods)

  (function/name compute-apply-generic/generic args {
    ;; catch circular references (and bootstrap)
    if (and (memq gf base-generics)
	    (memq (ph args) base-generics)) {
      apply (method-procedure (TC/last (generic-methods gf))) (pair #f args)
    } {
      (compute-apply-methods gf) ((compute-methods gf) args) args
    }
  })
}

define-method (compute-methods (gf <generic>)) {
  (function/name compute-methods/generic (args) {
    cpl-args := %cpl-args args ; map (function (arg) (class-cpl (class-of arg))) args
    applicable := TC/collect-if (function/name compute-methods/generic/collect-if/applicable (m) {
      ;TC/every TC/applicable? (method-specializers m) args
      TC/every TC/cpl-applicable? (method-specializers m) cpl-args
    }) (generic-methods gf)

    if ((length applicable) gt 1) {
      cmms? := compute-method-more-specific? gf
      sort applicable (function/name compute-methods/generic/sort/applicable (m1 m2) {
	cmms? m1 m2 args
      })
    } applicable
  })
}

define-method (compute-method-more-specific? (gf <generic>)) {
  (function/name compute-method-more-specific?/generic (m1 m2 args) {
    cpl-args := %cpl-args args ; map (function (arg) (class-cpl (class-of arg))) args
    loop :+ function/name compute-method-more-specific?/generic/loop (ms1 ms2 ca*) {
      (cond
       ((and (null? ms1)
	     (null? ms2)) {
	 ;; Test Case: n/a -- compute-new-methods should prevent this
	 error/type ^rt-instance-error 'compute-method-more-specific? "two methods are equally specific"
       })
       ((or (null? ms1)
	    (null? ms2)) {
	 ;; Test Case: object-errors/compute-method-more-specific-inconsistent-specializers-count.idio
	 ;;
	 ;; define-method (foo (f <fixnum>))   "fixnum"
	 ;; define-method (foo (f <fixnum>) o) "fixnum other"
	 ;; foo 1
	 error/type ^rt-instance-error 'compute-method-more-specific? "two methods have a different number of specializers"
       })
       ((null? ca*) {
	 ;; Test Case: n/a -- we get an arity error first
	 error/type ^rt-instance-error 'compute-method-more-specific? "fewer arguments than specializers"
       })
       (else {
	 s1 := ph ms1
	 s2 := ph ms2
	 cpl-arg := ph ca*
	 if (eq? s1 s2) {
	   loop (pt ms1) (pt ms2) (pt ca*)
	 } {
	   TC/cpl-more-specific? s1 s2 cpl-arg
	 }
       }))
    }

    loop (method-specializers m1) (method-specializers m2) cpl-args
  })
}

define-method (compute-apply-methods (gf <generic>)) {
  (function/name compute-apply-methods/generic (method* args) {
    ;; one-step returns a thunk!
    one-step :+ function/name compute-apply-methods/generic/one-step (m*) {
      (function/name compute-apply-methods/generic/one-step/impl a {
	if (not (null? a)) {
	  eprintf "WARNING: one-step thunk invoked with a=%@ args=%s\n" a args
	}
	if (null? m*) {
	  ;; Test Case: object-errors/compute-apply-methods-bad-type.idio
	  ;;
	  ;; define-method (foo (f <fixnum>))   "fixnum"
	  ;; foo #t
	  error/type ^rt-instance-invocation-error 'compute-apply-methods (sprintf "no applicable methods/next methods for (%s %@)" (generic-name gf) args)
	} {
	  ;; apply func (pair next-method args)
	  apply (method-procedure (ph m*)) (pair (one-step (pt m*)) args)
	}
      })
    }

    ;; we want to invoke the result of calling one-step
    ((one-step method*))
  })
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; initialize

define-method (initialize (obj <object>) initargs) {
  fold-left (function/name initialize/object/fold-left (i init-slot) {
    %slot-set-direct! obj i (apply init-slot initargs)
    i + 1
  }) 0 (map pht (class-getters-n-setters (class-of obj)))
}

define-method (initialize (cl <class>) initargs) {
  ;; call-next-method
  (next-method)

  slot-set! cl 'name (TC/get-keyword-arg initargs :name (gensym 'cl))

  ;; pluck out direct-supers argument
  slot-set! cl 'direct-supers (map class-instance (TC/get-keyword-arg initargs :direct-supers #n))

  ;; for direct-slots we want to massage the list of slots into a list
  ;; of lists of slots and slot-options -- always a list, in other
  ;; words
  ;;
  ;; Slight weirdness:
  ;; * s	=> (s)
  ;; * (s)	=> (s :initarg :s)
  slot-set! cl 'direct-slots  (map (function/name initialize/class/slot-set! (s) {
    if (pair? s) {
      ;; if the slot is given as a pair then ensure there is a
      ;; :initarg declared...
      if (TC/get-keyword-arg (pt s) :initarg #f) s {
	;; ...defaulting to :name
	append (list (ph s) :initarg (make-keyword (symbol->string (ph s)))) (pt s)
      }
    } {
      list s
    }
  }) (TC/get-keyword-arg initargs :direct-slots #n))

  ;; call generic functions to calculate cpl and slots
  slot-set! cl 'cpl   (compute-cpl cl)
  slot-set! cl 'slots (compute-slots cl)

  slots := class-slots cl
  ;; set up slot initialization and accessors

  gns := #n
  fold-left (function/name initialize/class/fold-left (i slot) {
    ;; slot is (name ...)
    ;; gns is (... (name init-func getter) ...)
    gns = pair (pair (ph slot) (compute-getter-and-setter cl slot i)) gns
    i + 1
  }) 0 slots

  slot-set! cl 'nfields           (length slots)
  slot-set! cl 'getters-n-setters (reverse! gns)
}

define-method (initialize (gf <generic>) initargs) {
  ;; call-next-method
  (next-method)

  slot-set! gf 'name	      (TC/get-keyword-arg initargs :name (gensym 'gf))
  slot-set! gf 'documentation (TC/get-keyword-arg initargs :documentation #n)
  slot-set! gf 'methods       #n
  %set-instance-proc! gf (function/name initialize/generic/%set-instance-proc! args {
    ;; Test Case: object-errors/initialize-generic-no-methods.idio
    ;;
    ;; gf := make-instance <generic> :name 'foo
    ;; gf #t
    error/type ^rt-instance-invocation-error 'initialize (sprintf "generic function %s has no methods" (generic-name gf))
  })
}

define-method (initialize (m <method>) initargs) {
  ;; call-next-method
  (next-method)

  slot-set! m 'specializers (TC/get-keyword-arg initargs :specializers #n)
  slot-set! m 'procedure    (TC/get-keyword-arg initargs :procedure #n)
}

define (allocate-helper cl allocator) {
  gns* := class-getters-n-setters cl
  inst := allocator cl (length gns*)

  fold-left (function/name allocate-helper/fold-left (i gns) {
    if (pair? gns) {
      ;; gns is (name init-func :initkw getter) and we want to apply
      ;; init-func, ie. (init-func)
      %slot-set-direct! inst i ((pht gns))
    }
    i + 1
  }) 0 gns*

  inst
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; allocate-instance

define-method (allocate-instance (cl <class>)) {
  allocate-helper cl %allocate-instance
}

define-method (allocate-instance (cl <entity-class>)) {
  allocate-helper cl %allocate-entity
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; compute-cpl

define-method (compute-cpl (cl <class>)) "

Determine the class precedence list from the super-classes.

The following method is defined:

* ``(<class>)``

" {
  ;; Here we'll deviate from Tiny CLOS and use C3 Linearization
  ;; https://en.wikipedia.org/wiki/C3_linearization to compute the cpl
  ;; (as does Python 2.3+, Perl 5.10+ (not default), ...)
  ;;
  ;; The C3 Linearization algorithm is a mixture of Appendices A and B
  ;; of https://opendylan.org/_static/c3-linearization.pdf

  ;; We're looking for a deterministic Method Resolution Order (MRO)
  ;; which, ultimately, defines our own behaviour.

  ;; The broad thrust is to look at the list (of lists of) superclass
  ;; CPLs and repeatedly ask which of the heads of these lists does
  ;; not appear in the tail of the list of any other.  Add it to the
  ;; result, remove it from the lists and loop round again.

  ;; Easy!  The wikipedia has an example with useful commentary.

  ;; any?/every? are Dylan functions and/or as any/every in SRFI-1
  define (any? p? l) {
    (and (pair? l)
	 {
	   loop :+ function/name compute-cpl/class/any?/loop (h t) {
	     if (pair? t) {
	       (or (p? h)
		   (loop (ph t) (pt t)))
	     } (p? h)
	   }

	   loop (ph l) (pt l)
    })
  }

  define (every? p? l) {
    (or (null? l)
	 {
	   loop :+ function/name compute-cpl/class/every?/loop (h t) {
	     if (null? t) (p? h) {
	       (and (p? h)
		    (loop (ph t) (pt t)))
	     }
	   }

	   loop (ph l) (pt l)
    })
  }

  define (merge reversed-partial-result remaining-inputs) {
    if (every? null? remaining-inputs) {
      reverse! reversed-partial-result
    } {
      define (candidate c) {
	define (tail? l) {
	  (and (pair? l)
	       (memq c (pt l)))
	}

	(and (not (any? tail? remaining-inputs))
	     c)
      }

      define (candidate-at-head l) {
	(and (pair? l)
	     (candidate (ph l)))
      }

      next := any? candidate-at-head remaining-inputs

      if next {
	define (remove-next l) {
	  (or (and (pair? l)
		   (eq? (ph l) next)
		   (pt l))
	   l)
	}

	merge (pair next reversed-partial-result) (map remove-next remaining-inputs)
      } {
	;; Test Case: object-errors/compute-cpl-inconsistent-precedence-graph.idio
	;; define-class A
	;; define-class A3 A
	;; define-class A13 (A A3)

	error/type ^rt-instance-error 'compute-cpl (sprintf "inconsistent precedence graph for class %s" (class-name cl))
      }
    }
  }

  supers := class-direct-supers cl
  merge (list cl) (append (map class-cpl supers) (list supers))
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; compute-slots

define-method (compute-slots (cl <class>)) "

Determine the actual class slots from the direct and inherited slots.

The following method is defined:

* ``(<class>)``

" {
  collect :+ function/name compute-slots/class/collect (to-do r) {
    if (null? to-do) (reverse! r) {
      current := ph to-do
      name := ph current
      others := #n
      remaining-to-do := TC/collect-if (function/name compute-slots/class/collect/rem-to-do (o) {
	if (eq? (ph o) name) {
	  others = pair o others
	  #f
	} #t
      }) (pt to-do)

      collect remaining-to-do (pair (append current (apply append (pt-of (reverse! others))))
				    r)
    }
  }

  ;; the initial to-do is the set of direct-slots of
  ;; everything in our cpl
  collect (apply append (map class-direct-slots (class-cpl cl))) #n
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; compute-getter-and-setter

define-method (compute-getter-and-setter (cl <class>) slot index) {
  ;; could be more than one :initarg
  initargs := TC/get-keyword-args (pt slot) :initarg

  ;; other slot options
  initform := TC/get-keyword-arg (pt slot) :initform #f

  ;; magic number
  no-initargs := pair 'no 'initargs

  ;; getarg stops on the first match
  getarg :+ function/name compute-getter-and-setter/class/getarg (args initargs) {
    if (null? initargs) no-initargs {
      arg := TC/get-keyword-arg args (ph initargs) no-initargs
      if (eq? arg no-initargs) (getarg args (pt initargs)) arg
    }
  }

  init := default-slot-value
  if initform {
    init = initform	; (function args (initform))
  }

  ;; init-slot is the slot initializer that takes into account
  ;; :initarg and init
  ;;
  ;; init-slot will be applied to the initargs passed to make-instance
  init-slot := function/name compute-getter-and-setter/class/init-slot args {
    arg := getarg args initargs
    if (eq? arg no-initargs) {
      apply init args
    } arg
  }

  list init-slot index
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; make-instance

define (make-instance cl & initargs) "

create an instance of class `cl` using `initargs`

:param cl: class
:type cl: instance
:param initargs: initialization arguments
:type initargs: list
:return: instance
:rtype: instance

`initargs` should be a series of :samp:`{keyword} {arg}` pairs where
the keyword and argument are dependent on the class of `cl`.

" {
  inst := allocate-instance cl
  initialize inst initargs
  inst
}

provide object
