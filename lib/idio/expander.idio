#*

Copyright (c) 2020 Ian Fitchet <idf(at)idio-lang.org>

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

expander.idio

*#

module expander
export (
	 install-expander!
	 install-expander/source!
	 copy-expander!
	 evaluate-expander
	 evaluate-expander-source
	 template-expand
	 template-expand*
)
import codegen threading vm

#*

The C code has defined some variables:

*expander-thread* is a separate thread used for expanding *stuff*

*expander-list* is an association list of (id proc) where id is the
nominal template name and proc is the associated expander function

*expander-list-src* is an association list of (id src) where src is
the original source code of the expander function

The C code for expander? is the equivalent of

define (expander? o) {
  assq o *expander-list*
}

*#

define (expander-error msg loc name) {
  c := make-condition ^runtime-error msg loc name
  raise c
}

#*

For the *-expander functions I've followed in the style of STklos'
lib/runtime.stk which itself appears to be following in the style of
Dybvig, Friedman and Haynes' Expansion-Passing Style: A General Macro
Mechanism, http://www.cs.indiana.edu/~dyb/pubs/LaSC-1-1-pp53-75.pdf

In essence, we pass the expression to be expanded, {x}, and
an "expansion" function, {e}, around to everything -- by passing {e}
it is the "expansion" passing style.  {e} only really gets used in
application-expander.

The entry point for expansion is always initial-expander and the
nominal value for {e} is also initial-expander.

initial-expander looks at the expression and decides if it is:

* an atom -- return it

* a template -- use the template's associated function to do the
expansion

* or we call application-expander

application-expander descends into {x} and asks {e} to expand each
element -- of course we pass {e} into the expansion otherwise it
wouldn't be EPS!

{e} doesn't have to be initial-expander.  The EPS paper suggests an
expand-once function with a do-nothing {e}:

define (expand-once x) {
  initial-expander x (function (x e) x)
}

thus preventing the recursive descent.

*#

#*

STklos uses {map*} -- which accepts dotted-lists -- because the
recursive nature of {application-expander} will descend into argument
lists.  The original EPS paper uses {map} (or uses a better {map}
function!).

However, if your *argument list* starts with the name of a
template...you will get burned as this code thinks it's the
application of a template.

So, can we spot a function definition and skip the argument list?

Annoyingly, we have to play with lists of list to allow us to {apply
fn ...} successfully when {fn} assumes it is being given a list.

*#

define (a-e-map fn & l) {
  (cond
   ((null? (ph l)) #n)
   ((pair? (ph l)) {
     if (eq? 'function (phh l)) {
       if (string? (phtth l)) {
	   (append (list 'function (phth l))
		   (list (apply a-e-map fn	(pttth l))))
	 } {
	   (append (list 'function (phth l))
		   (list (apply a-e-map fn	(ptth l))))
	 }
     } {
       (pair (apply fn		(map ph l))
	     (apply a-e-map fn	(map pt l)))
     }
   })
   (else {
     apply fn l
   }))
}

;; application-expander is only called with a list
define (application-expander x e) {
  a-e-map (function (x) {
	     e x e
  }) x
}

define (initial-expander x e) {
  (cond ((not (pair? x)) x)
	((not (symbol? (ph x))) {
	  application-expander x e
	})
	(else {
	  hx := ph x
	  expander := expander? hx
	  if expander {
	    ;; apply the template

	    ;; ((pt (assq f *expander-list*)) x e)
	    (pt expander) x e
	  } {
	    application-expander x e
	  }
	}))
}

define (install-expander! id proc) {
  old := assq id *expander-list*

  if old {
    set-pt! old proc
  } {
    *expander-list* = pair (pair id proc) *expander-list*
  }
}

define (install-expander/source! id proc src) {
  install-expander! id proc

  old := assq id *expander-list-src*

  if old {
    set-pt! old src
  } {
    *expander-list-src* = pair (pair id src) *expander-list-src*
  }
}

define (copy-expander! new-id old-id) {
  old := assq old-id *expander-list*

  if old {
    *expander-list* = pair (pair new-id (pt old)) *expander-list*
  } {
    expander-error "expander proc not defined" 'copy-expander! old-id
  }

  old := assq old-id *expander-list-src*

  if old {
    *expander-list-src* = pair (pair new-id (pt old)) *expander-list-src*
  } {
    expander-error "expander source not defined" 'copy-expander! old-id
  }
}

define (evaluate-expander m cs) {
  pc := codegen *expander-thread* m cs
  vm-run *expander-thread* pc
}

define (evaluate-expander-source x e) {
  run-in-thread *expander-thread* (function () {
				     initial-expander x e
  })
}

define (template-expand e) {
  initial-expander e initial-expander
}

define (template-expand* e) {
  loop :+ function (e) {
	    ;; qualify this call so the C evaluator doesn't get in the
	    ;; way and see {template-expand} as a special form
	    new := expander/template-expand e
	    if (equal? new e) {
	      new
	    } {
	      loop new
	    }
  }

  loop e
}

provide expander
