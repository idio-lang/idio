;;
;; Copyright (c) 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; posix-regex.idio
;;

define (regex-matches rx str) {
  regexec (regcomp rx) str
}

#*

When we run regex-case/pattern-case the chances are we'll be looping
over the same *-case expression repeatedly.  In which case what we
really want to be doing is pre-computing the regcomp and referring
back to it.  Store those references in an array.

The array is external to any loop, ie global.  That means the regcomp
results live forever.  Not ideal.

*#

*regcomp-array* := make-array 64

define-template (regex-case e & clauses) {
  ;; regex-strings want to extract the regex strings
  regex-strings :+ function (c* r) {
		     (cond
		      ((null? c*) (reverse r))
		      ((or (not (pair? c*))
			   (not (pair? (ph c*)))
			   (not (pair? (pth c*)))) (error 'regex-case "invalid syntax" c*))
		      ((null? (pt c*)) {
			if (eq? 'else (phh c*)) {
			  reverse r
			} {
			  reverse (pair (phh c*) r)
			}
		      })
		      (else {
			regex-strings (pt c*) (pair (phh c*) r)
		      }))

  }

  ;; put {key} in scope of gen-clauses to save passing it as an
  ;; argument
  key := gensym 'key

  gen-clauses :+ function (i c*) {
		   (cond
		    ((null? c*) '#n)
		    ((or (not (pair? c*))
			 (not (pair? (ph c*)))
			 (not (pair? (pth c*)))) (error 'case "invalid syntax" c*))
		    ((null? (pt c*)) {
		      if (eq? 'else (phh c*)) {
			#T{
			  ((else ((function (r) {
				     $@(pth c*)
			  }) $key)))
			}
		      } {
			#T{
			  (((regexec (array-ref *regcomp-array* $i) $key) => (function (r) {
										$@(pth c*)
			  })))
			}
		      }
		    })
		    (else {
		      #T{
			(((regexec (array-ref *regcomp-array* $i) $key) => (function (r) {
									      $@(pth c*)
			})) $@(gen-clauses (i + 1) (pt c*)))
		      }
		    }))

  }

  i := array-length *regcomp-array*
  map (function (s) {
	 array-push! *regcomp-array* (regcomp s)
  }) (regex-strings clauses #n)

  #T{
    {
      ;; evaluate {e} (once!)
      $key := $e

      cond $@(gen-clauses i clauses)
    }
  }
}

define-template (pattern-case e & clauses) {
  ;; regex-strings want to extract the regex strings
  regex-strings :+ function (c* r) {
		     (cond
		      ((null? c*) (reverse r))
		      ((or (not (pair? c*))
			   (not (pair? (ph c*)))
			   (not (pair? (pth c*)))) (error 'pattern-case "invalid syntax" c*))
		      ((null? (pt c*)) {
			if (eq? 'else (phh c*)) {
			  reverse r
			} {
			  reverse (pair (phh c*) r)
			}
		      })
		      (else {
			regex-strings (pt c*) (pair (phh c*) r)
		      }))

  }

  ;; put {key} in scope of gen-clauses to save passing it as an
  ;; argument
  key := (gensym 'key)

  gen-clauses :+ function (i c*) {
		   (cond
		    ((null? c*) '#n)
		    ((or (not (pair? c*))
			 (not (pair? (ph c*)))
			 (not (pair? (pth c*)))) (error 'case "invalid syntax" c*))
		    ((null? (pt c*)) {
		      if (eq? 'else (phh c*)) {
			#T{
			  ((else ((function (r) {
				     $@(pth c*)
			  }) $key)))
			}
		      } {
			#T{
			  (((regexec (array-ref *regcomp-array* $i) $key) => (function (r) {
										$@(pth c*)
			  })))
			}
		      }
		    })
		    (else {
		      #T{
			(((regexec (array-ref *regcomp-array* $i) $key) => (function (r) {
									      $@(pth c*)
			})) $@(gen-clauses (i + 1) (pt c*)))
		      }
		    }))

  }

  i := array-length *regcomp-array*
  map (function (s) {
	 loop :+ function (str) {
		   (regex-case str
			       ("(.*)\\*(.*)" {
				 append-string r.1 ".*" (loop r.2)
			       })
			       ("(.*)\\?(.*)" {
				 append-string r.1 "." (loop r.2)
			       })
			       (else r))
	 }

	 s = sprintf "^%s$" (loop s)
	 array-push! *regcomp-array* (regcomp s)
  }) (regex-strings clauses #n)

  #T{
    {
      ;; evaluate {e} (once!)
      $key := $e

      cond $@(gen-clauses i clauses)
    }
  }
}
