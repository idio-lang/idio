;;
;; Copyright (c) 2020-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; doc.idio
;;

;; after SRFI-95, please

define-template (help x) {
  #T{
    (cond
     ((function? $x) {
       sigstr := %property $x :sigstr #f
       docstr := %property $x :docstr-raw #f
       source := %property $x :source #f
       details := evaluate/find-symbol '$x

       display '$x
       display " is a function"
       if (list? details) {
	 display " from module "
	 display (module-name (phttt details))
       }
       if source {
	 display " ("
	 display source
	 display ")"
       }
       display "\n"
       display "SYNOPSIS: "
       if sigstr {
	 display* '$x sigstr
       } {
	 display* '$x
       }
       if docstr {
	 display* "DESCRIPTION:"
	 display docstr
       }
       #t
     })
     ((struct-type? $x) {
       loop-isa :+ function (type) {
	 if (null? type) "" {
	   append-string " > " (symbol->string (struct-type-name type)) (loop-isa (struct-type-parent type))
	 }
       }

       display* "struct-type:" (struct-type-name $x) (loop-isa (struct-type-parent $x))"\n"
       display* "fields" (struct-type-fields $x)
     })
     ((struct-instance? $x) {
       display* "struct-instance:" '$x
       t := (struct-instance-type $x)
       display* "struct-type:" (struct-type-name t)
       display* "fields:" (struct-type-fields t)
     })
     ((C/pointer? $x) {
       display* "C/pointer:" '$x
       display* "C struct type:" (C/pointer-name $x)
       display* "C struct members:" (C/pointer-members $x)
     })
     ((dynamic? '$x) {
       display* "dynamic:" '$x
     })
     ((environ? '$x) {
       display* "environ:" '$x
     })
     ((computed? '$x) {
       display* "computed:" '$x
     })
     ((operator? '$x) {
       display* "operator:" '$x
     })
     ((symbol? '$x) {

       ;; make symbol? one of the last as it (fore-)shadows dynamic?,
       ;; expander? etc.

       module := find-module '$x #f
       if module {
	 display* "module:" '$x "\n"
	 display* "imports" (module-imports module)
	 exports := sort-symbol (module-exports module)
	 display* "exports:" ;exports
	 exports_loop :+ function (exports) {
	   if (null? exports) #t {
	     export := ph exports
	     display* " " export
	     exports_loop (pt exports)
	   }
	 }
	 exports_loop exports
       } {
	 (cond
	  ((expander? '$x) {
	    sigstr := %property $x :sigstr #f
	    docstr := %property $x :docstr-raw #f
	    details := evaluate/find-symbol '$x

	    display '$x
	    display " is an expander"
	    if (list? details) {
	      display " from module "
	      display (module-name (phttt details))
	    }
	    display "\n"
	    display "SYNOPSIS: "
	    if sigstr {
	      display* '$x sigstr
	    } {
	      display* '$x
	    }
	    if docstr {
	      display* "DESCRIPTION:"
	      display docstr
	    }
	  })
	  (else {
	    display* "symbol:" '$x
	  }))
       }
       #t
     })
     (else {
       edisplay* "help: " '$x ": not helped" $x
       #f
     }))
  }
}

define (autodoc) {
  define (display_indented str prefix) {
    loop :+ function (lines prefix) {
      if (null? lines) #t {
	display prefix
	display (ph lines)
	display "\n"
	loop (pt lines) prefix
      }
    }

    if (string? str) {
      loop (split-string str "\n") prefix
    }
  }

  define (print-docstr mod sym) {
    val := symbol-value sym mod
    (cond
     ((function? val) {
       sigstr := %property val :sigstr #f
       docstr := %property val :docstr-raw #f
       display* ".. idio:function::" sym (if sigstr sigstr "") "\n"
       if docstr {
	 display_indented docstr "   "
       }
       display "\n"
     })
     ((symbol? val) {
       module := find-module val #f
       if module {
	 display* "module:" sym
       } {
	 display* "symbol:" sym
       }
     })
     (else {
       ;edisplay* "autodoc/print-docstr: " mod sym ": not a function/symbol"
       #f
     }))
  }

  symbol_loop :+ function (module symbols) {
    if (null? symbols) #t {
      print-docstr module (ph symbols)
      symbol_loop module (pt symbols)
    }
  }

  module_loop :+ function (modules) {
    if (null? modules) #t {
      module := ph modules

      ms := module-symbols (find-module module)
      ss := make-hash #n #n ((length ms) * 2)
      map (function (sym) {
	ss.sym = symbol->string sym
      }) ms
      key-ss := function (sym) {
	ss.sym
      }
      symbol_loop module (sort ms string<? key-ss)
      module_loop (pt modules)
    }
  }

  mn := (all-modules)
  ms := make-hash #n #n ((length mn) * 2)
  map (function (sym) {
    ms.sym = symbol->string sym
  }) mn
  key-ms := function (sym) {
    ms.sym
  }

  module_loop (sort mn string<? key-ms)
}

;; idio-version shouldn't really be in doc.idio but we want it after
;; posix-regex.idio for regex-case and SRFI-89 for optional parameters
define* (idio-version (:raw raw #f) (details #f)) "
Report details of the Idio version.

:param details: provide more details on IDIOLIB, defaults to ``#f``
:type details: boolean, optional
:keyword :raw: do not substitute $HOME, defaults to ``#f``
:type :raw: boolean, optional

" {
  v := #{}
  v.idio-cmd      = IDIO_CMD
  v.idio-cmd-path = IDIO_CMD_PATH
  v.idio-exe      = IDIO_EXE

  unless raw {
    for-each (function (sym) {
      (regex-case v.sym
		  (#S{^${HOME}/(.*)} {
		    v.sym = append-string "$HOME/" r.1
		  }))
    }) '(idio-cmd idio-cmd-path idio-exe)
  }

  printf #S{
IDIO_CMD                       = ${v.idio-cmd} (${v.idio-cmd-path})
IDIO_EXE                       = ${v.idio-exe}

IDIO_VERSION                   = ${IDIO_VERSION}
IDIO_SYSTEM_ARCH               = ${IDIO_SYSTEM_ARCH}
IDIO_BUILD_COMMIT              = ${IDIO_BUILD_COMMIT}
IDIO_BUILD_DESCRIBE            = ${IDIO_BUILD_DESCRIBE}
IDIO_BUILD_TIMESTAMP           = ${IDIO_BUILD_TIMESTAMP}
}

  printf #S{
IDIO_BUILD_CC                  = ${IDIO_BUILD_CC} (${IDIO_BUILD_CC_PATH})
${IDIO_BUILD_CC_VERSION}
}

  ;; produce a list of (orig rewritten) directory names
  il := map (function (d) {
    if raw (list d d) {
      (regex-case d
		  (#S{^${HOME}/(.*)} {
		    list d (append-string "$HOME/" r.1)
		  })
		  (else (list d d)))
    }
  }) (split-string-exactly IDIOLIB ":")

  printf #S{
IDIOLIB                        = ${join-string ":" (map pht il)}}

  if details {
    for-each (function (dd) {
      is-d := d? (ph dd)
      printf #S{
  d? ${is-d} ${pht dd}}
    }) il
  }

  printf "\n\n"

  printf "*idio-features*\n"
  for-each (function (f) {
    ;; NB features are a mix of symbols and strings so
    ;; normalize to a string
    (pattern-case (->string f)
		  ("uname/nodename/*" #n)
		  (else {
		    printf "  %s\n" f
		  }))
  }) *idio-features*

  printf "\n"

  printf "%-30s = %s\n" '*require-features* *require-features*

}
