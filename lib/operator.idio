#*

Copyright (c) 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

operator.idio

*#

module operator
export (
	 infix-operator-precedence-table
	 postfix-operator-precedence-table
	 copy-infix-operator!
	 copy-postfix-operator!
	 operator-expand*
)

#*

The C code (in expander.c!) has defined some variables:

*infix-operator-list* is an association list of (id proc) where id is
the nominal operator name and proc is the associated operator function
and is used as an existence of an operator test.

*infix-operator-group* is a numerically descending ordered association
list of (pri grp) where pri is the operator precedence and grp is a
list of (id & proc) pairs.

The C code for infix-operator? is the equivalent of

define (infix-operator? o) {
assq o *infix-operator-list*
}

Ditto for postfix operators.

*#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;

define (operator-error msg loc name) {
  c := make-condition ^runtime-error msg loc name
  raise c
}

define (operator-precedence-table og) {
  loop :+ function (groups r) {
    (cond
     ((null? groups) (reverse r))
     (else {
       prec-group := ph groups
       ops := map ph (pt prec-group)
       loop (pt groups) (pair (pair (ph prec-group) ops) r)
     }))
  }

  loop og #n
}

define (infix-operator-precedence-table) {
  og := symbol-value '*infix-operator-group* (find-module 'operator)
  operator-precedence-table og
}

define (postfix-operator-precedence-table) {
  og := symbol-value '*postfix-operator-group* (find-module 'operator)
  operator-precedence-table og
}

define (copy-operator! new-id new-pri old-id ol og) {
  new := assq new-id ol

  if new {
    operator-error "operator already defined" 'copy-operator! new-id
  }

  old := assq old-id ol

  if old {
    ol = (pair (pair new-id (pt old))
	       ol)

    grp := assq new-pri og

    if grp {
      procs := pt grp
      set-pt! grp (pair (pair new-id (pt old))
			procs)
    } {
      grp := (list (pair new-id (pt old)))

      og-loop :+ function (og p) {
	if (null? og) {
	  og = (append og
		       (list (pair new-pri grp)))
	} {
	  og-pri := phh og
	  if (og-pri lt new-pri) {
	    if (null? p) {
	      og = (pair (pair new-pri grp)
			 og)
	    } {
	      set-pt! p (pair (pair new-pri grp)
			      og)
	    }
	  } {
	    og-loop (pt og) (ph og)
	  }
	}
      }

      og-loop og #n
    }
  } {
    operator-error "operator not defined" 'copy-operator! old-id
  }
}

define (copy-infix-operator! new-id new-pri old-id) {
  copy-operator! new-id new-pri old-id *infix-operator-list* *infix-operator-group*
}

define (copy-postfix-operator! new-id new-pri old-id) {
  copy-operator! new-id new-pri old-id *postfix-operator-list* *postfix-operator-group*
}

define (operator-expand* exp) {
  new := operator-expand exp
  if (equal? new exp) new {
    operator-expand* new
  }
}

provide operator
