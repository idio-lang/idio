#*

Copyright (c) 2021 Ian Fitchet <idf(at)idio-lang.org>

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

pty.idio


Pseudo-terminals are available on all systems but the methods to
access them are not portable:

* openpty(3)/forkpty(3) are not available on SunOS

  The source code for openpty/forkpty (which may use login_tty(3)) are
  available so we can follow along with them as far as...

* TIOCSCTTY, the ioctl to set the controlling tty which is not
  available on Mac OS X

  Here, login_tty (and Python's pty) suggests we need an open/close
  loop over stdin, stdout and stderr.  Something that may be defined
  in W. Richard Stevens' Advanced Programming in the UNIX Environment.

Looking for the lowest common denominator, posix_openpt(3) is
available on all systems so we'll start with that and add the rest of
it manually.

*#

module pty
export (
	 openpty
	 forkpty
	 spawn
)

import libc

define (openpty & flags) "
Equivalent to :manpage:`openpty(3)`

:param flags: flags to posix_openpt, defaults to ``O_RDWR [| O_NOCTTY]``
:type flags: C/int, optional
:return: see below
:rtype: list
:raises ^system-error:

``openpty`` returns a tuple of :samp:`({mfd} {sfd} {ptsname})` for the
master file descriptor, `mfd`, slave file descriptor, `sfd`, and slave
terminal device name, `ptsname`.  `sfd` is an open file descriptor to
`ptsname` opened with `flags`.

``O_NOCTTY`` is not available on some systems.
" {
  mfd := apply posix_openpt flags
  grantpt mfd
  unlockpt mfd

  sn := ptsname mfd
  flags := #f
  (cond-expand
   ("uname/sysname/Darwin" {
     flags = O_RDWR
   })
   (else {
     flags = O_RDWR C/| O_NOCTTY
   }))

  sfd := open sn flags

  list mfd sfd sn
}

define (forkpty) "
Equivalent to :manpage:`forkpty(3)`

:return: see below
:rtype: list
:raises ^system-error:

``forkpty`` calls :ref:`pty/openpty <pty/openpty>` then forks and
returns a tuple of :samp:`({pid} {mfd})` for the Process ID returned
from :ref:`libc/fork <libc/fork>`, `pid`, and master file descriptor,
`mfd`.

In the child process, the process is set to be a session leader and
the slave file descriptor will be set as the controlling tty.

" {
  ptys := (openpty)

  pid := (fork)

  if (C/== pid 0pid_t) {
    ;; close mfd
    close (ph ptys)

    ;; new session
    (setsid)

    ;; At this point we need to provoke the system into using the tty
    ;; as a controlling tty.  This appears to be either by ioctl (sfd,
    ;; TIOCSCTTY) -- not available on Mac OS X -- or by an open of the
    ;; device.

    ;; The sample C code (look for the login_tty() source code) closes
    ;; stdin, stdout and stderr then opens/closes ttyname(sfd).  The
    ;; Python code does the open/close after the dup2()'s, next.

    ;; use sfd for stdin, stdout, stderr
    sfd := pht ptys
    dup2 sfd STDIN_FILENO
    dup2 sfd STDOUT_FILENO
    dup2 sfd STDERR_FILENO

    if (C/> sfd STDERR_FILENO) {
      close sfd
    }

    ;; tty -> controlling tty
    ctty-fd := open (phtt ptys) O_RDWR
    close ctty-fd
  } {
    ;; close sfd
    close (pht ptys)
    job-control/add-known-pid pid
  }

  list pid (ph ptys)
}

define (spawn-read fd) "
read some data from `fd`

:param fd: fd to read from
:type fd: C/int
:return: see :ref:`libc/read <libc/read>`
:raises ^system-error:

" {
  read fd 1024
}

define (spawn-copy-loop mfd m-read in-read) "
Nominal copy function:

write STDOUT_FILENO (`m-read` `mfd`)
write `mfd` (`in-read` STDIN_FILENO)

:param mfd: master file descriptor
:type mfd: C/int
:param m-read: read function
:type m-read: function
:param in-read: read function
:type in-read: function
:return: ``#<void>``
:raises ^system-error:

" {
  poller := make-poller (list mfd POLLIN) (list STDIN_FILENO POLLIN)

  loop :+ function #n {
    r := poller-poll poller
    if (not (null? r)) {
      for p in r {
	fd := ph p
	revents := pht p
	(cond
	 ((C/== mfd fd) {
	   (cond
	    ((POLLERR? revents) {
	      poller-deregister poller fd
	    })
	    ((POLLIN? revents) {
	      data := m-read fd
	      if data {
		if (eof-object? data) {
		  poller-deregister poller fd
		} {
		  n := write STDOUT_FILENO data
		  eprintf "write STDOUT %d / %d\n" n (string-length data)
		  (loop)
		}
	      }
	    }))
	 })
	 ((C/== STDIN_FILENO fd) {
	   (cond
	    ((POLLERR? revents) {
	      poller-deregister poller fd
	    })
	    ((POLLIN? revents) {
	      data := in-read fd
	      if data {
		if (eof-object? data) {
		  poller-deregister poller fd
		} {
		  n := write mfd data
		  eprintf "write mfd %d / %d\n" n (string-length data)
		  (loop)
		}
	      }
	    }))
	 }))
      }
    }
  }

  (loop)
}

define* (spawn argv (mreader spawn-read) (inreader spawn-read)) "
Spawn a process defined by `argv`

:param argv: command and argument list
:type argv: list
:param mreader: function to read from master device, defaults to simple internal function
:type mreader: function, optional
:param inreader: function to read from stdin, defaults to simple internal function
:type inreader: function, optional
:return: result from :ref:`waitpid`
:rtype: list
:raises ^system-error:

This function invokes a simple copy of data to and from the
sub-process.

" {
  fpty := (forkpty)
  pid := ph fpty
  mfd := pht fpty

  mode := tcgetattr STDIN_FILENO

  if (C/== pid 0pid_t) {
    apply command/%exec argv

    ;; just in case!
    (cond-expand
     (__SANITIZE_ADDRESS__ {
       Idio/exit 0
     })
     (else {
       libc/exit 0
     }))
  }

  ;; tty.setraw?

  spawn-copy-loop mfd mreader inreader

  tcsetattr STDIN_FILENO TCSAFLUSH mode

  close mfd
  waitpid pid
}

provide pty
