#*

Copyright (c) 2023 Ian Fitchet <idf(at)idio-lang.org>

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SRFI-37.idio

A port of SRFI-37 args-fold: a program argument processor.

We'll use regexec(3) here -- the original regular expressions
referenced were of the SRFI-115 variety.

As an argument processor, SRFI-37 isn't quite as convenient as it
could be so the nominal argument processing is handled by
argparse.idio which is derived from Chicken Scheme's args.scm (in the
chicken-args egg).  This is more akin to Python's argparse
module (hence the name).

;;; args-fold.scm - a program argument processor
;;;
;;; Copyright (c) 2002 Anthony Carrico
;;;
;;; All rights reserved.
;;;
;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.
;;; 3. The name of the authors may not be used to endorse or promote products
;;;    derived from this software without specific prior written permission.
;;;
;;; THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
;;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
;;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
;;; IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
;;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
;;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
;;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*#

module SRFI-37
export (
	 option
	 option-names
	 option-required-arg?
	 option-optional-arg?
	 option-processor
	 option?
	 args-fold
)

option               := #f
option-names         := #f
option-required-arg? := #f
option-optional-arg? := #f
option-processor     := #f
option?              := #f

{
  define-struct option-type names required-arg? optional-arg? processor

  option?              = option-type?
  option               = make-option-type
  option-names         = option-type-names
  option-required-arg? = option-type-required-arg?
  option-optional-arg? = option-type-optional-arg?
  option-processor     = option-type-processor
}

args-fold := function (args
		       options
		       unrecognized-option-proc
		       operand-proc
		       & seeds) {

  define (find l ?) {
    (cond
     ((null? l) #f)
     ((? (ph l)) (ph l))
     (else (find (pt l) ?)))
  }

  ;; ISSUE: This is a brute force search. Could use a table.
  define (find-option name) {
    find options (function (option)
     (find (option-names option) (function (test-name)
      (equal? name test-name))))
  }

  define (scan-short-options index shorts args seeds) {
    if (index eq (string-length shorts)) {
      scan-args args seeds
    } {
      name := string-ref shorts index
      option :=  (or (find-option name)
		     (option (list name)
			     #f
			     #f
			     unrecognized-option-proc))
      (cond
       ((and ((index + 1) lt (string-length shorts))
	     (or (option-required-arg? option)
		 (option-optional-arg? option)))
	 (let-values
	  ((seeds (apply (option-processor option)
			 option
			 name
			 (substring
			  shorts
			  (index + 1)
			  (string-length shorts))
			 seeds))) {
	    scan-args args seeds
	 }))
       ((and (or (option-required-arg? option)
		 (option-optional-arg? option))
	     (pair? args))
	 (let-values
	  ((seeds (apply (option-processor option)
			 option
			 name
			 (ph args)
			 seeds))) {
	    scan-args (pt args) seeds
	 }))
       ((option-optional-arg? option)
	 (let-values
	  ((seeds (apply (option-processor option)
			 option
			 name
			 #t
			 seeds))) {
	    scan-args args seeds
	 }))
       (else
	(let-values
	 ((seeds (apply (option-processor option)
			option
			name
			#f
			seeds))) {
	   scan-short-options (index + 1) shorts args seeds
	})))
    }
  }

  define (scan-operands operands seeds) {
    if (null? operands) {
      apply values seeds
    } {
      (let-values
       ((seeds (apply operand-proc
		      (ph operands)
		      seeds))) {
	 scan-operands (pt operands) seeds
      })
    }
  }

  define (scan-args args seeds) {
    if (null? args) {
      apply values seeds
    } {
      arg  := ph args
      args := pt args

      (regex-case
       arg
       ("^--$" {
	 ;; End option scanning:
	 (scan-operands args seeds)
       })
       ("^--([^=]+)=(.*)" {
	 ;; Found long option with arg:
	 (let*-values
	  (((name) r.1)
	   ((option-arg) r.2)
	   ((option)
	    (or (find-option name)
		(option (list name)
			#t
			#f
			unrecognized-option-proc)))
	   (seeds
	    (apply (option-processor option)
		   option
		   name
		   option-arg
		   seeds))) {
	    scan-args args seeds
	 })
       })
       ("^--([^=]+)" {
	 ;; Found long option:
	 name := r.1
	 option := (or (find-option name)
		       (option (list name)
			       #f
			       #f
			       unrecognized-option-proc))

	 (cond
	  ((and (pair? args)
		(or (option-required-arg? option)
		    ;; Squirrelly corner case: if an arg is optional
		    ;; then the following arg shouldn't look like an
		    ;; option.  (There are limits!)
		    (and (option-optional-arg? option)
			 (not (unicode=? #\- (string-ref (ph args) 0)))))) {
	    (let-values
	     ((seeds (apply (option-processor option)
			    option
			    name
			    (ph args)
			    seeds))) {
	       scan-args (pt args) seeds
	    })
	  })
	  ((option-optional-arg? option) {
	    (let-values
	     ((seeds (apply (option-processor option)
			    option
			    name
			    #t
			    seeds))) {
	       scan-args args seeds
	    })
	  })
	  (else {
	    (let-values
	     ((seeds (apply (option-processor option)
			    option
			    name
			    #f
			    seeds))) {
	       scan-args args seeds
	    })
	  }))
       })
       ("^-(.)$" {
	 ;; Found single short option -- we need the code point
	 name := string-ref r.1 0
	 option :=  (or (find-option name)
			(option (list name)
				#f
				#f
				unrecognized-option-proc))

	 if (and (pair? args)
		 (or (option-required-arg? option)
		     ;; Squirrelly corner case: if an arg is optional
		     ;; then the following arg shouldn't look like an
		     ;; option.  (There are limits!)
		     (and (option-optional-arg? option)
			  (not (unicode=? #\- (string-ref (ph args) 0)))))) {
	   (let-values
	    ((seeds (apply (option-processor option)
			   option
			   name
			   (ph args)
			   seeds))) {
	      scan-args (pt args) seeds
	   })
	 } {
	   (let-values
	    ((seeds (apply (option-processor option)
			   option
			   name
			   #t
			   seeds))) {
	      scan-args args seeds
	   })
	 }
       })
       ("^-(.+)$" {
	 ;; Found short options
	 shorts := r.1

	 scan-short-options 0 shorts args seeds
       })
       (else
	(let-values
	 ((seeds (apply operand-proc arg seeds))) {
	   scan-args args seeds
	})))
    }
  }

  scan-args args seeds
}

provide SRFI-37
