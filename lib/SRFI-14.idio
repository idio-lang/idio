#*

Copyright (c) 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>

Licensed under the Apache License, Version 2.0 (the "License"); you
may not use this file except in compliance with the License.  You
may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SRFI-14.idio

A port of SRFI-14 Character-set Library.

In particular, just the interfaces required for SRFI-115.

This was going to be a port of SRFI-14 character-sets library to be
modified with John Cowan's 2019 Unicode comments,
https://srfi.schemers.org/srfi-14/contrib/unicode-2019/CharsetDefs.html
as noted in https://srfi.schemers.org/srfi-14/srfi-14.html.

However with bitsets available as an Idio type (created for this
purpose) I think we can skip it and derive the nominal SRFI-14-ish
character sets from UnicodeData.txt (and others) directly.

----

The full Unicode tables are able to reference up to 2^21 code
points (1114112 elements) and yet Unicode Planes 4-13 are
unassigned (in Unicode 13.0) so we don't need to waste 8kB on each of
them saving 80kB *per* char-set if we can have a sparse char-set
instead.  (And we have a lot of char-sets so it's worth the time/space
tradeoff.)

The sparse-char-set is a size and an array of 17 bitsets, one per
plane where each bitset is up to 0x10000 (65536) bits.  A bitset is
only assigned if it is used so Planes 4-13 are #f with the exception
of char-set:full and char-set:nonl ("no newline") which, starting as
the complement of char-set:empty, must, by definition, have an entry
for all 17 Planes.

In practice, Plane 14 is only referenced by char-set:control and
char-set:extend-or-spacing-mark and Planes 15 and 16 are, by
definition, not referenced by Unicode themselves therefore will be #f
in these definitions.  By and large, then, another 24kB saved per
char-set.

*#

module SRFI-14
export (
	 make-sparse-char-set
	 char-set?
	 char-set-for-each-set
	 char-set
	 copy-char-set
	 string->char-set
	 char-set->string
	 ucs-range->char-set
	 char-set-contains?
	 char-upcase
	 char-downcase
	 char-set-ref
	 char-set-set!
	 char-set-clear!
	 and-char-set
	 ior-char-set
	 merge-char-set
	 xor-char-set
	 not-char-set
	 char-set-adjoin
	 char-set-adjoin!
	 char-set-delete
	 char-set-delete!
	 complement-char-set
	 complement-char-set!
	 union-char-set
	 union-char-set!
	 intersection-char-set
	 intersection-char-set!
	 difference-char-set
	 difference-char-set!
	 fold-char-set
)

import unicode

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; sparse-char-set is defined in usi-wrap.c

define-struct-accessors-only sparse-char-set size planes

define (sparse-char-set-as-string scs seen-scss) {
  if (sparse-char-set? scs) {
    r := (open-output-string)
    hprintf r "#<SI sparse-char-set"
    hprintf r " size=%d" (sparse-char-set-size scs)
    hprintf r " planes=%s" (sparse-char-set-planes scs)
    hprintf r ">"
    get-output-string r
  } #n
}

add-as-string sparse-char-set sparse-char-set-as-string

; refine make-sparse-char-set to only require size and create the
; first bitset.  It will use the planes if passed.
make-sparse-char-set = {
  orig-make := make-sparse-char-set

  function (size & o) "

Create a sparse-char-set of `size` elements.  If an array of 17
elements is also supplied it will be used as the planes of the
sparse-char-set otherwise an empty array of 17 elements will be used.

" {
    planes := #n
    if (and (pair? o)
	    (array? (ph o))
	    (17 eq (array-length (ph o)))) {
      planes = ph o
    } {
      planes = make-array 17
    }

    orig-make size planes
  }
}

define char-set? sparse-char-set?

define (char-set-size cs) {
  (cond
   ((sparse-char-set? cs) (sparse-char-set-size cs))
   (else (error/type ^rt-parameter-type-error 'char-set-size "not a char-set" cs)))
}

define (count-sparse-char-set-planes cs) "
Return the largest Unicode Plane used by this char-set.
" {
  (cond
   ((sparse-char-set? cs) (unicode->plane (integer->unicode ((sparse-char-set-size cs) - 1))))
   (else (error/type ^rt-parameter-type-error 'count-sparse-char-set-planes "not a char-set" cs)))
}

define char-set-planes count-sparse-char-set-planes

#*

char-set-for-each-set and, by extension, bitset-for-each-set, was
introduced to avoid an appalling inability for Idio to iterate over
the full Unicode bitsets calling a function on each in a timely
fashion (1114112 elements).

The offending caller is char-set-ci in SRFI-115 which wants to make
the char-set case insensitive which it does by looping over all
elements in the char-set finding the other case.  In principle it has
to do this twice, once for a lower-to-upper conversion and a second
for upper-to-lower.  Calling a function a million times where many of
the referenced elemnts were 0, ie. not present, took several seconds.

This is compounded in the particular case of a regular expression of
the form '(w/nocase "my string") which, by the nature of SRFI-115, is
converted into a nested set of char-sets each containing one code
point from the string.  In other words the slow loop over any
individual char-set is now compounded by the length of the string.
Yikes!  Minutes!

Character sets are not true bitsets (or collection of bitsets for
sparse-char-set) in the sense that they are logically a group of code
points that exist in this char-set.  Consider a character set of
English vowels.  That's a group of five characters (usually) and the
fact that it is implemented with a 65536 bitset in an array of 17
planes (mostly #f) is neither here nor there.  We should perform any
action on those five items only.

So iterating over elements of the group is a subset of all the
elements of the implementation's underlying array of bitsets and we
can casually ignore the 0 bits in the bitsets because they are not
code points in our group.

There is an interesting question of what the char-sets {size} is meant
to represent.  Is it the breadth of possible code points (currently,
yes) or the number of code points (set) in the char-set (probably
should be).

So, a bit if a hack where we only call the function for those bits
that are set which it is much easier to find by testing the unsigned
longs in the underlying implementation of bitset for non-zero values.

*#

define (char-set-for-each-set cs f) "
Invoke `f` on each code point in char-set `cs`
" {
  (cond
   ((sparse-char-set? cs) {
     nplanes := count-sparse-char-set-planes cs
     (do ((i 0 (i + 1)))
      ((i gt nplanes)
       #n)
      {
	bs := array-ref (sparse-char-set-planes cs) i
	if bs {
	  bitset-for-each-set bs f
	}
     })
   })
   (else (error/type ^rt-parameter-type-error 'char-set-for-each-set "not a char-set" cs)))
}

define (char-set & cps) "
Return a character set containing the given code points.

The character set will be the same size as :ref:`char-set:empty <SRFI-14/char-set:empty>`.
" {
  cs := make-sparse-char-set (sparse-char-set-size char-set:empty)
  loop :+ function (cps) {
    if (null? cps) cs {
      char-set-set! cs (ph cps)
      loop (pt cps)
    }
  }
  loop cps
}

define (copy-char-set cs) "
Return a copy of char-set `cs`
" {
  (cond
   ((sparse-char-set? cs) {
     new := make-sparse-char-set (sparse-char-set-size cs)
     nplanes := count-sparse-char-set-planes cs
     (do ((i 0 (i + 1)))
      ((i gt nplanes)
       new)
      {
	bs := array-ref (sparse-char-set-planes cs) i
	if bs {
	  array-set! (sparse-char-set-planes new) i (copy-bitset bs)
	}
     })
   })
   (else (error/type ^rt-parameter-type-error 'copy-char-set "not a char-set" cs)))
}

define (string->char-set str & base?) "

Return a char-set derived from the code points in `str`.  Use
:ref:`char-set:empty <SRFI-14/char-set:empty>` as the inital char-set
unless `base?` is supplied.

:param str: string to use to set code points
:type str: string
:param base?: initial char-set, defaults to :ref:`char-set:empty <SRFI-14/char-set:empty>`
:type base?: char-set, optional

" {
  cs := #n
  if (pair? base?) {
    cs? := ph base?
    if (char-set? cs?) {
      cs = copy-char-set cs?
    } (error/type ^rt-parameter-type-error 'string->char-set "not a char-set" cs?)
  } {
    cs = copy-char-set char-set:empty
  }

  slen := string-length str
  (do ((i 0 (i + 1)))
   ((i ge slen)
    cs)
   {
     char-set-set! cs (string-ref str i)
  })
}

define (char-set->string cs) "

Return a string derived from the code points in `cs`.

" {
  n := fold-char-set cs (function (cp i) (+ i 1)) 0
  m := fold-char-set cs (function (cp max) {
    if (cp gt max) cp max
  }) 0
  s := make-string n (integer->unicode m)
  i := 0
  char-set-for-each-set cs (function (cp) {
    string-set! s i (integer->unicode cp)
    i = i + 1
  })
  s
}

define (%ucs-range->char-set bs n e) {
  if (n gt e) #n {
    char-set-set! bs n
    %ucs-range->char-set bs (n + 1) e
  }
}
define (ucs-range->char-set s e & base?) "

Return a char-set derived from the range of code points from `s` to
`e` inclusive.  Use :ref:`char-set:empty <SRFI-14/char-set:empty>` as
the inital char-set unless `base?` is supplied.

:param s: starting code point
:type s: unicode
:param e: ending code point
:type e: unicode
:param base?: initial char-set, defaults to :ref:`char-set:empty <SRFI-14/char-set:empty>`
:type base?: char-set, optional

" {
  cs := #n
  if (pair? base?) {
    cs? := ph base?
    if (char-set? cs?) {
      cs = copy-char-set cs?
    } (error/type ^rt-parameter-type-error 'ucs-range->char-set "not a char-set" cs?)
  } {
    cs = copy-char-set char-set:empty
  }
  %ucs-range->char-set cs s e
  cs
}

define (char-upcase cp) "
Return the uppercase variant of ``cp`` if one exists or cp

:param cp: code point
:type cp: unicode
:return: uppercase variant of ``cp``
:rtype: unicode
"  {
  ->Uppercase cp
}

define (char-downcase cp) "
Return the lowercase variant of ``cp`` if one exists or cp

:param cp: code point
:type cp: unicode
:return: lowercase variant of ``cp``
:rtype: unicode
"{
  ->Lowercase cp
}

define (char-set-ref cs cp) "
Is the code point cp in the character set cs?
" {
  if (integer? cp) {
    cp = integer->unicode cp
  }

  (cond
   ((sparse-char-set? cs) {
     if (ge (unicode->integer cp) (sparse-char-set-size cs)) (error/type ^rt-parameter-value-error 'char-set-ref "cp greater than char-set size" cp (sparse-char-set-size cs))

     bs := array-ref (sparse-char-set-planes cs) (unicode->plane cp)
     if bs {
       bitset-ref bs (unicode->plane-codepoint cp)
     } #f
   })
   (else (error/type ^rt-parameter-type-error 'char-set-ref "not a char-set" cs)))
}

define char-set-contains? char-set-ref

define (char-set-set! cs cp) "
Add the code point to character set cs.
" {
  if (integer? cp) {
    cp = integer->unicode cp
  }

  (cond
   ((sparse-char-set? cs) {
     if (ge (unicode->integer cp) (sparse-char-set-size cs)) (error/type ^rt-parameter-value-error 'char-set-set! "cp greater than char-set size" cp (sparse-char-set-size cs))

     plane := unicode->plane cp
     bs := array-ref (sparse-char-set-planes cs) plane

     if (not bs) {
       nplanes := count-sparse-char-set-planes cs
       if (plane lt nplanes) {
	 bs = make-bitset #x10000
       } {
	 m := modulo (sparse-char-set-size cs) #x10000
	 if (m gt 0) {
	   bs = make-bitset m
	 } {
	   bs = make-bitset #x10000
	 }
       }
       array-set! (sparse-char-set-planes cs) plane bs
     }

     bitset-set! bs (unicode->plane-codepoint cp)
   })
   (else (error/type ^rt-parameter-type-error 'char-set-set! "not a char-set" cs)))
}

define (char-set-clear! cs cp) "
Remove the code point from character set cs.
" {
  if (integer? cp) {
    cp = integer->unicode cp
  }

  (cond
   ((sparse-char-set? cs) {
     if (ge (unicode->integer cp) (sparse-char-set-size cs)) (error/type ^rt-parameter-value-error 'char-set-clear! "cp greater than char-set size" cp (sparse-char-set-size cs))

     bs := array-ref (sparse-char-set-planes cs) (unicode->plane cp)
     if bs {
       bitset-clear! bs (unicode->plane-codepoint cp)
     } {
       ;; we're clearing a bit in a non-existent plane.  NOP
       bs
     }
   })
   (else (error/type ^rt-parameter-type-error 'char-set-clear! "not a char-set" cs)))
}

define (char-set-adjoin-loop cs cps) {
  if (null? cps) #n {
    setter! := #n
    (cond
     ((sparse-char-set? cs) (setter! = char-set-set!))
     (else (error/type ^rt-parameter-type-error 'char-set-adjoin "not a char-set" cs)))
    ch := (ph cps)
    (cond
     ((integer? ch) (setter! cs ch))
     ((unicode? ch) (setter! cs (unicode->integer ch))))
    char-set-adjoin-loop cs (pt cps)
  }
}

define (char-set-adjoin cs & cps) "
Add the code points to character set cs.
" {
  if (null? cps) cs {
    ncs := copy-char-set cs
    char-set-adjoin-loop ncs cps
    ncs
  }
}

define (char-set-adjoin! cs & cps) "
Add the code points to character set cs with side-effects.
"{
  if (null? cps) cs {
    char-set-adjoin-loop cs cps
    cs
  }
}

define (char-set-delete-loop cs cps) {
  if (null? cps) #n {
    ch := (ph cps)
    clearer! := #n
    (cond
     ((sparse-char-set? cs) (clearer! = char-set-set!))
     (else (error/type ^rt-parameter-type-error 'char-set-delete "not a char-set" cs)))
    (cond
     ((integer? ch) (clearer! cs ch))
     ((unicode? ch) (clearer! cs (unicode->integer ch))))
    char-set-delete-loop cs (pt cps)
  }
}

define (char-set-delete cs & cps) "
Delete the code points from character set cs.
" {
  if (null? cps) cs {
    ncs := copy-char-set cs
    char-set-delete-loop ncs cps
    ncs
  }
}

define (char-set-delete! cs & cps) "
Delete the code points from character set cs with side-effects.
" {
  if (null? cps) cs {
    char-set-delete-loop cs cps
    cs
  }
}

define (and-char-set & css) "
Logical AND the code points from the character sets.

If no arguments are passed the return value is :ref:`char-set:empty <SRFI-14/char-set:empty>`.
" {
  loop :+ function (css res) {
    if (null? css) res {
      cs := ph css
      (cond
       ((sparse-char-set? res) {
	 nplanes := count-sparse-char-set-planes res
	 (do ((i 0 (i + 1)))
	  ((i gt nplanes)
	   res)
	  {
	    bs1 := array-ref (sparse-char-set-planes res) i
	    bs2 := array-ref (sparse-char-set-planes cs) i
	    array-set! (sparse-char-set-planes res) i (cond ((not bs1) bs1)
	     ((not bs2) bs2)
	     (else (and-bitset bs1 bs2)))
	 })

       })
       (else (error/type ^rt-parameter-type-error 'and-char-set "not a char-set" cs)))

      loop (pt css) res
    }
  }

  if (null? css) (copy-char-set char-set:empty) {
    loop (pt css) (copy-char-set (ph css))
  }
}

define (ior-char-set & css) "
Logical Inclusive OR the code points from the character sets.

If no arguments are passed the return value is :ref:`char-set:full <SRFI-14/char-set:full>`.
" {
  loop :+ function (css res) {
    if (null? css) res {
      cs := ph css
      (cond
       ((sparse-char-set? res) {
	 nplanes := count-sparse-char-set-planes res
	 (do ((i 0 (i + 1)))
	  ((i gt nplanes)
	   res)
	  {
	    bs1 := array-ref (sparse-char-set-planes res) i
	    bs2 := array-ref (sparse-char-set-planes cs) i
	    array-set! (sparse-char-set-planes res) i (cond ((not bs1) bs2)
	     ((not bs2) bs1)
	     (else (ior-bitset bs1 bs2)))
	 })

       })
       (else {
	 (error/type ^rt-parameter-type-error 'ior-char-set "not a char-set" cs)
       }))

      loop (pt css) res
    }
  }

  if (null? css) (copy-char-set char-set:full) {
    loop (pt css) (copy-char-set (ph css))
  }
}

define merge-char-set ior-char-set

define (xor-char-set & css) "
Logical eXclusive OR the code points from the character sets.

If no arguments are passed the return value is :ref:`char-set:empty <SRFI-14/char-set:empty>`.
" {
  loop :+ function (css res) {
    if (null? css) res {
      cs := ph css
      (cond
       ((sparse-char-set? res) {
	 nplanes := count-sparse-char-set-planes res
	 (do ((i 0 (i + 1)))
	  ((i gt nplanes)
	   res)
	  {
	    bs1 := array-ref (sparse-char-set-planes res) i
	    bs2 := array-ref (sparse-char-set-planes cs) i
	    array-set! (sparse-char-set-planes res) i (cond ((not bs1) bs2)
	     ((not bs2) bs1)
	     (else (xor-bitset bs1 bs2)))
	 })

       })
       (else (error/type ^rt-parameter-type-error 'xor-char-set "not a char-set" cs)))

      loop (pt css) res
    }
  }

  if (null? css) (copy-char-set char-set:empty) {
    loop (pt css) (copy-char-set (ph css))
  }
}

define (not-char-set cs) "
Logical complement the code points from the character set.
" {
  (cond
   ((sparse-char-set? cs) {
     new := make-sparse-char-set (sparse-char-set-size cs)
     nplanes := count-sparse-char-set-planes cs
     (do ((i 0 (i + 1)))
      ((i gt nplanes)
       new)
      {
	bs := array-ref (sparse-char-set-planes cs) i
	if bs {
	  array-set! (sparse-char-set-planes new) i (not-bitset bs)
	} {
	  m := modulo (sparse-char-set-size cs) #x10000
	  if (m gt 0) {
	    bs = make-bitset m
	  } {
	    bs = make-bitset #x10000
	  }
	  array-set! (sparse-char-set-planes new) i (not-bitset bs)
	}
     })

   })
   (else (error/type ^rt-parameter-type-error 'not-char-set "not a char-set" cs)))
}

define complement-char-set not-char-set

define (complement-char-set! cs) "
Complement the code points from character set cs with side-effects.
" {
  cs = not-char-set cs
}

define (subtract-char-set cs & css) "
Subtract the code points of the character sets css from cs.
" {
  loop :+ function (css res) {
    if (null? css) res {
      cs := ph css
      (cond
       ((sparse-char-set? res) {
	 nplanes := count-sparse-char-set-planes res
	 (do ((i 0 (i + 1)))
	  ((i gt nplanes)
	   res)
	  {
	    bs1 := array-ref (sparse-char-set-planes res) i
	    bs2 := array-ref (sparse-char-set-planes cs) i
	    array-set! (sparse-char-set-planes res) i (cond ((not bs1) bs2)
	     ((not bs2) bs1)
	     (else (subtract-bitset bs1 bs2)))
	 })

       })
       (else (error/type ^rt-parameter-type-error 'subtract-char-set "not a char-set" cs)))

      loop (pt css) res
    }
  }

  if (null? css) (copy-char-set cs) {
    loop css (copy-char-set cs)
  }
}

define union-char-set ior-char-set

define (union-char-set! & css) "
Union of the code points from character set cs with side-effects.

If no arguments are passed the return value is a copy of :ref:`char-set:empty <SRFI-14/char-set:empty>`.
" {
  if (pair? css) {
    apply union-char-set css
  } {
    copy-char-set char-set:empty
  }
}

define intersection-char-set and-char-set

define (intersection-char-set! & css) "
Intersection of the code points from character set cs with side-effects.

If no arguments are passed the return value is a copy of :ref:`char-set:full <SRFI-14/char-set:full>`.
" {
  if (pair? css) {
    apply and-char-set css
  } {
    copy-char-set char-set:full
  }
}

define (difference-char-set cs & css) "
Subtract the code points of the character sets css from cs.
" {
  if (pair? css) {
    apply subtract-char-set cs css
  } {
    cs
  }
}

define (difference-char-set! cs & css) "
Subtract the code points of the character sets css from cs with
side-effects.
" {
  if (pair? css) {
    cs = apply subtract-char-set cs css
  } {
    cs
  }
}

define (fold-char-set cs f v) "
Invoke `f` on each code point in char-set `cs` and `v` returning the accumulated `v`
" {
  (cond
   ((sparse-char-set? cs) {
     nplanes := count-sparse-char-set-planes cs
     (do ((i 0 (i + 1)))
      ((eq i nplanes)
       v)
      {
	bs := array-ref (sparse-char-set-planes cs) i
	if bs {
	  v = fold-bitset bs f v
	}
     })
   })
   ((bitset? cs) {
     fold-bitset cs f v
   })
   (else (error/type ^rt-parameter-type-error 'fold-char-set "not a char-set" cs)))
}

provide SRFI-14
