;;
;; Copyright (c) 2015, 2017, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; common.idio
;;

define (atom? x) "predicate to test if object is an atom

:param x: object to test
" {
  not (pair? x)
}

define-template (defined? s) {
  #T{
    %defined? '$s
  }
}

;; http://stackoverflow.com/questions/15552057/is-it-possible-to-implement-define-template-in-mit-scheme
define-syntax define-syntax-rule (syntax-rules ()
    ((define-syntax-rule (name & pattern) template)
     (define-syntax name
       (syntax-rules ()
         ((name & pattern) template)))))

define-syntax-rule (when test body ...) (
  if test (begin body ...)
)

define-syntax-rule (unless test body ...) (
  if (not test) (begin body ...)
)

define-template (suppress-errors! conds & cmd) {
  #T{
    trap $conds (function (c) {
		   ;; What should we return?  Something hard to mistake for a
		   ;; possible normal value.  Probably.
		   (void)
    }) {
      if (pair? (ph '$cmd)) {
	$@cmd
      } $cmd
    }
  }
}

;; SRFI-8 receive
;; (define-syntax receive
;;   (syntax-rules ()
;;     ((receive formals expression body ...)
;;      (call-with-values (lambda () expression)
;;                        (lambda formals body ...)))))

define-syntax with-values-from \
  (syntax-rules ()
    ((with-values-from formals expression body ...)
     (call-with-values (function () expression) (function formals body ...))))

define (display* & x*) {
  p :+ function (x* first) {
	 if (not (null? x*)) {
	   if (not first) (write-char #\{space})
	   display (ph x*)
	   p (pt x*) #f
	 }
  }

  p x* #t
  (newline)
}

define (ewrite x) {
  write x (current-error-handle)
}

define (edisplay x) {
  display x (current-error-handle)
}

define (edisplay* & x*) {
  p :+ function (x* first) {
	 if (not (null? x*)) {
	   if (not first) (write-char #\{space} (current-error-handle))
	   edisplay (ph x*)
	   p (pt x*) #f
	 }
  }

  p x* #t
  newline (current-error-handle)
}

#*

%%value-as-string is a nominally generic mechanism to associate a
user-defined printer with a value.

In practice it is only used for struct instances where the struct type
is associated with a printer and when we come to print a struct
instance we check to see if a printer exists for its type.

The printer will be invoked with the value to be printed and an inital
#n.  The second argument can be used for any subsequent purpose but
might normally be used to maintain a set of previously seen values to
handle circular data structures.

*#

define (add-as-string o f) "
Associate a printer function `f` with `o`.

`f` will be invoked with the value to be printed and #n.

The second argument can be used for any subsequent purpose but might
normally be used to maintain a set of previously seen values to handle
circular data structures.

This is currently only used for:

- struct instances where a struct type was associated with a printer.
  When we come to print a struct instance we check to see if a printer
  exists for its type.

- C pointer types where an IDIO_C_STRUCT_IDENT has been set up and
  assigned to the pointer

" {
  %%add-as-string o f
}

#*

To support the formatted printing of values we can enable a couple of
dynamic scope variables which advise as to the requested
format (mostly number format, say, decimal or hexadecimal) and the
precision of that format.

They are advisory.

Set the default to be false so you can quickly check with a
conditional form.

*#

idio-print-conversion-format :~ #f
idio-print-conversion-precision :~ #f

#*

If the bootsrap fails, we need a couple of auxilliary functions which
will be overwritten in due course

*#

define (ASCII-numeric? x) {
  if (or (eqv? x #\0)
	 (eqv? x #\1)
	 (eqv? x #\2)
	 (eqv? x #\3)
	 (eqv? x #\4)
	 (eqv? x #\5)
	 (eqv? x #\6)
	 (eqv? x #\7)
	 (eqv? x #\8)
	 (eqv? x #\9)) #t #f
}

define (%format type fmt & args) "

Return a string from the format string ``fmt`` expanded by any escape
sequences.

If `type` is 'args then a % character in the format string starts an
escape sequence which has the general form %[flags][width][.prec]K
where K is a printf(3)-ish format character with arguments in `args`.

If K is an @ character then the list argument is spliced into the
string converting all elements of the list to string form separated by
a U+0022 (SPACE) character.

If `type` is 'keyed then a % character in the format string starts an
escape sequence which has the general form %[flags][width][.prec]K
where K is a single Unicode code point (satisfying
unicode-alphabetic?) which is expected to be a key in the optional
hash table -- unless it is another % character.  The value associated
with the key will be printed according to the specification.

In both cases:

* if K is a % character then a % is printed according to the
  specification

If `type` is 'timeformat then it works similarly to 'keyed except we
avoid a double application of any precision.  TIMEFORMAT describes a
%f-like precision to the struct timeval strings.

The flags are:

* '-' left align the output within width if applicable.
* ' ' use #\{space} as the left padding character
* '0' use #\0 as the left padding character

The default padding character is #\{space}
" {
  orig-ipcf := idio-print-conversion-format
  orig-ipcp := idio-print-conversion-precision

  unwind-protect {
    osh := (open-output-string)
    data := #n
    timeformat := #f
    if (eq? type 'timeformat) {
      timeformat = #t
      type = 'keyed
    }
    (cond
     ((eq? type 'args))
     ((eq? type 'keyed) {
       if (pair? args) {
	 data = ph args
	 if (not (hash? data)) (error '%format "not a hash table" data)
       }
     })
     (else (error '%format "unexpected format type" type)))

    cp-loop :+ (function (i e) {
		  if (i ge e) #n {
		    c := string-ref fmt i

		    (cond
		     ((unicode=? c #\%) {

		       ;; flags
		       i+1 := i + 1
		       left-aligned := #f
		       left-pad := #U+20
		       if (i+1 lt e) {
			 c = string-ref fmt i+1
			 (cond
			  ((unicode=? c #\-) {
			    left-aligned = #t
			    i = i+1
			  })
			  ((unicode=? c #U+20) {
			    left-pad = c
			    i = i+1
			  })
			  ((unicode=? c #\0) {
			    left-pad = c
			    i = i+1
			  }))
		       }

		       ;; width
		       ws := i + 1
		       we := ws
		       w-loop :+ (function (i) {
				    i+1 := i + 1
				    c = string-ref fmt i+1
				    if (ASCII-numeric? c) {
				      we = we + 1
				      w-loop i+1
				    } i
		       })

		       i = w-loop i

		       spec-width := 0
		       if ((we - ws) gt 0) {
			 wstr := substring fmt ws we
			 spec-width = read-number wstr 10
		       }

		       ;; precision (preceded by a dot)
		       ps := i + 1
		       pe := ps
		       if (unicode=? (string-ref fmt (i + 1)) #\.) {
			 i = i + 1
			 ps = i + 1
			 pe = ps
			 p-loop :+ (function (i) {
				      i+1 := i + 1
				      c = string-ref fmt i+1
				      if (ASCII-numeric? c) {
					pe = pe + 1
					p-loop i+1
				      } i
			 })

			 i = p-loop i
		       }

		       spec-prec := 0
		       if ((pe - ps) gt 0) {
			 pstr := substring fmt ps pe
			 spec-prec = read-number pstr 10
			 idio-print-conversion-precision = spec-prec
		       }

		       if (i lt e) {
			 i = i + 1
			 k := string-ref fmt i
			 v := #n
			 vs := #n
			 vs-len := #n

			 (cond
			  ((eq? type 'keyed) {
			    (cond
			     ((unicode=? k #\%) {
			       v = k
			       vs = "%"
			       vs-len = 1
			     })
			     ((unicode-alphabetic? k) {
			       v = hash-ref data k #f
			       if (not v) {
				 eprintf "%format: %s is not a key in data\n" k
			       }

			       if (and (unicode=? left-pad #\0)
				       (not (number? v))) {
					 left-pad = #U+20
				       }

			       (cond
				((fixnum? v) {
				  idio-print-conversion-format = #\d
				})
				((bignum? v) {
				  ; %f format!
				  idio-print-conversion-format = #\f
				})
				(else {
				  idio-print-conversion-format = #\s
				}))
			     })
			     (else {
			       eprintf "%format: '%s' is not a Unicode graphic code point\n" k
			     }))

			    vs = display-string v
			    vs-len = string-length vs
			  })
			  ((eq? type 'args) {
			    (cond
			     ((unicode=? k #\%) {
			       v = k
			       vs = "%"
			       vs-len = 1
			     })
			     ((unicode=? k #\@) {
			       if (null? args) {
				 eprintf "not enough args for %%%s at .%d in %s\n" k i fmt
				 error '%format "not enough args for %" k
			       }

			       v = ph args
			       args = pt args

			       vs = ""
			       c := 0
			       for-each (function (e) {
					   if (c gt 0) {
					     vs = append-string vs " "
					   }
					   if (fixnum? e) {
					     vs = append-string vs (sprintf "%d" e)
					   } {
					     vs = append-string vs (sprintf "%s" e)
					   }
					   c = c + 1
			       }) v
			       vs-len = string-length vs
			     })
			     (else {
			       if (null? args) {
				 eprintf "not enough args for %%%s at .%d in %s\n" k i fmt
				 error '%format "not enough args for %" k
			       }

			       v = ph args
			       args = pt args

			       idio-print-conversion-format = k

			       vs = display-string v
			       vs-len = string-length vs
			     }))
			  }))

			 ;; avoid re-application of precision in puts
			 idio-print-conversion-format = orig-ipcf
			 idio-print-conversion-precision = orig-ipcp

			 vs-prec-width := vs-len
			 vs-prec := vs

			 ; precision means different things to different
			 ; types
			 if (spec-prec gt 0) {
			   (cond
			    ((and (number? v)
				  (spec-prec gt vs-len)) {
				    ; for a number, a precision is
				    ; the minimum number of digits
				    ; which potentially means
				    ; left-padding with 0s
				    vs-prec-width = spec-prec
				  })
			    ((and (not (number? v))
				  (spec-prec lt vs-len)
				  (not timeformat)) {
				    ; for a string, a precision is
				    ; the maximum number of code
				    ; points to print
				    ;
				    ; but don't re-apply precision
				    ; for timeformat
				    vs-prec-width = spec-prec
				    vs-prec = substring vs 0 spec-prec
				  }))
			 }

			 pad-loop :+ (function (c n) {
					if (n le 0) #n {
					  write-char c osh
					  pad-loop c (n - 1)
					}
			 })

			 ; left padding has two parts, a bit like the
			 ; HTML box model: a margin, padding and then the
			 ; object.
			 if (not left-aligned) {
			   if (vs-prec-width lt spec-width) {
			     ; might print nothing!
			     pad-loop left-pad (spec-width - vs-prec-width)
			   }
			 }
			 if (and (number? v)
				 (vs-len lt spec-prec)) {
				   pad-loop #\0 (spec-prec - vs-len)
				 }

			 puts vs-prec osh

			 if (and left-aligned
				 (vs-prec-width lt spec-width)) {
				   ; might print nothing!
				   pad-loop #U+20 (spec-width - vs-prec-width)
				 }
		       }
		     })
		     (else {
		       write-char c osh
		     }))
		    cp-loop (i + 1) e
		  }
    })

    cp-loop 0 (string-length fmt)

    get-output-string osh
  } {
    idio-print-conversion-format = orig-ipcf
    idio-print-conversion-precision = orig-ipcp
  }
}

define (format fmt & args) "
Call %format with 'args
" {
  apply %format 'args fmt args
}

define (hprintf handle fmt & args) "

Invoke the ``display`` function on ``handle`` with the result of
applying ``format`` to ``fmt`` and ``args``.

:param handle: the handle to load from
:type handle: handle
:param fmt: the format string for printf
:type fmt: string
:param args: any args for the format string
:type args: list

:return: #unspec
" {
  display (apply format fmt args) handle
}

define (printf fmt & args) "

Invoke the ``hprintf`` function on the current output handle with
``fmt`` and ``args``

:param fmt: the format string for printf
:type fmt: string
:param args: any args for the format string
:type args: list

:return: #unspec
" {
  apply hprintf (current-output-handle) fmt args
}

define (eprintf fmt & args) "

Invoke the ``hprintf`` function on the current error handle with
``fmt`` and ``args``

:param fmt: the format string for printf
:type fmt: string
:param args: any args for the format string
:type args: list

:return: #unspec
" {
  apply hprintf (current-error-handle) fmt args
}

define (sprintf fmt & args) "

Invoke the ``hprintf`` function on an output string handle with
``fmt`` and ``args`` and return the resultant string

:param fmt: the format string for printf
:type fmt: string
:param args: any args for the format string
:type args: list

:return: string
" {
  osh := (open-output-string)

  apply hprintf osh fmt args

  get-output-string osh
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; time proc [args]

TIMEFORMAT :~ "Real %.3R\nUser %.3U\nSyst %.3S\n"

define (hms t) {
  s := t
  m := 0
  h := 0

  if (s ge 60) {
    m = mantissa (floor (s / 60))
    s = s - (m * 60)
  }

  if (m ge 60) {
    h = mantissa (floor (m / 60))
    m = m - (h * 60)
  }

  (cond
   ((h gt 0) {
     sprintf "%d:%02d:%02.3f" h m s
   })
   ((m gt 0) {
     sprintf "%d:%02.3f" m s
   })
   (else {
     sprintf "%02.3f" s
   }))
}

define (times) "
Report the User and System time for the shell and its children
" {
  t := (libc/times)
  tms := pht t

  CT := C/->integer libc/CLK_TCK

  utime := (C/->integer (libc/struct-tms-ref tms 'tms_utime)) / CT
  stime := (C/->integer (libc/struct-tms-ref tms 'tms_stime)) / CT
  cutime := (C/->integer (libc/struct-tms-ref tms 'tms_cutime)) / CT
  cstime := (C/->integer (libc/struct-tms-ref tms 'tms_cstime)) / CT

  printf "U=%s S=%s CU=%s CS=%s\n" (hms utime) (hms stime) (hms cutime) (hms cstime)
}

define (time-command proc & args) "
Return a list of the result and Real, User and System time for the
invocation of

proc [args]

The Real, User and System times are C struct timevals.

This takes after Bash's time_command
" {
  tv-before := (libc/gettimeofday)
  rus-before := libc/getrusage libc/RUSAGE_SELF
  ruc-before := libc/getrusage libc/RUSAGE_CHILDREN

  r := apply proc args

  tv-after := (libc/gettimeofday)
  rus-after := libc/getrusage libc/RUSAGE_SELF
  ruc-after := libc/getrusage libc/RUSAGE_CHILDREN

  #*

  This is the same calculation as Bash uses, for better or for worse.
  I'm not sure how accurate it is other than being broadly indicative.

  The problem is that RUSAGE_CHILDREN represents all descendent
  processes that have terminated and been waited on.  (It does not
  include any not yet terminated and waited on descendents.)

  So, here at least, we assume it was the job we just ran with the
  apply clause above but maybe it was also the other jobs that just
  finished and wait-for-job has run for off the back of a SIGCHLD.

  Confusing the issue, wait-for-job also has the responsibility of
  reporting on any pipelined jobs' usage.

  Dunno.  I guess if you're pretty confident that you only had one
  thing running (and now completed) then this usage is probably fairly
  accurate.

  If you'd fired off a dozen jobs in the background that completed
  whilst this job was running then you can be less confident (as can
  wait-for-job if it is reporting on those jobs).

  On the plus side, tv-real (elapsed real time) should be
  accurate. Erm, except that the *end* time is dependent on when
  wait-for-job wakes up.

  *#

  tv-real := libc/subtract-struct-timeval tv-after tv-before
  tv-utime := (libc/add-struct-timeval
	       (libc/subtract-struct-timeval (libc/struct-rusage-ref rus-after  'ru_utime)
					     (libc/struct-rusage-ref rus-before 'ru_utime))
	       (libc/subtract-struct-timeval (libc/struct-rusage-ref ruc-after  'ru_utime)
					     (libc/struct-rusage-ref ruc-before 'ru_utime)))

  tv-stime := (libc/add-struct-timeval
	       (libc/subtract-struct-timeval (libc/struct-rusage-ref rus-after  'ru_stime)
					     (libc/struct-rusage-ref rus-before 'ru_stime))
	       (libc/subtract-struct-timeval (libc/struct-rusage-ref ruc-after  'ru_stime)
					     (libc/struct-rusage-ref ruc-before 'ru_stime)))

  list r tv-real tv-utime tv-stime
}

define (time proc & args) "
Report the Real, User and System time for the invocation of

proc [args]

The report format is defined in `TIMEFORMAT`.

This takes after Bash's time_command
" {
  rusage-data := apply time-command proc args

  h := (make-hash)
  hash-set! h #\R (pht rusage-data)
  hash-set! h #\U (phtt rusage-data)
  hash-set! h #\S (phtt rusage-data)

  printf "%s" (%format 'timeformat TIMEFORMAT h)
  ph rusage-data
}

