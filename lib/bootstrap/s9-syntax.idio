;;
;; Copyright (c) 2015-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; s9-syntax.idio
;;

;; ported from
;;
;; Scheme 9 from Empty Space
;; By Nils M Holm <nmh@t3x.org>, 2007,2008,2009
;;

;; Some obvious procedures first

;; these are not used in anger in the Idio code base and so exist for
;; completeness for the test suite -- the missing obvious others are
;; defined as primitives for efficiency
define (phht x) (ph (pht x))
define (pthh x) (pt (phh x))
define (ptht x) (pt (pht x))

define (phhhh x) (phh (phh x))
define (phhht x) (phh (pht x))
define (phhth x) (phh (pth x))
define (phhtt x) (phh (ptt x))
define (phthh x) (pht (phh x))
define (phtht x) (pht (pht x))
;; define (phtth x) (pht (pth x))	; phtth is used in the code-base
define (phttt x) (pht (ptt x))
define (pthhh x) (pth (phh x))
define (pthht x) (pth (pht x))
define (pthth x) (pth (pth x))
define (pthtt x) (pth (ptt x))
define (ptthh x) (ptt (phh x))
define (pttht x) (ptt (pht x))
define (pttth x) (ptt (pth x))
define (ptttt x) (ptt (ptt x))

define (map-ph f a) "map-ph: mapph1 a r" {
  mapph1 :+ function (a r) {
    if (null? a) {
      reverse! r
    } {
      mapph1 (pt a) (pair (f (ph a)) r)
    }
  }

  mapph1 a '#n
}

map := {
  ph-of := ph-of
  pt-of := pt-of

  function/name map (f & a*) {
    map2 :+ function (a* r) {
      if (null? (ph a*)) {
	reverse! r
      } {
	map2 (pt-of a*) (pair (apply f (ph-of a*))
			      r)
      }
    }

    ;; we can iterate over the elements of arrays -- but not over the
    ;; keys of hash tables as there's no (reliable) ordering to ensure
    ;; the function gets called with the same n keys if the hash
    ;; tables are perturbed
    if (pair? a*) {
      (cond
       ((array? (ph a*)) {
	 a* = map-ph array->list a*
       })
       ((string? (ph a*)) {
	 a* = map-ph string->list a*
       }))
    }

    if (null? a*) {
      error/type ^rt-parameter-error 'map "too few arguments"
    } {
      map2 a* '#n
    }
  }
}

define (for-each f & a*) {
  if (null? a*) {
    error/type ^rt-parameter-error 'for-each "too few arguments"
  } {
    apply map f a*
  }
  (void)
}

define-template (case key & clauses) {
  gen-clauses :+ function (k c*) {
    (cond
     ((null? c*) '#n)
     ((or (not (pair? c*))
	  (not (pair? (ph c*)))
	  (not (pair? (pth c*)))) (error/type ^rt-syntax-error 'case "invalid syntax" c*))
     ((null? (pt c*)) {
       if (eq? 'else (phh c*)) {
	 #T{ ((else $@(pth c*))) }
       } {
	 #T{ (((memv $k '$(phh c*)) $@(pth c*))) }
       }
     })
     (else {
       #T{ (((memv $k '$(phh c*)) $@(pth c*)) $@(gen-clauses k (pt c*))) }
     }))

  }

  k := (gensym)
  #T{
    {
      $k := $key
      (cond $@(gen-clauses k clauses))
    }
  }
}

