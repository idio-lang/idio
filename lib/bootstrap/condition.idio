;;
;; Copyright (c) 2015, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; condition.idio
;;


;; define-condition-type/accessors name super pred & fields
;; field == (field accessor)
define-template (define-condition-type/accessors name parent pred-fname & fields) {
  #T{
    define $name (make-condition-type '$name $parent $@(map (function (field) { #T{ '$(ph field) } }) fields))

    define-condition-type-accessors-only $name $parent $pred-fname $@fields
  }
}

;; define-condition-type-accessors-only name super pred & fields
;; field == (field accessor)
;;
;; We have this two-step shimmy as the basic conditions (eg. ^error)
;; are defined in C-land for internal use yet the predicate/accessors
;; are defined here, in Idio-land, as it is much easier (and C never
;; uses them anyway).
;;
;; If we (re-)defined those conditions here as well then we'd have two
;; distinct objects with the same name.  Which is generally considered
;; to be "an issue."
define-template (define-condition-type-accessors-only name parent pred-fname & fields) {
  arg := gensym 'arg

  #T{
    define ($pred-fname $arg) {
      (and (condition? $arg)
	   (condition-isa? $arg $name))
    }

    $@(map (function (field) {
	      #T{
		define ($(pht field) $arg) {
                  if ($pred-fname $arg) {
                    condition-ref $arg '$(ph field)
		  } {
		    error/type ^rt-parameter-type-error '$(pht field) '$pred-fname "not a condition:" $arg
		  }
                }
	     }
	   })
	   fields)
  }
}

;; define-condition-type
;;
;; generate default pred/accessor names for
;; define-condition-type/accessors
define-template (define-condition-type name parent & fields) {
  pred-fname := string->symbol (append-string (symbol->string name) "?")
  fa := map (function (field) {
	       list field (string->symbol (append-string
					   (symbol->string name)
					   "-"
					   (symbol->string field)))
  }) fields

  #T{
    define-condition-type/accessors $name $parent $pred-fname $@fa
  }
}

;; condition
;;
;; use a sequence of condition-set! expressions rather than than
;; anything more direct to allow for multi-type conditions
define-template (condition type & field-bindings) {
  c := gensym 'c

  #T{
    $c := allocate-condition $type

    $@(map (function (field-binding) {
              #T{
	        condition-set! $c '$(ph field-binding) $(pht field-binding)
	      }
    })
       field-bindings)

    $c
  }
}

(define-condition-type-accessors-only ^error
				      ^condition
				      error?)

(define-condition-type-accessors-only ^idio-error
				      ^error
				      idio-error?
				      (message idio-error-message)
				      (location idio-error-location)
				      (detail idio-error-detail))

;; SRFI-36-ish standard conditions
(define-condition-type-accessors-only ^i/o-error
				      ^idio-error
				      i/o-error?)

(define-condition-type-accessors-only ^i/o-handle-error
				      ^i/o-error
				      i/o-handle-error?
				      (handle i/o-handle-error-handle))

(define-condition-type-accessors-only ^i/o-read-error
				      ^i/o-handle-error
				      i/o-read-error?)

(define-condition-type-accessors-only ^i/o-write-error
				      ^i/o-handle-error
				      i/o-write-error?)

(define-condition-type-accessors-only ^i/o-closed-error
				      ^i/o-handle-error
				      i/o-closed-error?)

(define-condition-type-accessors-only ^i/o-filename-error
				      ^i/o-error
				      i/o-filename-error?
				      (filename i/o-filename-error-filename))

(define-condition-type-accessors-only ^i/o-mode-error
				      ^i/o-error
				      i/o-mode-error?
				      (mode i/o-mode-error-mode))

(define-condition-type-accessors-only ^i/o-malformed-filename-error
				      ^i/o-filename-error
				      i/o-malformed-filename-error?)

(define-condition-type-accessors-only ^i/o-file-protection-error
				      ^i/o-filename-error
				      i/o-file-protection-error?)

(define-condition-type-accessors-only ^i/o-file-is-read-only-error
				      ^i/o-file-protection-error
				      i/o-file-is-read-only-error?)

(define-condition-type-accessors-only ^i/o-file-already-exists-error
				      ^i/o-filename-error
				      i/o-file-already-exists-error?)

(define-condition-type-accessors-only ^i/o-no-such-file-error
				      ^i/o-filename-error
				      i/o-no-such-file-error?)

(define-condition-type-accessors-only ^read-error
				      ^idio-error
				      read-error?
				      (line read-error-line)
				      (position read-error-position))

(define-condition-type-accessors-only ^evaluation-error
				      ^idio-error
				      evaluation-error?
				      (expr evaluation-error-expr))

(define-condition-type-accessors-only ^string-error
				      ^idio-error
				      string-error?)

;; Idio generated conditions
(define-condition-type-accessors-only ^system-error
				      ^idio-error
				      system-error?
				      (errno system-error-errno)
				      (function system-error-function))

(define-condition-type-accessors-only ^static-error
				      ^idio-error
				      static-error?)

(define-condition-type-accessors-only ^st-variable-error
				      ^static-error
				      st-variable-error?
				      (name st-variable-error-name))

(define-condition-type-accessors-only ^st-variable-type-error
				      ^st-variable-error
				      st-variable-type-error?)

(define-condition-type-accessors-only ^st-function-error
				      ^static-error
				      st-function-error?)

(define-condition-type-accessors-only ^st-function-arity-error
				      ^st-function-error
				      st-function-arity-error?)

(define-condition-type-accessors-only ^runtime-error
				      ^idio-error
				      runtime-error?)

(define-condition-type-accessors-only ^rt-syntax-error
				      ^runtime-error
				      rt-syntax-error?)

(define-condition-type-accessors-only ^rt-parameter-error
				      ^runtime-error
				      rt-parameter-error?)

(define-condition-type-accessors-only ^rt-parameter-type-error
				      ^rt-parameter-error
				      rt-parameter-type-error?)

(define-condition-type-accessors-only ^rt-const-parameter-error
				      ^rt-parameter-error
				      rt-const-parameter-error?)

(define-condition-type-accessors-only ^rt-parameter-value-error
				      ^rt-parameter-error
				      rt-parameter-value-error?)

(define-condition-type-accessors-only ^rt-parameter-nil-error
				      ^rt-parameter-value-error
				      rt-parameter-nil-error?)

(define-condition-type-accessors-only ^rt-variable-error
				      ^runtime-error
				      rt-variable-error?
				      (name rt-variable-error-name))

(define-condition-type-accessors-only ^rt-variable-unbound-error
				      ^rt-variable-error
				      rt-variable-unbound-error?)

(define-condition-type-accessors-only ^rt-dynamic-variable-error
				      ^rt-variable-error
				      rt-dynamic-variable-error?)

(define-condition-type-accessors-only ^rt-dynamic-variable-unbound-error
				      ^rt-dynamic-variable-error
				      rt-dynamic-variable-unbound-error?)

(define-condition-type-accessors-only ^rt-environ-variable-error
				      ^rt-variable-error
				      rt-environ-variable-error?)

(define-condition-type-accessors-only ^rt-environ-variable-unbound-error
				      ^rt-environ-variable-error
				      rt-environ-variable-unbound-error?)

(define-condition-type-accessors-only ^rt-computed-variable-error
				      ^rt-variable-error
				      rt-computed-variable-error?)

(define-condition-type-accessors-only ^rt-computed-variable-no-accessor-error
				      ^rt-computed-variable-error
				      rt-computed-variable-no-accessor-error?)

(define-condition-type-accessors-only ^rt-function-error
				      ^runtime-error
				      rt-function-error?)

(define-condition-type-accessors-only ^rt-function-arity-error
				      ^rt-function-error
				      rt-function-arity-error?)

(define-condition-type-accessors-only ^rt-module-error
				      ^runtime-error
				      rt-module-error?
				      (module rt-module-error-module))

(define-condition-type-accessors-only ^rt-module-unbound-error
				      ^rt-module-error
				      rt-module-unbound-error?)

(define-condition-type-accessors-only ^rt-module-symbol-unbound-error
				      ^rt-module-error
				      rt-module-symbol-unbound-error?
				      (symbol rt-module-symbol-unbound-error-symbol))

(define-condition-type-accessors-only ^rt-path-error
				      ^runtime-error
				      rt-path-error?
				      (pattern rt-path-error-pathname))

(define-condition-type-accessors-only ^rt-glob-error
				      ^runtime-error
				      rt-glob-error?
				      (pattern rt-glob-error-pattern))

(define-condition-type-accessors-only ^rt-command-error
				      ^runtime-error
				      rt-command-error?)

(define-condition-type-accessors-only ^rt-command-argv-type-error
				      ^rt-command-error
				      rt-command-argv-type-error?
				      (arg rt-command-argv-type-error-arg))

(define-condition-type-accessors-only ^rt-command-format-error
				      ^rt-command-error
				      rt-command-format-error?
				      (name rt-command-format-error-name)
				      (value rt-command-format-error-value))

(define-condition-type-accessors-only ^rt-command-env-type-error
				      ^rt-command-error
				      rt-command-env-type-error?
				      (name rt-command-env-type-error-name)
				      (value rt-command-env-type-error-value))

(define-condition-type-accessors-only ^rt-command-exec-error
				      ^rt-command-error
				      rt-command-exec-error?
				      (errno rt-command-exec-error-errno))

(define-condition-type-accessors-only ^rt-command-status-error
				      ^rt-command-error
				      rt-command-status-error?
				      (status rt-command-status-error-status))

(define-condition-type-accessors-only ^rt-async-command-status-error
				      ^rt-command-status-error
				      rt-async-command-status-error?)

(define-condition-type-accessors-only ^rt-array-error
				      ^runtime-error
				      rt-array-error?
				      (index rt-array-error-index))

(define-condition-type-accessors-only ^rt-hash-error
				      ^runtime-error
				      rt-hash-error?)

(define-condition-type-accessors-only ^rt-hash-key-not-found-error
				      ^rt-hash-error
				      rt-hash-key-not-found-error?
				      (key rt-hash-key-not-found-error-key))

(define-condition-type-accessors-only ^rt-number-error
				      ^runtime-error
				      rt-number-error?
				      (number rt-number-error-number))

(define-condition-type-accessors-only ^rt-divide-by-zero-error
				      ^rt-number-error
				      rt-divide-by-zero-error?)

(define-condition-type-accessors-only ^rt-bignum-error
				      ^rt-number-error
				      rt-bignum-error?)

(define-condition-type-accessors-only ^rt-bignum-conversion-error
				      ^rt-bignum-error
				      rt-bignum-conversion-error?)

(define-condition-type-accessors-only ^rt-C-conversion-error
				      ^rt-number-error
				      rt-C-conversion-error?)

(define-condition-type-accessors-only ^rt-fixnum-error
				      ^rt-number-error
				      rt-fixnum-error?)

(define-condition-type-accessors-only ^rt-fixnum-conversion-error
				      ^rt-fixnum-error
				      rt-fixnum-conversion-error?)

(define-condition-type-accessors-only ^rt-bitset-error
				      ^runtime-error
				      rt-bitset-error?)

(define-condition-type-accessors-only ^rt-bitset-bounds-error
				      ^rt-bitset-error
				      rt-bitset-bounds-error?
				      (bit rt-bitset-bounds-error-bit))

(define-condition-type-accessors-only ^rt-bitset-size-mismatch-error
				      ^rt-bitset-error
				      rt-bitset-size-mismatch-error?
				      (size1 rt-bitset-size-mismatch-error-size1)
				      (size2 rt-bitset-size-mismatch-error-size2))

(define-condition-type-accessors-only ^rt-keyword-error
				      ^runtime-error
				      rt-keyword-error?
				      (keyword rt-keyword-error-keyword))

(define-condition-type-accessors-only ^rt-libc-error
				      ^runtime-error
				      rt-libc-error?)

(define-condition-type-accessors-only ^rt-libc-format-error
				      ^rt-libc-error
				      rt-libc-format-error?
				      (name rt-libc-format-error-name))

(define-condition-type-accessors-only ^rt-regex-error
				      ^rt-libc-error
				      rt-regex-error?)

(define-condition-type-accessors-only ^rt-struct-error
				      ^runtime-error
				      rt-struct-error?)

(define-condition-type-accessors-only ^rt-symbol-error
				      ^runtime-error
				      rt-symbol-error?)

(define-condition-type-accessors-only ^rt-load-error
				      ^runtime-error
				      rt-load-error?
				      (filename rt-load-error-filename))

(define-condition-type-accessors-only ^rt-signal
				      ^error
				      rt-signal?
				      (signal rt-signal-signal))

;; We want to have a common method for reporting on a condition but
;; condition-report only knows about core conditions and nothing about
;; extension conditions.

;; We need to allow extensions to register their new conditions with
;; us, with a callback which will take the iem and cr-report functions
;; as arguments

condition-report-extend := #f
condition-report := #f

{
  extension-callbacks := make-hash #n #n 4

  condition-report-extend = function (ct cb) "
extend :ref:`condition-report <condition-report>` to handle condition
type `ct`

:param ct: condition type
:type ct: condition type
:param cb: callback handler
:type cb: 3-ary function
:return: #<unspec>

`cb` will be invoked as :samp:`{cb} {c} iem cr-printf` where
:samP:`{c}` is the condition instance, ``iem`` adds the standard
``^idio-error`` information to the report and ``cr-printf`` is a
:ref:`printf <printf>`-like function to add more information to the
report.

  " {
			      if (struct-type? ct) {
				if (function? cb) {
				  hash-set! extension-callbacks ct cb
				} {
				  error/type ^rt-parameter-type-error 'condition-report-extend "not a function" cb
				}
			      } {
				error/type ^rt-parameter-type-error 'condition-report-extend "not a struct-type" ct
			      }
  }

  condition-report = function (prefix c & args) "print a report on condition `c`

:param prefix: a distinguishing string
:type prefix: string
:param c: the condition
:type c: condition instance
:param handle: print to handle, defaults to current output handle
:type handle: handle, optional
:return: #<unspec>

The form of the report is not fixed and should not be relied upon.

Most reports are a single line but some, notably for
:ref:`^rt-command-status-error <^rt-command-status-error>`, may be
multiple lines.

  " {
    oh := (current-output-handle)
    if (and (not (null? args))
	    (pair? args)) {
	      oh = ph args
	    }

    msgs := #n

    define (cr-printf fmt & args*) {
      msgs  = pair (apply sprintf fmt args*) msgs
    }

    ;; standard ^idio-error has location message detail
    define (iem c) {
      cr-printf "%s:" (idio-error-location c)
      cr-printf "%s:" (struct-type-name (struct-instance-type c))
      cr-printf "%s" (idio-error-message c)
      if (not (null? (idio-error-detail c))) {
	cr-printf ": detail %s" (idio-error-detail c)
      }
    }

    if (not (null? prefix)) {
      cr-printf (append-string prefix ":")
    }

    ;; The ordering of these is slightly about face.  Ostensibly it is
    ;; the same as the definition order with the generic form last.
    ;;
    ;; So, if the ^i/o-* conditions, the ^i/o-handle-error,
    ;; ^i/o-filename-error and ^i/o-mode-error have extra attributes so
    ;; we have specific clauses for them.  All of the rest are otherwise
    ;; undistinguished from ^i/o-error so can be picked up by that.
    ;;
    ;; We pick up ^i/o-error itself because even though it is
    ;; undistinguished from ^idio-error it means we can identify any
    ;; missed condition groups in the trailing clause for ^idio-error.

    (cond
     ;; ^i/o-error
     ((i/o-handle-error? c) {
       iem c
       cr-printf ": handle '%s'" (i/o-handle-error-handle c)
     })
     ((i/o-filename-error? c) {
       iem c
       cr-printf ": filename \"%s\"" (i/o-filename-error-filename c)
     })
     ((i/o-mode-error? c) {
       iem c
       cr-printf ": mode \"%s\"" (i/o-mode-error-mode c)
     })
     ((i/o-error? c) {
       iem c
     })

     ;; ^read-error
     ((read-error? c) {
       iem c
       cr-printf " line %d" (read-error-line c)
     })

     ;; ^evaluation-error
     ((evaluation-error? c) {
       iem c
       cr-printf ": expr \"%s\"" (evaluation-error-expr c)
     })

     ;; ^string-error
     ((string-error? c) {
       cr-printf "%s:%s:%s" (idio-error-location c) (idio-error-message c) (idio-error-detail c)
     })

     ;; ^system-error
     ((system-error? c) {
       cr-printf "%s:" (idio-error-location c)
       cr-printf "%s:" (struct-type-name (struct-instance-type c))
       cr-printf "%s (%s): %s (errno=%s %s)" (system-error-function c) (idio-error-detail c) (libc/errno-name (system-error-errno c)) (system-error-errno c) (idio-error-message c)
     })

     ;; ^static-error
     ((st-variable-error? c) {
       iem c
       cr-printf ": variable '%s'" (st-variable-error-name c)
     })
     ((static-error? c) {
       iem c
     })

     ;; ^runtime-error (lots!)

     ;; ^rt-syntax-error
     ((rt-syntax-error? c) {
       iem c
     })

     ;; ^rt-parameter-error
     ((rt-parameter-error? c) {
       iem c
     })

     ;; ^rt-variable-error (incl. dynamic environ computed)
     ((rt-variable-error? c) {
       iem c
       cr-printf ": name '%s'" (rt-variable-error-name c)
     })

     ;; ^rt-function-error
     ((rt-function-error? c) {
       iem c
     })

     ;; ^rt-module-error
     ((rt-module-symbol-unbound-error? c) {
       iem c
       ; annoyingly (idio-error-module c) resolves module to #undef
       cond-mod := rt-module-error-module c
       mod-name := (cond
		    ((module? cond-mod) (module-name cond-mod))
		    (else cond-mod))
       cr-printf ": symbol '%s/%s'" mod-name (rt-module-symbol-unbound-error-symbol c)
     })
     ((rt-module-error? c) {
       iem c
       ; annoyingly (idio-error-module c) resolves module to #undef
       ; and the duplicate-name/unbound-name code (in module.c) puts
       ; the symbol in for name
       cond-mod := rt-module-error-module c
       mod-name := (cond
		    ((module? cond-mod) (module-name cond-mod))
		    (else cond-mod))
       cr-printf ": module '%s'" mod-name
     })

     ;; ^rt-path-error
     ((rt-path-error? c) {
       iem c
       cr-printf ": pathname \"%s\"" (rt-path-error-pathname c)
     })

     ;; ^rt-glob-error
     ((rt-glob-error? c) {
       iem c
       cr-printf ": pattern \"%s\"" (rt-glob-error-pattern c)
     })

     ;; ^rt-command-error
     ((rt-command-argv-type-error? c) {
       iem c
       cr-printf ": arg '%s'" (rt-command-argv-type-error-arg c)
     })
     ((rt-command-format-error? c) {
       iem c
       cr-printf ": "
       name := (rt-command-format-error-name c)
       if (not (null? name)) {
	 cr-printf "%s=" name
       }
       cr-printf "'%s'" (rt-command-format-error-value c)
     })
     ((rt-command-env-type-error? c) {
       iem c
       cr-printf ": name '%s'='%s'" (rt-command-env-type-error-name c) (rt-command-env-type-error-value c)
     })
     ((rt-command-exec-error? c) {
       iem c
       cr-printf ": errno '%s'" (rt-command-exec-error-errno c)
     })
     ((rt-command-status-error? c) {
       ;iem c
       job := idio-error-location c
       osh := (open-output-string)
       format-job-detail job osh
       cr-printf (get-output-string osh)
       close-handle osh
       ;cr-printf "job: %s => %s" (%idio-job-pipeline job) (rt-command-status-error-status c)
     })
     ((rt-command-error? c) {
       iem c
     })

     ;; ^rt-array-error
     ((rt-array-error? c) {
       iem c
       cr-printf ": index '%s'" (rt-array-error-index c)
     })

     ;; ^rt-hash-error
     ((rt-hash-key-not-found-error? c) {
       iem c
       cr-printf ": key '%s'" (rt-hash-key-not-found-error-key c)
     })
     ((rt-hash-error? c) {
       iem c
     })

     ;; ^rt-number-error (bignum fixnum)
     ((rt-bignum-error? c) {
       iem c
       cr-printf ": bignum %s" (rt-number-error-number c)
     })
     ((rt-fixnum-error? c) {
       iem c
       cr-printf ": fixnum %d" (rt-number-error-number c)
     })
     ((rt-number-error? c) {
       iem c
       cr-printf ": number(s) '%s'" (rt-number-error-number c)
     })

     ;; ^rt-bitset-error
     ((rt-bitset-bounds-error? c) {
       iem c
       cr-printf ": bit %s" (rt-bitset-bounds-error-bit c)
     })
     ((rt-bitset-size-mismatch-error? c) {
       iem c
       cr-printf ": size mismatch: %s != %s" (rt-bitset-size-mismatch-error-size1 c) (rt-bitset-size-mismatch-error-size2 c)
     })
     ((rt-bitset-error? c) {
       iem c
     })

     ;; ^rt-keyword-error
     ((rt-keyword-error? c) {
       iem c
       cr-printf ": keyword %s" (rt-keyword-error-keyword c)
     })

     ;; ^rt-libc-error
     ((rt-libc-format-error? c) {
       iem c
       cr-printf ": name %s" (rt-libc-format-error-name c)
     })
     ((rt-libc-error? c) {
       iem c
     })

     ;; ^rt-struct-error
     ((rt-struct-error? c) {
       iem c
     })

     ;; ^rt-symbol-error
     ((rt-symbol-error? c) {
       iem c
     })

     ;; ^rt-load-error
     ((rt-load-error? c) {
       iem c
       cr-printf ": filename %s" (rt-load-error-filename c)
     })

     ;; ^rt-signal
     ((rt-signal? c) {
       iem c
       cr-printf "signal %s (%s)" (rt-signal-signal c) (libc/signal-name (rt-signal-signal c))
     })

     (else {
       ct := struct-instance-type c
       cb := hash-ref extension-callbacks ct #f
       if cb {
	 cb c iem cr-printf
       } {
	 (cond
	  ;; ^runtime-error fallback
	  ((runtime-error? c) {
	    iem c
	    cr-printf ": unhandled runtime-error %s" c
	  })

	  ;; fallbacks
	  ((idio-error? c) {
	    iem c
	    cr-printf ": unhandled ^idio-error %s" c
	  })
	  ((error? c) {
	    cr-printf ": unhandled ^error %s" (struct-type-name (struct-instance-type c))
	  })
	  (else {
	    cr-printf ": unhandled ^condition %s" c
	  }))
       }
     }))

    msgs = pair "\n" msgs
    display (join-string "" (reverse msgs)) oh
  }
}
