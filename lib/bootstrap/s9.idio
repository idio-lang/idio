;;
;; Copyright (c) 2015, 2017, 2018, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; s9.idio
;;

;; ported from
;;
;; Scheme 9 from Empty Space
;; By Nils M Holm <nmh@t3x.org>, 2007,2008,2009
;;

;;----- Library -----

;; Some obvious procedures first

;; Auxiliary definitions, will be redefined later

define (map-ph f a) "map-ph: %mapph a" {
  %mapph :+ function (a) {
	      if (null? a) {
		'#n
	      } {
		pair (f (ph a)) (%mapph (pt a))
	      }
  }
  %mapph a
}

define (map f a b) {
  map2 :+ function (a b) {
	    if (null? a) {
	      '#n
	    } {
	      pair (f (ph a) (ph b)) (map2 (pt a) (pt b))
	    }
  }
  map2 a b
}

;; Library procedures

;; List procedures

define (list? x) "
is `x` a list?

:param x: value to test
:return: boolean
" {
  l? :+ function (x y) {
	  (cond
	   ((eq? x y) #f)
	   ((null? x) #t)
	   ((pair? x) (or (null? (pt x))
			  (and (pair? (pt x))
			       (l? (ptt x) (pt y)))))
	   (else #f))
  }

  (or (null? x)
      (and (pair? x)
	   (l? (pt x) x)))
}

fold-left := {
  ph-of := ph-of
  pt-of := pt-of
  any-null? := any-null?

  function (f b & a*) {
    fold :+ function (a* r) {
	      if (any-null? a*) r {
		fold (pt-of a*) (apply f r (ph-of a*))
	      }
    }

    if (null? a*) {
      error/type ^rt-parameter-error 'fold-left "too few arguments"
    } {
      fold a* b
    }
  }
}

fold-right := {
  ph-of := ph-of
  pt-of := pt-of
  any-null? := any-null?
  map-ph := map-ph

  function (f b & a*) {
    foldr :+ function (a* r) {
	       if (any-null? a*) r {
		 foldr (pt-of a*) (apply f (append (ph-of a*)
						   (list r)))
	       }
    }

    if (null? a*) {
      error/type ^rt-parameter-error 'fold-right "too few arguments"
    } {
      foldr (map-ph reverse a*) b
    }
  }
}

append := {
  fold-left := fold-left

  function a "
append the lists of `a`

:param a: list of lists
:return: combined list
:retype: list
  " {
    append2 :+ function (a b) {
		 if (null? a) b {
		   append2 (pt a) (pair (ph a) b)
		 }
    }
    append-wrapper :+ function (a b) {
			if (null? b) a {
			  append2 (reverse a) b
			}
    }

    fold-left append-wrapper '#n a
  }
}

define (list-tail x n) {
  (cond
   ((zero? n) x)
   ((null? x) (error/type ^rt-parameter-value-error 'list-tail "index out of range" n))
   (else (list-tail (pt x) (- n 1))))
}

define (list-ref x n) {
  ph (list-tail x n)
}

map := {
  ph-of := ph-of
  pt-of := pt-of
  any-null? := any-null?

  function (f & a*) {
    map2 :+ function (a* r) {
	      if (null? (ph a*)) {
		reverse r
	      } {
		map2 (pt-of a*) (pair (apply f (ph-of a*))
				      r)
	      }
    }

    if (null? a*) {
      error/type ^rt-parameter-error 'map "too few arguments"
    } {
      map2 a* '#n
    }
  }
}

;; Arithmetic procedures

define (abs x) (if (x lt 0) (- x) x)

define (even? x) (zero? (remainder x 2))

define (expt x y) {
  square :+ function (x) (* x x)
  expt2 :+ function (x y) {
	     (cond
	      ((zero? y) 1)
	      ((even? y) (square (expt2 x (quotient y 2))))
	      (else      (x * (square (expt2 x (quotient y 2))))))
  }

  (cond
   ((negative? y) (/ (expt2 (0.0 + x) y)))
   ((integer? y) (expt2 x y))
   (else (exp (y * (log x)))))
}

gcd := {
  fold-left := fold-left

  function a {
    gcd2 :+ function (a b) {
	      (cond
	       ((zero? b) a)
	       ((zero? a) b)
	       ((a lt b) (gcd2 a (remainder b a)))
	       (else (gcd2 b (remainder a b))))
    }

    fold-left gcd2 0 (map abs a)
  }
}

lcm := {
  fold-left := fold-left

  function a {
    lcm2 :+ function (a b) {
	      cd := (gcd a b)

	      * cd (* (quotient a cd)
		      (quotient b cd))
    }

    fold-left lcm2 1 (map abs a)
  }
}

max := {
  fold-left := fold-left

  function (a & b) {
    fold-left (function (a b) {
		 if (or (inexact? a) (inexact? b)) {
		   exact->inexact (if (a gt b) a b)
		 } {
		   if (a gt b) a b
		 }
    }) a b
  }
}

min := {
  fold-left := fold-left

  function (a & b) {
    fold-left (function (a b) {
		 if (or (inexact? a) (inexact? b)) {
		   exact->inexact (if (a lt b) a b)
		 } {
		   if (a lt b) a b
		 }
    }) a b
  }
}

define (modulo a b) {
  rem := remainder a b

  (cond
   ((zero? rem) 0)
   ((eq? (negative? a) (negative? b)) rem)
   (else (+ b rem)))
}

define (negative? x) (x lt 0)

define (odd? x) (not (even? x))

define (positive? x) (x gt 0)

define (ceiling x) (- (floor (- x)))

define (round x) {
  x+ := 0.5 + x
  rx := floor x+

  if (and (odd? (inexact->exact rx))
	  (x+ eq rx)) {
	    rx - 1
	  } rx
}

define (truncate x) {
  (if (x lt 0) ceiling floor) x
}

; used by EXP and SIN
define (fact2 x r) {
  if (x eq 0) r {
    fact2 (x - 1) (x * r)
  }
}

exp := {
  fact2 := fact2

  function (x) {
    e-series :+ function (x y r last) {
		  if (r eq last) r {
		    (e-series x
			      (1 + y)
			      (r + ((expt x y) /
					       (fact2 y 1)))
			      r)
		  }
    }

    if (x ge 2.0) {
      e^x/2 := 1 + (x / 2) + (e-series (x / 2)
				       2
				       0.0
				       1.0)

      e^x/2 * e^x/2
    } {
      1 + x + (e-series x
			2
			0.0
			1.0)
    }
  }
}

define (log x) {
  l-series :+ function (x y r last lim) {
		(cond
		 ((and lim (zero? lim)) r)
		 ((r eq last) (2 * r))
		 (else (l-series x
				 (2 + y)
				 (r + ((expt ((x - 1) / (x + 1))
					     y)
					/
					y))
				 r
				 (if lim (lim - 1) lim))))
  }

  (cond
   ((negative? x) (1.0 / 0))
   ((lt 0.1 x 5) (l-series x
			   1
			   0.0
			   1.0
			   #f))
   (else {
     approx := l-series x 1 0.0 1.0 5
     a := x / (exp approx)
     approx + (log a)
   }))
}

; auxilary definitions for SIN, COS, TAN
pi := 3.141592653589793238462643383279502884197169399375105820974944
pi/4 := pi / 4
pi/2 := pi / 2
3pi/4 := pi/2 + pi/4
3pi/2 := pi + pi/2
5pi/4 := pi + pi/4
7pi/4 := pi + 3pi/4
2pi := pi + pi

->circle := {
  2pi := 2pi

  function (x) {
    x+ := abs x
    d := 2pi * (floor (x+ / 2pi))
    x+ = x+ - d
    if (negative? x) {
      2pi - x+
    } {
      x+
    }
  }
}

p-series  := {
  fact2 := fact2

  function (x y r add last) {
    if (r eq last) r {
      (p-series x
		(2 + y)
		((if add \+ \-) r ((expt x y) / (fact2 y 1)))
		(not add)
		r)
    }
  }
}

cos := {
  ->circle := ->circle
  p-series := p-series
  pi := pi
  pi/2 := pi/2
  3pi/2 := 3pi/2
  2pi := 2pi

  function (x) {
    x := ->circle x

    (cond
     ((0 eq     x)       (if (inexact? x)  #i1.0  1.0))
     ((pi/2 eq  x)       (if (inexact? x)  #i0.0  0.0))
     ((pi eq    x)       (if (inexact? x) #i-1.0 -1.0))
     ((3pi/2 eq x)       (if (inexact? x)  #i0.0  0.0))
     ((le 0     x pi/2)  (p-series    x         2 1.0 #f 0))
     ((le pi/2  x pi)    (- (p-series (- pi x)  2 1.0 #f 0)))
     ((le pi    x 3pi/2) (- (p-series (- x pi)  2 1.0 #f 0)))
     (else               (p-series    (- 2pi x) 2 1.0 #f 0)))
  }
}

sin := {
  ->circle := ->circle
  p-series := p-series
  pi := pi
  pi/2 := pi/2
  3pi/2 := 3pi/2
  2pi := 2pi

  function (x) {
    x := ->circle x

    (cond
     ((0     eq x) (if (inexact? x)  #i0.0  0.0))
     ((pi/2  eq x) (if (inexact? x)  #i1.0  1.0))
     ((pi    eq x) (if (inexact? x)  #i0.0  0.0))
     ((3pi/2 eq x) (if (inexact? x) #i-1.0 -1.0))
     (else {
       z := (cond
	     ((le 0    x  pi/2) x)
	     ((le pi/2 x  pi)   (- pi x))
	     ((le pi   x 3pi/2) (- x pi))
	     (else              (- 2pi x)))

       if (x gt pi) {
	 - (p-series z 3 z #f 0)
       } {
	 p-series z 3 z #f 0
       }
     }))
  }
}

tan := {
  ->circle := ->circle
  pi := pi
  pi/4 := pi/4
  3pi/4 := 3pi/4
  5pi/4 := 5pi/4
  7pi/4 := 7pi/4

  function (x) {
    x := ->circle x
    (cond
     ((or (x eq 0)     (x eq  pi))   (if (inexact? x)  #i0.0  0.0))
     ((or (x eq  pi/4) (x eq 5pi/4)) (if (inexact? x)  #i1.0  1.0))
     ((or (x eq 3pi/4) (x eq 7pi/4)) (if (inexact? x) #i-1.0 -1.0))
     (else                           ((sin x) / (cos x))))
  }
}

atan := {
  pi/2 := pi/2
  at-series :+ function (x y r last) {
		 if (r eq last) r {
		   (at-series x
			      (1 + y)
			      (r + ((((expt 2 (y + y)) * (expt (fact2 y 1) 2)) /
									       (fact2 (y + y + 1) 1)) *
				     ((expt x (y + y + 1)) /
							   (expt (1 + (x * x)) (1 + y)))))
			      r)
		 }
  }

  function (x) {
    (cond
     ((negative? x) (- (at-series (- x) 0.0 0 1)))
     ((x gt 1) (pi/2 - (atan (/ x))))
     (else (at-series x 0.0 0 1)))
  }
}

define (asin x) {
  (cond
   ((1 eq x) (2 * (atan x)))
   ((negative? x) (- (asin (- x))))
   (else (atan (x / (sqrt (1 - (x * x)))))))
}

acos := {
  pi := pi
  pi/2 := pi/2

  function (x) {
    (cond
     ((-1 eq x) pi)
     ((1  eq x) 0)
     (else (pi/2 - (asin x))))
  }
}

define (sqrt square) {
  sqrt2 :+ function (x last) {
	     if (last eq x) x {
	       sqrt2 ((x + (square / x)) / 2) x
	     }
  }

  if (negative? square) {
    error/type ^rt-parameter-value-error 'sqrt "negative argument" square
  } {
    rt := sqrt2 square 0
    if (square eq (* rt rt)) {
      inexact->exact rt
    } rt
  }
}

;; String procedures

; Used by NUMBER->STRING and STRING->NUMBER
define (number-of-digits n r) {
  if (zero? n) {
    if (zero? r) 1 r
  } {
    number-of-digits (quotient n 10) (1 + r)
  }
}

define number->string {
  number-of-digits := number-of-digits

  function (n & radix) {
    digits :+ list->array (string->list "0123456789abcdefghijklmnopqrstuvwxyz")
    conv :+ function (n rdx res) {
	      if (zero? n) {
		if (null? res) '(#\0) res
	      } {
		(conv (quotient n rdx)
		      rdx
		      (pair (array-ref digits (remainder n rdx))
			    res))
	      }
    }
    conv-int :+ function (n rdx) {
		  if (negative? n) {
		    list->string (pair #\- (conv (abs n) rdx '#n))
		  } {
		    list->string (conv n rdx '#n)
		  }
    }
    conv-sci-real :+ function (m e) {
		       ms := conv-int m 10
		       es := conv-int e 10
		       i := if (negative? m) 2 1
		       k := string-length ms
		       (append-string (substring ms 0 i)
				      "."
				      (if (k eq i) "0" (substring ms i k))
				      "e"
				      (if (0 le e) "+" "")
				      es)
    }
    zeroes :+ function (n) {
		loop :+ function (n z) {
			  if (positive? n) {
			    loop (- n 1) (pair #\0 z)
			  } {
			    list->string z
			  }
		}
		loop n '#n
    }
    conv-expanded-real :+ function (n offset) {
			    m := abs n
			    (append-string (if (negative? n) "-" "")
					   (cond
					    ((negative? offset) "0.")
					    ((zero? offset)     "0")
					    (else               ""))
					   (zeroes (- offset))
					   {
					     ms := conv-int m 10
					     k := string-length ms
					     if (le 0 offset k){
					       (append-string (substring ms 0 offset)
							      "."
							      (substring ms offset k))
					     } {
					       ms
					     }
					   })
    }
    conv-real :+ function (n) {
		   m := mantissa n
		   e := exponent n
		   d := number-of-digits m 0

		   if (lt -4 (+ e d) 10) {
		     conv-expanded-real m (e + d)
		   } {
		     conv-sci-real m (e + d + -1)
		   }
    }
    get-radix :+ function () {
		   (cond
		    ((null? radix) 10)
		    ((le 2 (ph radix) 36) (ph radix))
		    (else (error/type ^rt-parameter-value-error 'number->string "invalid radix"
										(ph radix))))
    }

    r := (get-radix)
    (cond
     ((not (or (integer? n) (10 eq r)))
      (error/type ^rt-parameter-value-error 'number->string "real number needs a radix of 10" n))
     ((integer? n) (conv-int (inexact->exact n) r))
     (else (conv-real n)))
  }
}

string->number := {
  number-of-digits := number-of-digits
  inexact := #f

  function (str & radix) {
    digits :+ string->list "0123456789abcdefghijklmnopqrstuvwxyz"
    value-of-digit :+ function (x) {
			v :+ function (x d n) {
			       (cond
				((null? d) 36)
				((unicode=? (ph d) x) n)
				(else (v x (pt d) (n + 1))))
			}
			v (unicode/->Lowercase x) digits 0
    }
    find-exponent-mark :+ function (c) {
			    memv c '(#\d #\D #\e #\E #\f #\F #\l #\L #\s #\S)
    }
    result :+ pair
    value :+ ph
    rest :+ pt
    FAIL :+ '(#f & #f)
    failed? :+ function (res) (eq? #f (pt res))
    ok? :+ function (res) (not (eq? #f (pt res)))
    conv3 :+ function (lst val rdx) {
	       if (null? lst) {
		 result val '#n
	       } {
		 dval := value-of-digit (ph lst)
		 if (dval lt rdx) {
		   (conv3 (pt lst)
			  ((value-of-digit (ph lst)) + (val * rdx))
			  rdx)
		 } {
		   result val lst
		 }
	       }
    }
    conv :+ function (lst rdx) {
	      if (null? lst) FAIL {
		conv3 lst 0 rdx
	      }
    }
    conv-int :+ function (lst rdx) {
		  (cond
		   ((null? lst) FAIL)
		   ((unicode=? (ph lst) #\+) (conv (pt lst) rdx))
		   ((unicode=? (ph lst) #\-) {
		     r := conv (pt lst) rdx
		     if (ok? r) {
		       result (- (value r)) (rest r)
		     } FAIL
		   })
		   (else (conv lst rdx)))
    }
    make-frag :+ function (x) {
		   d := number-of-digits x -1
		   (x / (expt 10.0 d)) - 1.0
    }
    make-real :+ function (int frag expn) {
		   v := (0.0 + (abs int) + (make-frag frag)) * (expt 10.0 expn)
		   if (negative? int) (- v) v
    }
    conv-exponent :+ function (int frag lst) {
		       if (null? lst) FAIL {
			 exp-part := conv-int lst 10
			 if (failed? exp-part) FAIL {
			   result (make-real int frag (value exp-part)) (rest exp-part)
			 }
		       }
    }
    conv-decimals :+ function (int lst) {
		       (cond
			((null? lst) (result (0.0 + int) '#n))
			((find-exponent-mark (ph lst)) (conv-exponent int 10 (pt lst)))
			(else {
			  frag-part := conv3 lst 1 10
			  if (null? (rest frag-part)) {
			    result (make-real int (value frag-part) 0) '#n
			  } {
			    conv-exponent int (value frag-part) (pt (rest frag-part))
			  }
			}))
    }
    radix-ten? :+ function (rdx) {
		    if (not (10 eq rdx)) {
		      if (null? radix) #f (error/type ^rt-parameter-value-error 'string->number "real number needs a radix of 10")
		    } #t
    }
    mantissa-digits? :+ function (x) {
			  (cond
			   ((null? x)                    #f)
			   ((unicode/Number? (ph x))     #t)
			   ((find-exponent-mark (ph x))  #f)
			   (else (mantissa-digits? (pt x))))
    }
    conv-real :+ function (lst rdx) {
		   int-part := conv-int lst rdx
		   (cond
		    ((failed? int-part) FAIL)
		    ((and (zero? (value int-part))
			  (not (mantissa-digits? lst))) FAIL)
		    ((null? (rest int-part)) int-part)
		    ((find-exponent-mark (ph (rest int-part))) {
		      if (radix-ten? rdx) {
			(conv-exponent (value int-part)
				       10
				       (pt (rest int-part)))
		      } FAIL
		    })
		    ((unicode=? #\. (ph (rest int-part))) {
		      if (radix-ten? rdx) {
			conv-decimals (value int-part) (pt (rest int-part))
		      } FAIL
		    })
		    (else int-part))
    }
    replace-inexact-digits! :+ function (a) {
				 (cond
				  ((null? a) #f)
				  ((unicode=? #\# (ph a)) {
				    set-ph! a #\5
				    set! inexact #t
				    replace-inexact-digits! (pt a)
				  })
				  (else (replace-inexact-digits! (pt a))))
    }
    get-radix :+ function () {
		   (cond
		    ((null? radix) 10)
		    ((le 2 (ph radix) 36) (ph radix))
		    (else (error/type ^rt-parameter-value-error 'string->number "invalid radix" (ph radix))))
    }

    set! inexact #f
    radix :+ (get-radix)
    lst :+ string->list str

    if (and ((string-length str) gt 1)
	    (unicode=? #\# (ph lst))) {
	      mod := pht lst
	      set! lst (ptt lst)
	      (cond
	       ((unicode=? mod #\e) (void))
	       ((unicode=? mod #\d) (void))
	       ((unicode=? mod #\i) (set! inexact #t))
	       ((unicode=? mod #\b) (set! radix 2))
	       ((unicode=? mod #\o) (set! radix 8))
	       ((unicode=? mod #\x) (set! radix 16))
	       (else             (set! lst '#n)))
	    }
    if (or (null? lst)
	   (memv (ph lst) '(#\+ #\- #\.))
	   (unicode/Number? (ph lst))) {
	     replace-inexact-digits! lst
	   }

    r := (cond
	  ((null? lst) FAIL)
	  ((unicode=? #\- (ph lst)) (conv-real (pt lst) radix))
	  (else (conv-real lst radix)))

    if (null? (rest r)) {
      v := if (unicode=? #\- (ph lst)) {
        - (value r)
      } {
	value r
      }
      if inexact (exact->inexact v) v
    } #f
  }
}

;; Array procedures

define (array & x) (list->array x)

;; Input/output procedures

define (call-with-input-file file proc) {
  f := open-input-file file
  r := proc f
  close-input-handle f
  r
}

define (call-with-output-file file proc) {
  f := open-output-file file
  r := proc f
  close-output-handle f
  r
}

with-input-from-file := {
  set-input-handle! := set-input-handle!

  function (file thunk) {
    outer-handle := (current-input-handle)
    new-handle := open-input-file file
    set-input-handle! new-handle
    input := (thunk)
    close-input-handle new-handle
    set-input-handle! outer-handle
    input
  }
}

with-output-to-file := {
  set-output-handle! := set-output-handle!

  function (file thunk) {
    outer-handle := (current-output-handle)
    new-handle := open-output-file file
    set-output-handle! new-handle
    (thunk)
    close-output-handle new-handle
    set-output-handle! outer-handle
  }
}

;;----- Library -----

; LET/LET*/LETREC helper
define (check-bindings b who) {
  (cond
   ((null? b) #t)
   ((or (not (pair? b))
	(not (pair? (ph b)))
	(not (symbol? (phh b)))
	(not (pair? (pth b)))
	(not (null? (ptth b)))) (error/type ^rt-syntax-error 'check-bindings (append-string who ": invalid syntax") b))
   (else (check-bindings (pt b) who)))
}

; Now that the QQ expander is here, define a
; clean version of LET (including named LET).
; Can't name it LET yet, because it uses LET.
define-template %ext-let {
  check-bindings := check-bindings

  function (a1 a2 & a3) {
    split :+ function (bind* vars args) {
	       if (null? bind*) {
		 pair vars args
	       } {
		 (split (pt bind*)
			(pair (phh bind*) vars)
			(pair (phth bind*) args))
	       }
    }

    if (symbol? a1) {
      if (null? a3) {
        error/type ^rt-parameter-value-error 'named-let "missing body" #T{ let $a1 $a2 $@a3 }
      } {
	check-bindings a2 "let"
	va := split a2 '#n '#n
	v := reverse (ph va)
	a := reverse (pt va)
	#T{
	  {
	    $a1 :+ function $v $@a3
	    $a1 $@a
	  }
	}
      }
    } {
      check-bindings a1 "let"
      va := split a1 '#n '#n
      v := ph va
      a := pt va
      #T{ (function $v $a2 $@a3) $@a }
    }
  }
}

define-template (case key & clauses) {
  gen-clauses :+ function (k c*) {
		   (cond
		    ((null? c*) '#n)
		    ((or (not (pair? c*))
			 (not (pair? (ph c*)))
			 (not (pair? (pth c*)))) (error/type ^rt-syntax-error 'case "invalid syntax" c*))
		    ((null? (pt c*)) {
		      if (eq? 'else (phh c*)) {
			#T{ ((else $@(pth c*))) }
		      } {
			#T{ (((memv $k '$(phh c*)) $@(pth c*))) }
		      }
		    })
		    (else {
		      #T{ (((memv $k '$(phh c*)) $@(pth c*)) $@(gen-clauses k (pt c*))) }
		    }))

  }

  k := (gensym)
  #T{
    {
      $k := $key
      cond $@(gen-clauses k clauses)
    }
  }
}

define-template (do var-clauses test & body) {
  split :+ function (clauses vars inits steps) {
	     (cond
	      ((null? clauses) (list vars inits steps))
	      ((or (not (pair? clauses))
		   (not (pair? (ph clauses)))
		   (not (symbol? (phh clauses)))
		   (not (pair? (pth clauses)))) (error/type ^rt-syntax-error 'do "invalid syntax" clauses))
	      (else (split (pt clauses)
			   (pair (phh clauses) vars)
			   (pair (phth clauses) inits)
			   (if (null? (ptth clauses))
			       (pair (phh clauses) steps)
			       (pair (phtth clauses) steps)))))
  }

  if (or (not (pair? test))
	 (not (list? (pt test)))) {
	   error/type ^rt-syntax-error 'do "invalid syntax" test
	 } {
	   loop := (gensym)
	   var+init+step := split var-clauses '#n '#n '#n
	   v := ph var+init+step
	   i := pht var+init+step
	   s := phtt var+init+step

	   #T{
	     {
	       $loop :+ function $v {
			  if $(ph test) {
			    $@(pt test)
			  } {
			    $@body
			    ($loop $@s)
			  }
	       }
	       $loop $@i
	     }
	   }
	 }
}

define-template (delay expr) {
  #T{
    {
      value := #f
      function () {
	if value {
	  ph value
	} {
	  x := $expr
	  if value {
	    ph value
	  } {
	    value = pair x '#n
	    ph value
	  }
	}
      }
    }
  }
}

define (force x) (x)

