;;
;; Copyright (c) 2015-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; s9.idio
;;

;; ported from
;;
;; Scheme 9 from Empty Space
;; By Nils M Holm <nmh@t3x.org>, 2007,2008,2009
;;

;; The 2009 S9fES real_add() had a bug (issues/2-2.idio) which
;; manifested itself in log.  As a side-effect, some algorithms have
;; been updated with inspiration from the Reimagined code which
;; includes some factoring improvements.

;;----- Library -----

;; Some obvious procedures first

;; Auxiliary definitions, will be redefined later

;; Library procedures

;; List procedures

define (list? x) "
is `x` a list?

:param x: value to test
:return: boolean
" {
  l? :+ function (x y) {
    (cond
     ((eq? x y) #f)
     ((null? x) #t)
     ((pair? x) (or (null? (pt x))
		    (and (pair? (pt x))
			 (l? (ptt x) (pt y)))))
     (else #f))
  }

  (or (null? x)
      (and (pair? x)
	   (l? (pt x) x)))
}

fold-left := {
  ph-of := ph-of
  pt-of := pt-of
  any-null? := any-null?

  function/name fold-left (f b & a*) {
    fold :+ function (a* r) {
      if (any-null? a*) r {
	fold (pt-of a*) (apply f r (ph-of a*))
      }
    }

    if (null? a*) {
      error/type ^rt-parameter-error 'fold-left "too few arguments"
    } {
      fold a* b
    }
  }
}

fold-right := {
  ph-of := ph-of
  pt-of := pt-of
  any-null? := any-null?
  map-ph := map-ph

  function/name fold-right (f b & a*) {
    foldr :+ function (a* r) {
      if (any-null? a*) r {
	foldr (pt-of a*) (apply f (append (ph-of a*)
					  (list r)))
      }
    }

    if (null? a*) {
      error/type ^rt-parameter-error 'fold-right "too few arguments"
    } {
      foldr (map-ph reverse a*) b
    }
  }
}

append := {
  fold-left := fold-left

  function/name append a "
append the lists of `a`

:param a: list of lists
:return: combined list
:retype: list
  " {
    append2 :+ function (a b) {
      if (null? a) b {
	append2 (pt a) (pair (ph a) b)
      }
    }
    append-wrapper :+ function (a b) {
      if (null? b) a {
	append2 (reverse a) b
      }
    }

    fold-left append-wrapper '#n a
  }
}

define (list-tail x n) "
return the list after the first `n` elements of `x`

:param x: list to examine
:type x: list
:param n: number of elements to skip
:type n: integer
" {
  (cond
   ((zero? n) x)
   ((null? x) (error/type ^rt-parameter-value-error 'list-tail "index out of range" n))
   (else (list-tail (pt x) (- n 1))))
}

define (list-ref x n) "
return the element of `x` at position `n`

:param x: list to examine
:type x: list
:param n: index of element to access
:type n: integer
" {
  ph (list-tail x n)
}

;; Arithmetic procedures

define (even? x) "
is `x` even?

:param x: number
:type x: number
:return: ``#t`` if `x` is even, ``#f`` otherwise
:rtype: boolean
" (zero? (remainder x 2))

define (expt x y) "
raise `x` to the power of `y`

:param x: number
:type x: number
:param y: number
:type y: number
:return: `x` to the power `y`
:rtype: number

.. seealso:: :ref:`exp <exp>`
" {
  square :+ function (x) (x * x)
  expt2 :+ function (x y) {
    (cond
     ((zero? y) 1)
     ((even? y) (square (expt2 x (quotient y 2))))
     (else      (x * (square (expt2 x (quotient y 2))))))
  }

  (cond
   ((negative? y) (/ (expt (exact->inexact x) (- y))))
   ((zero? x) {
     if (inexact? y) {
       if (positive? y) 0 (/ 1 0)
     } {
       expt2 x y
     }
   })
   ((integer? y) (expt2 x y))
   (else         (exp (y * (log x)))))
}

gcd := {
  fold-left := fold-left

  function/name gcd a "
return the greatest common divisor of the numbers in `a`

:param a: list of numbers
:type a: list
:return: greatest common divisor
:rtype: number

If no numbers are provided the result is 0.
" {
    gcd2 :+ function (a b) {
      (cond
       ((zero? b) a)
       ((zero? a) b)
       ((a lt b) (gcd2 a (remainder b a)))
       (else (gcd2 b (remainder a b))))
    }

    fold-left gcd2 0 (map abs a)
  }
}

lcm := {
  fold-left := fold-left

  function/name lcm a "
return the least common multiple of the numbers in `a`

:param a: list of numbers
:type a: list
:return: lowest common multiple
:rtype: number

If no numbers are provided the result is 1.
" {
    lcm2 :+ function (a b) {
      cd := (gcd a b)

      * cd (* (quotient a cd)
	      (quotient b cd))
    }

    fold-left lcm2 1 (map abs a)
  }
}

max := {
  fold-left := fold-left

  function/name max (a & b) "
return the largest of the numbers in `a` and the numbers in the list `b`

:param a: number
:type a: number
:param b: list of numbers
:type b: list
:return: largest number
:rtype: number

If any number is inexact the result is inexact.
" {
    fold-left (function (a b) {
      if (or (inexact? a) (inexact? b)) {
	exact->inexact (if (a gt b) a b)
      } {
	if (a gt b) a b
      }
    }) a b
  }
}

min := {
  fold-left := fold-left

  function/name min (a & b) "
return the smallest of the numbers in `a` and the numbers in the list `b`

:param a: number
:type a: number
:param b: list of numbers
:type b: list
:return: smallest number
:rtype: number

If any number is inexact the result is inexact.
" {
    fold-left (function (a b) {
      if (or (inexact? a) (inexact? b)) {
	exact->inexact (if (a lt b) a b)
      } {
	if (a lt b) a b
      }
    }) a b
  }
}

define (modulo a b) "
return `a` modulo `b`

:param a: number
:type a: integer
:param b: number
:type b: integer
:return: `a` module `b`
:rtype: integer
" {
  rem := remainder a b

  (cond
   ((zero? rem) 0)
   ((eq? (negative? a) (negative? b)) rem)
   (else (+ b rem)))
}

define (negative? x) "
is `x` less than 0?

:param x: number
:type x: number
:return: ``#t`` if `x` is less than zero, ``#f`` otherwise
:rtype: boolean
" (x lt 0)

define (odd? x) "
is `x` odd?

:param x: number
:type x: number
:return: ``#t`` if `x` is odd, ``#f`` otherwise
:rtype: boolean
" (not (even? x))

define (positive? x) "
is `x` greater than 0?

:param x: number
:type x: number
:return: ``#t`` if `x` is greater than zero, ``#f`` otherwise
:rtype: boolean
" (x gt 0)

define (ceiling x) "
return the smallest `integer` less than `x`

:param x: number
:type x: number
:return: smallest integer less than `x`
:rtype: integer
" (- (floor (- x)))

define (round x) "
return the `integer` closest to `x`

:param x: number
:type x: number
:return: integer closest to `x`
:rtype: integer
" {
  x+ := 0.5 + x
  rx := floor x+

  if (and (odd? (inexact->exact rx))
	  (x+ eq rx)) {
    rx - 1
  } rx
}

define (truncate x) "
return the `integer` furthest from 0 but no further than `x`

:param x: number
:type x: number
:return: integer furthest from 0 but not further than `x`
:rtype: integer
" {
  (if (x lt 0) ceiling floor) x
}

define (exp x) "
raise Euler's number, `e`, to the power of `x`

:param x: number
:type x: number
:return: `e` to the power `x`
:rtype: number

.. seealso:: :ref:`expt <expt>` and  :ref:`log <log>`
" {
  #*

  https://en.wikipedia.org/wiki/Exponential_function#Computation

  This is the standard Taylor series (1 + x + x^2/2! + x^3/3! + ...)
  with the elements factored out for passing round the loop.

  Technically, e-series is the William Kahan (e^x - 1) function.

  *#

  e-series :+ function (x y x^y y! r last) {
    if ((abs (r - last)) le *epsilon*) r {
      (e-series x
		(1 + y)
		(x^y * x)
		(y! * (1 + y))
		(r + (x^y / y!))
		r)
    }
  }

  if (x ge 2.0) {
    e^x/2 := exp (x / 2)

    e^x/2 * e^x/2
  } {
    1 + (e-series x
		  1
		  x
		  1
		  0.0
		  1.0)
  }
}

define (log x) "
return the natural logarithm of `x`

:param x: number
:type x: positive number
:return: natural log of `x`
:rtype: number

.. seealso:: :ref:`exp <exp>`
" {
  #*

  The algorithm relates to "More efficient series" under
  https://en.wikipedia.org/wiki/Logarithm#Power_series

  For the general case, summing over k, the first pass, k=0, has just
  the fraction (z - 1) / (z + 1) and then subsequently the fractional
  part is raised to the power 2k+1, ie another 2 times fractional part
  and divided by 2k+1 == y + 2.

  We can draw those parts out and pass them individually.

  x	(z - 1) / (z + 1)
  y	2k+1
  x^y	((z - 1) / (z + 1))^(2k+1)

  lim is used to limit the number of times the approximation loop runs

  *#

  l-series :+ function (x y x^y r last lim)   {
    if (y gt 4000) {
      printf "l2 x %s y %4s x^y %s r %s l %s %s Î´ %s\n" x y x^y r last lim (r - last)
      sleep 1
    }
    (cond
     ((and lim (zero? lim)) (2 * r))
     (((abs (r - last)) le *epsilon*) (2 * r))
     (else (l-series x
		     (2 + y)
		     (* x^y x x)
		     (r + (x^y / y))
		     r
		     (if lim (lim - 1) lim))))
  }

  (cond
   ((negative? x) (1.0 / 0))
   ((lt 0.1 x 5) {
     fr := (x - 1) / (x + 1)
     (l-series fr
	       1
	       fr
	       0.0
	       1.0
	       #f)
   })
   (else {
     y := l-series x 1 ((x - 1) / (x + 1)) 0.0 1.0 5
     A := x / (exp y)
     y + (log A)
   }))
}

; auxilary definitions for SIN, COS, TAN
pi    := 3.141592653589793238462643383279502884197169399375105820974944
pi/4  := pi / 4
pi/2  := pi / 2
3pi/4 := pi/2 + pi/4
3pi/2 := pi + pi/2
5pi/4 := pi + pi/4
7pi/4 := pi + 3pi/4
2pi   := pi + pi

->circle := {
  2pi := 2pi

  function/name ->circle (x) {
    x+ := abs x
    d := 2pi * (floor (x+ / 2pi))
    x+ = x+ - d
    if (negative? x) {
      2pi - x+
    } {
      x+
    }
  }
}

; Used by sine-series (cos, sin), atan
define (factorial x) "
Return the factorial of `x`

:param x: number
:type x: number
:return: factorial of `x`
:rtype: number
" {
  define (fact2 x y) {
    if (x lt 2) y {
      q := quotient x 2
      (fact2 q y) * (fact2 (x - q) (y + q))
    }
  }

  fact2 x 1
}

; p-series in S9fES, used by cos, sin
sine-series := {
  factorial := factorial

  function/name sine-series (x y r add last) {
    if ((abs (r - last)) le *epsilon*) r {
      (sine-series x
		   (2 + y)
		   ((if add \+ \-) r ((expt x y) / (factorial y)))
		   (not add)
		   r)
    }
  }
}

cos := {
  ->circle    := ->circle
  sine-series := sine-series
  pi          := pi
  pi/2        := pi/2
  3pi/2       := 3pi/2
  2pi         := 2pi

  function/name cos (x) "
return the cosine of `x`

:param x: number
:type x: number
:return: cosine of `x`
:rtype: number
" {
    x := ->circle x

    (cond
     ((0 eq     x)       (if (inexact? x)  1.0  1))
     ((pi/2 eq  x)        0.0)
     ((pi eq    x)       -1.0)
     ((3pi/2 eq x)        0.0)
     ((le 0     x pi/2)  (sine-series    x         2 1.0 #f 0))
     ((le pi/2  x pi)    (- (sine-series (pi - x)  2 1.0 #f 0)))
     ((le pi    x 3pi/2) (- (sine-series (x - pi)  2 1.0 #f 0)))
     (else               (sine-series    (2pi - x) 2 1.0 #f 0)))
  }
}

sin := {
  ->circle    := ->circle
  sine-series := sine-series
  pi          := pi
  pi/2        := pi/2
  3pi/2       := 3pi/2
  2pi         := 2pi

  function/name sin (x) "
return the sine of `x`

:param x: number
:type x: number
:return: sine of `x`
:rtype: number
" {
    x := ->circle x

    (cond
     ((0     eq x) (if (inexact? x)  0.0  0))
     ((pi/2  eq x)  1.0)
     ((pi    eq x)  0.0)
     ((3pi/2 eq x) -1.0)
     (else {
       z := (cond
	     ((le 0    x  pi/2) x)
	     ((le pi/2 x  pi)   (pi - x))
	     ((le pi   x 3pi/2) (x - pi))
	     (else              (2pi - x)))

       if (x gt pi) {
	 - (sine-series z 3 z #f 0)
       } {
	 sine-series z 3 z #f 0
       }
     }))
  }
}

tan := {
  ->circle := ->circle
  pi       := pi
  pi/4     := pi/4
  3pi/4    := 3pi/4
  5pi/4    := 5pi/4
  7pi/4    := 7pi/4

  function/name tan (x) "
return the tangent of `x`

:param x: number
:type x: number
:return: tangent of `x`
:rtype: number
" {
    x := ->circle x
    (cond
     ((or (x eq 0)     (x eq  pi))   (if (inexact? x)  0.0  0))
     ((or (x eq  pi/4) (x eq 5pi/4))  1.0)
     ((or (x eq 3pi/4) (x eq 7pi/4)) -1.0)
     (else                           ((sin x) / (cos x))))
  }
}

atan := {
  pi/2      := pi/2
  factorial := factorial

  #*

  The at-series formula is the "Alternatively, this can be expressed
  as..." in

  https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Infinite_series

  *#

  at-series :+ function (x y r last) {
    if ((abs (r - last)) le *epsilon*) r {
      (at-series x
		 (1 + y)
		 (r + ((((expt 2 (y + y)) * (expt (factorial y) 2)) / (factorial (+ y y 1)))
			*
			((expt x (+ y y 1)) / (expt (1 + (x * x)) (1 + y)))))
		 r)
    }
  }

  function/name atan (x) "
return the arctangent of `x`

:param x: number
:type x: number
:return: arctangent of `x`
:rtype: number
" {
    (cond
     ((negative? x) (- (atan (- x))))
     ((x gt 1)      (pi/2 - (atan (/ x))))
     (else          (at-series x 0.0 0 1)))
  }
}

define (asin x) "
return the arcsine of `x`

:param x: number
:type x: number
:return: arcsine of `x`
:rtype: number
" {
  (cond
   ((1 eq x)      (2 * (atan x)))
   ((negative? x) (- (asin (- x))))
   (else          (atan (x / (sqrt (1 - (x * x)))))))
}

acos := {
  pi   := pi
  pi/2 := pi/2

  function/name acos (x) "
return the arccosine of `x`

:param x: number
:type x: number
:return: arccosine of `x`
:rtype: number
" {
    (cond
     ((-1 eq x) pi)
     (( 1 eq x) 0)
     (else      (pi/2 - (asin x))))
  }
}

define (sqrt square) "
return the square root of `square`

:param square: number
:type square: number
:return: square root of `square`
:rtype: number
" {
  sqrt2 :+ function (x last) {
    if ((abs (last - x)) le *epsilon*) x {
      sqrt2 ((x + (square / x)) / 2) x
    }
  }

  if (negative? square) {
    error/type ^rt-parameter-value-error 'sqrt "negative argument" square
  } {
    sqrt2 square 0
  }
}

;; String procedures

; Used by NUMBER->STRING and STRING->NUMBER
define (number-of-digits n r) {
  if (zero? n) {
    if (zero? r) 1 r
  } {
    number-of-digits (quotient n 10) (1 + r)
  }
}

define number->string {
  number-of-digits := number-of-digits

  function/name number->string (n & radix) {
    digits :+ list->array (string->list "0123456789abcdefghijklmnopqrstuvwxyz")
    conv :+ function (n rdx res) {
      if (zero? n) {
	if (null? res) '(#\0) res
      } {
	(conv (quotient n rdx)
	      rdx
	      (pair (array-ref digits (remainder n rdx))
		    res))
      }
    }
    conv-int :+ function (n rdx) {
      if (negative? n) {
	list->string (pair #\- (conv (abs n) rdx '#n))
      } {
	list->string (conv n rdx '#n)
      }
    }
    conv-sci-real :+ function (m e) {
      ms := conv-int m 10
      es := conv-int e 10
      i := if (negative? m) 2 1
      k := string-length ms
      (append-string (substring ms 0 i)
		     "."
		     (if (k eq i) "0" (substring ms i k))
		     "e"
		     (if (0 le e) "+" "")
		     es)
    }
    zeroes :+ function (n) {
      loop :+ function (n z) {
	if (positive? n) {
	  loop (- n 1) (pair #\0 z)
	} {
	  list->string z
	}
      }
      loop n '#n
    }
    conv-expanded-real :+ function (n offset) {
      m := abs n
      (append-string (if (negative? n) "-" "")
		     (cond
		      ((negative? offset) "0.")
		      ((zero? offset)     "0")
		      (else               ""))
		     (zeroes (- offset))
		     {
		       ms := conv-int m 10
		       k := string-length ms
		       if (le 0 offset k){
			 (append-string (substring ms 0 offset)
					"."
					(substring ms offset k))
		       } {
			 ms
		       }
      })
    }
    conv-real :+ function (n) {
      m := mantissa n
      e := exponent n
      d := number-of-digits m 0

      if (lt -4 (+ e d) 10) {
	conv-expanded-real m (e + d)
      } {
	conv-sci-real m (e + d + -1)
      }
    }
    get-radix :+ function () {
      (cond
       ((null? radix) 10)
       ((le 2 (ph radix) 36) (ph radix))
       (else (error/type ^rt-parameter-value-error 'number->string "invalid radix"
								   (ph radix))))
    }

    r := (get-radix)
    (cond
     ((not (or (integer? n) (10 eq r)))
      (error/type ^rt-parameter-value-error 'number->string "real number needs a radix of 10" n))
     ((integer? n) (conv-int (inexact->exact n) r))
     (else (conv-real n)))
  }
}

string->number := {
  number-of-digits := number-of-digits
  inexact := #f

  function/name string->number (str & radix) {
    digits :+ string->list "0123456789abcdefghijklmnopqrstuvwxyz"
    value-of-digit :+ function (x) {
      v :+ function (x d n) {
	(cond
	 ((null? d) 36)
	 ((unicode=? (ph d) x) n)
	 (else (v x (pt d) (n + 1))))
      }
      v (unicode/->Lowercase x) digits 0
    }
    find-exponent-mark :+ function (c) {
      memv c '(#\d #\D #\e #\E #\f #\F #\l #\L #\s #\S)
    }
    result :+ pair
    value :+ ph
    rest :+ pt
    FAIL :+ '(#f & #f)
    failed? :+ function (res) (eq? #f (pt res))
    ok? :+ function (res) (not (eq? #f (pt res)))
    conv3 :+ function (lst val rdx) {
      if (null? lst) {
	result val '#n
      } {
	dval := value-of-digit (ph lst)
	if (dval lt rdx) {
	  (conv3 (pt lst)
		 ((value-of-digit (ph lst)) + (val * rdx))
		 rdx)
	} {
	  result val lst
	}
      }
    }
    conv :+ function (lst rdx) {
      if (null? lst) FAIL {
	conv3 lst 0 rdx
      }
    }
    conv-int :+ function (lst rdx) {
      (cond
       ((null? lst) FAIL)
       ((unicode=? (ph lst) #\+) (conv (pt lst) rdx))
       ((unicode=? (ph lst) #\-) {
	 r := conv (pt lst) rdx
	 if (ok? r) {
	   result (- (value r)) (rest r)
	 } FAIL
       })
       (else (conv lst rdx)))
    }
    make-frag :+ function (x) {
      d := number-of-digits x -1
      (x / (expt 10.0 d)) - 1.0
    }
    make-real :+ function (int frag expn) {
      v := (0.0 + (abs int) + (make-frag frag)) * (expt 10.0 expn)
      if (negative? int) (- v) v
    }
    conv-exponent :+ function (int frag lst) {
      if (null? lst) FAIL {
	exp-part := conv-int lst 10
	if (failed? exp-part) FAIL {
	  result (make-real int frag (value exp-part)) (rest exp-part)
	}
      }
    }
    conv-decimals :+ function (int lst) {
      (cond
       ((null? lst) (result (0.0 + int) '#n))
       ((find-exponent-mark (ph lst)) (conv-exponent int 10 (pt lst)))
       (else {
	 frag-part := conv3 lst 1 10
	 if (null? (rest frag-part)) {
	   result (make-real int (value frag-part) 0) '#n
	 } {
	   conv-exponent int (value frag-part) (pt (rest frag-part))
	 }
       }))
    }
    radix-ten? :+ function (rdx) {
      if (not (10 eq rdx)) {
	if (null? radix) #f (error/type ^rt-parameter-value-error 'string->number "real number needs a radix of 10")
      } #t
    }
    mantissa-digits? :+ function (x) {
      (cond
       ((null? x)                    #f)
       ((unicode/Number? (ph x))     #t)
       ((find-exponent-mark (ph x))  #f)
       (else (mantissa-digits? (pt x))))
    }
    conv-real :+ function (lst rdx) {
      int-part := conv-int lst rdx
      (cond
       ((failed? int-part) FAIL)
       ((and (zero? (value int-part))
	     (not (mantissa-digits? lst))) FAIL)
       ((null? (rest int-part)) int-part)
       ((find-exponent-mark (ph (rest int-part))) {
	 if (radix-ten? rdx) {
	   (conv-exponent (value int-part)
			  10
			  (pt (rest int-part)))
	 } FAIL
       })
       ((unicode=? #\. (ph (rest int-part))) {
	 if (radix-ten? rdx) {
	   conv-decimals (value int-part) (pt (rest int-part))
	 } FAIL
       })
       (else int-part))
    }
    replace-inexact-digits! :+ function (a) {
      (cond
       ((null? a) #f)
       ((unicode=? #\# (ph a)) {
	 set-ph! a #\5
	 set! inexact #t
	 replace-inexact-digits! (pt a)
       })
       (else (replace-inexact-digits! (pt a))))
    }
    get-radix :+ function () {
      (cond
       ((null? radix) 10)
       ((le 2 (ph radix) 36) (ph radix))
       (else (error/type ^rt-parameter-value-error 'string->number "invalid radix" (ph radix))))
    }

    set! inexact #f
    radix :+ (get-radix)
    lst :+ string->list str

    if (and ((string-length str) gt 1)
	    (unicode=? #\# (ph lst))) {
      mod := pht lst
      set! lst (ptt lst)
      (cond
       ((unicode=? mod #\e) (void))
       ((unicode=? mod #\d) (void))
       ((unicode=? mod #\i) (set! inexact #t))
       ((unicode=? mod #\b) (set! radix 2))
       ((unicode=? mod #\o) (set! radix 8))
       ((unicode=? mod #\x) (set! radix 16))
       (else             (set! lst '#n)))
    }
    if (or (null? lst)
	   (memv (ph lst) '(#\+ #\- #\.))
	   (unicode/Number? (ph lst))) {
      replace-inexact-digits! lst
    }

    r := (cond
	  ((null? lst) FAIL)
	  ((unicode=? #\- (ph lst)) (conv-real (pt lst) radix))
	  (else (conv-real lst radix)))

    if (null? (rest r)) {
      v := if (unicode=? #\- (ph lst)) {
        - (value r)
      } {
	value r
      }
      if inexact (exact->inexact v) v
    } #f
  }
}

;; Array procedures

define (array & x) "
construct an array from `x`

:param x: elements for the array
:type x: list
:return: array constructed from the elements of `x`
:rtype: array

this simply calls :ref:`list->array <list->array>`
" (list->array x)

;; Input/output procedures

define (call-with-input-file file proc) "
return the result of calling `proc` with a file handle open to `file` for input

:param file: file name
:type file: string
:param proc: function of 1 argument
:type proc: function
:return: result of calling `proc`
:rtype: any
" {
  f := open-input-file file
  r := proc f
  close-input-handle f
  r
}

define (call-with-output-file file proc) "
return the result of calling `proc` with a file handle open to `file` for output

:param file: file name
:type file: string
:param proc: function of 1 argument
:type proc: function
:return: result of calling `proc`
:rtype: any
" {
  f := open-output-file file
  r := proc f
  close-output-handle f
  r
}

with-input-from-file := {
  set-input-handle! := set-input-handle!

  function/name with-input-from-file (file thunk) "
return the result of calling `thunk` in the context of the current
input handle being a file handle open to `file` for input

:param file: file name
:type file: string
:param thunk: function of 0 arguments
:type thunk: function
:return: result of calling `thunk`
:rtype: any
" {
    outer-handle := (current-input-handle)
    new-handle := open-input-file file
    set-input-handle! new-handle
    input := (thunk)
    close-input-handle new-handle
    set-input-handle! outer-handle
    input
  }
}

with-output-to-file := {
  set-output-handle! := set-output-handle!

  function/name with-output-to-file (file thunk) "
return the result of calling `thunk` in the context of the current
output handle being a file handle open to `file` for output

:param file: file name
:type file: string
:param thunk: function of 0 arguments
:type thunk: function
:return: result of calling `thunk`
:rtype: any
" {
    outer-handle := (current-output-handle)
    new-handle := open-output-file file
    set-output-handle! new-handle
    (thunk)
    close-output-handle new-handle
    set-output-handle! outer-handle
  }
}

;;----- Library -----

; LET/LET*/LETREC helper
define (check-bindings b who) {
  (cond
   ((null? b) #t)
   ((or (not (pair? b))
	(not (pair? (ph b)))
	(not (symbol? (phh b)))
	(not (pair? (pth b)))
	(not (null? (ptth b)))) (error/type ^rt-syntax-error 'check-bindings (append-string who ": invalid syntax") b))
   (else (check-bindings (pt b) who)))
}

; Now that the QQ expander is here, define a
; clean version of LET (including named LET).
; Can't name it LET yet, because it uses LET.
define-template %ext-let {
  check-bindings := check-bindings

  function/name %ext-let (a1 a2 & a3) {
    split :+ function (bind* vars args) {
      if (null? bind*) {
	pair vars args
      } {
	(split (pt bind*)
	       (pair (phh bind*) vars)
	       (pair (phth bind*) args))
      }
    }

    if (symbol? a1) {
      if (null? a3) {
        error/type ^rt-parameter-value-error 'named-let "missing body" #T{ let $a1 $a2 $@a3 }
      } {
	check-bindings a2 "let"
	va := split a2 '#n '#n
	v := reverse (ph va)
	a := reverse (pt va)
	#T{
	  {
	    $a1 :+ function $v $@a3
	    $a1 $@a
	  }
	}
      }
    } {
      check-bindings a1 "let"
      va := split a1 '#n '#n
      v := ph va
      a := pt va
      #T{ (function $v $a2 $@a3) $@a }
    }
  }
}

define-template (case key & clauses) {
  gen-clauses :+ function (k c*) {
    (cond
     ((null? c*) '#n)
     ((or (not (pair? c*))
	  (not (pair? (ph c*)))
	  (not (pair? (pth c*)))) (error/type ^rt-syntax-error 'case "invalid syntax" c*))
     ((null? (pt c*)) {
       if (eq? 'else (phh c*)) {
	 #T{ ((else $@(pth c*))) }
       } {
	 #T{ (((memv $k '$(phh c*)) $@(pth c*))) }
       }
     })
     (else {
       #T{ (((memv $k '$(phh c*)) $@(pth c*)) $@(gen-clauses k (pt c*))) }
     }))

  }

  k := (gensym)
  #T{
    {
      $k := $key
      cond $@(gen-clauses k clauses)
    }
  }
}

define-template (do var-clauses test & body) {
  split :+ function (clauses vars inits steps) {
    (cond
     ((null? clauses) (list vars inits steps))
     ((or (not (pair? clauses))
	  (not (pair? (ph clauses)))
	  (not (symbol? (phh clauses)))
	  (not (pair? (pth clauses)))) (error/type ^rt-syntax-error 'do "invalid syntax" clauses))
     (else (split (pt clauses)
		  (pair (phh clauses) vars)
		  (pair (phth clauses) inits)
		  (if (null? (ptth clauses))
		   (pair (phh clauses) steps)
		   (pair (phtth clauses) steps)))))
  }

  if (or (not (pair? test))
	 (not (list? (pt test)))) {
    error/type ^rt-syntax-error 'do "invalid syntax" test
  } {
    loop := (gensym)
    var+init+step := split var-clauses '#n '#n '#n
    v := ph var+init+step
    i := pht var+init+step
    s := phtt var+init+step

    #T{
      {
	$loop :+ function $v {
	  if $(ph test) {
	    $@(pt test)
	  } {
	    $@body
	    ($loop $@s)
	  }
	}
	$loop $@i
      }
    }
  }
}

define-template (delay expr) {
  #T{
    {
      value := #f
      function () {
	if value {
	  ph value
	} {
	  x := $expr
	  if value {
	    ph value
	  } {
	    value = pair x '#n
	    ph value
	  }
	}
      }
    }
  }
}

define (force x) (x)

