;;
;; Copyright (c) 2015, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; struct.idio
;;


;; flat structures

;; define-struct name & fields
;;
;; NB define-struct cannot use a parent as we cannot (during compile)
;; determine the fields of parent and therefore the correct offsets
;; for our own fields.  Equally, we cannot correctly generate field
;; accessors for the parent's fields (as we don't know what they are).

;; define-struct bar x y
;; struct-type? bar		=> #t
;; struct-type-name bar		=> bar
;; struct-type-parent bar	=> #n
;; struct-type-fields bar	=> (x y)

;; foo := make-bar 1 2
;; bar? foo			=> #t
;; struct-type? foo		=> #f
;; struct-instance? foo		=> #t
;; struct-instance-type foo	=> #<ST 0x202ace0 bar #n x y>
;; struct-type-name (struct-instance-type foo)	=> bar
;; struct-instance-fields foo	=> (1 2)
;; struct-instance-ref foo 'x	=> 1
;; bar-x foo			=> 1
;; set-bar-y! foo 10		=> #unspec
;; bar-y foo			=> 10

define-template (define-struct name & fields) {
  #T{
    ;; define bar (make-struct-type 'bar #n '(x y))
    define $name (make-struct-type '$name #n '$fields)

    define-struct-accessors-only $name $@fields
  }
}

define-template (export-struct name & fields) {
  #T{
    define-struct $name $@fields
    export $name

    export-struct-accessors-only $name $@fields
  }
}

;; We have this two-step shimmy as some structs (eg. %idio-job) are
;; defined in C-land for internal use yet the predicate/accessors are
;; defined here, in Idio-land, as it is much easier (and they are
;; never used in C-land anyway).
;;
;; cf. condition.idio
define-template (define-struct-accessors-only name & fields) {
  ;; handy parameters
  arg := gensym 'arg
  val := gensym 'val
  field-index := function (field fields) {
		   mq := memq field fields
		   (length fields) - (length mq)
  }

  make-fname := string->symbol (append-string "make-" (symbol->string name))
  pred-fname := string->symbol (append-string (symbol->string name) "?")

  #T{
    ;; define (make-bar & g/7) {
    ;;   apply make-struct-instance bar g/7
    ;; }
    define ($make-fname & $arg) {
      apply make-struct-instance $name $arg
    }

    ;; define (bar? g/7) {
    ;;   and (struct-instance? g/7) (struct-instance-isa? g/7 bar)
    ;; }
    define ($pred-fname $arg) {
      and (struct-instance? $arg) (struct-instance-isa? $arg $name)
    }

    ;; define (bar-x g/7) {
    ;;   %struct-instance-ref-direct g/7 bar 0
    ;; }
    ;; define (bar-y g/7) {
    ;;   %struct-instance-ref-direct g/7 bar 1
    ;; }
    $@(map (function (field) {
	      get-fname := string->symbol (append-string
					   (symbol->string name)
					   "-"
					   (symbol->string field))

	      #T{
		define ($get-fname $arg) {
		  %struct-instance-ref-direct $arg $name $(field-index field fields)
		}
	      }
    })
       fields)

    ;; define (set-bar-x! g/7 g/8) {
    ;;   %struct-instance-set-direct! g/7 bar 0 g/8
    ;; }
    ;; define (set-bar-y! g/7 g/8) {
    ;;   %struct-instance-set-direct! g/7 bar 1 g/8
    ;; }
    $@(map (function (field) {
	      set-fname := string->symbol (append-string
					   "set-"
					   (symbol->string name)
					   "-"
					   (symbol->string field)
					   "!")

	      #T{
		define ($set-fname $arg $val) {
		  %struct-instance-set-direct! $arg $name $(field-index field fields) $val
		}
	      }
    })
       fields)
  }
}

define-template (export-struct-accessors-only name & fields) {
  ;; handy parameters
  arg := gensym 'arg
  val := gensym 'val
  field-index := function (field fields) {
		   mq := memq field fields
		   (length fields) - (length mq)
  }

  make-fname := string->symbol (append-string "make-" (symbol->string name))
  pred-fname := string->symbol (append-string (symbol->string name) "?")

  #T{
    define-struct-accessors-only $name $@fields
    export $make-fname $pred-fname
    $@(map (function (field) {
	      get-fname := string->symbol (append-string
					   (symbol->string name)
					   "-"
					   (symbol->string field))
	      set-fname := string->symbol (append-string
					   "set-"
					   (symbol->string name)
					   "-"
					   (symbol->string field)
					   "!")

	      #T{
		export $get-fname $set-fname
	      }
    })
       fields)
  }
}
