;;
;; Copyright (c) 2015, 2017, 2020, 2021 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; test.idio
;;

#*

The testing we're doing here is more akin to system testing than unit
testing (which we reallly should have as well...).

Suppose we want to test arithmetic addition:

test (1 + 2) 3

which looks straightforward enough -- except that we are also testing:

* the reader's ability to read in numbers

  1, 2 and 3 are pretty easy but less so when we're considering 12e0
  and 1200e-2

  In this particular case we're also testing the reader operator's
  ability to re-arrange (X op Y) into (op-func X Y).

* the evaluator's ability to reason about the expression, (1 + 2),
  embedded inside another expression, (test expr expected), which is a
  template meaning it will get rewritten

* finally we get to test the arithmetic -- noting that in this case it
  will be the binary-+ arithmetic function (because of the reader
  operator) rather than the generic list form, (+ ...)

  So we ought to test both forms.  And then with both fixnums and
  bignums in various combinations and ... you end up with a lot of
  tests.

All done, we'll actually do some arithmetic -- our original goal --
and verify the result.

Whereon we realise that the C implementation is full of conditional
expressions and sub-clauses and what we really want to be doing to
extending our set of nominal arithmetic tests to include various
corner cases in the form of coverage tests.

I've tried to label the C source code with code coverage examples --
or at least document when there isn't one -- which then get lost in
the jumble of test cases in these test files.

*#

;; orignally ported from
;;
;; Scheme 9 from Empty Space
;; By Nils M Holm <nmh@t3x.org>, 2007,2008,2009
;;
;; but only test-s9.idio remaining (still many hundreds of tests)

require init

testfile := "__testfile__"

if (e? testfile) {
  delete-file testfile
}
    ;; (error (append-string "Please delete the file \""
    ;;                       testfile
    ;;                       "\" before running this test.")))

Errors := 0
Tests := 0

define (seq) {
  n := 1

  function () {
    x := n
    set! n (1 + n)
    x
  }
}

define (fail expr result expected) {
  set! Errors (1 + Errors)
  display* "Error #" Errors
  display* "test #" Tests " failed: " expr
  display* "got result:  " result
  display* "expected:    " expected
}

define (test3 expr result expected) {
  set! Tests (1 + Tests)
  ;edisplay* "test #" Tests ":" expr "=> (equal? " result expected " )"
  if (not (equal? result expected)) {
    fail expr result expected
  }
}

define-template (test form result) {
  #T{ test3 '$form $form $result }
}

define-template (test/error form result c-msg) {
  #T{
    with-condition-handler ^idio-error (function (c) {
					  test (idio-error-message c) $c-msg
					  trap-return #f
    }) {
      test3 '$form $form $result
    }
  }
}

define (Tests? n) {
  if (not (eqv? Tests n)) {
    d := n - Tests
    phr := "fewer"
    if (d lt 0) {
      d = Tests - n
      phr = "more"
    }
    printf "WARNING: #Tests %s != %s: %d %s than expected\n" Tests n d phr
    Errors = Errors + 1
  }
}

;; put the tests dirs on IDIOLIB
topdir := #f
testdir := #f

; used in test-command.idio to find the full path to auto-exit
IDIO-UTILS-BIN := #f

map (function (d) {
       if (not testdir) {
	 (regex-case
	  d
	  ("^(.*)/.local/lib/idio/" {
	    td := append-string r.1 "/tests"
	    tf := append-string td "/test-operator.idio"
	    if (e? tf) {
	      topdir = r.1
	      testdir = td
	    }
	  })
	  (else {
	    tf := append-string d "/test-operator.idio"
	    if (e? tf) {
	      testdir = d
	      (regex-case d
			  ("^(.*)/tests" {
			    topdir = r.1
			  }))
	    }
	  }))
       }
}) (split-string IDIOLIB ":")

if (not testdir) {
  edisplay* "Cannot find 'tests' subdir on IDIOLIB" IDIOLIB
} {
  path-append 'IDIOLIB testdir
  IDIOLIB = trim-path IDIOLIB
}

printf "[%s/%d] %3ds test.idio using IDIOLIB=%s\n" (getpid) PID SECONDS IDIOLIB

;; put the testing utilities on the PATH
if topdir {
  IDIO-UTILS-BIN = append-string topdir "/utils/bin"
  if (d? IDIO-UTILS-BIN) {
    path-append 'PATH IDIO-UTILS-BIN
    printf "[%s/%d] %3ds test.idio using PATH=%s\n" (getpid) PID SECONDS PATH
  } {
    printf "[%s/%d] %3ds test.idio ERROR cannot determine .../utils/bin from topdir=%s\n" (getpid) PID SECONDS topdir
    exit 1
  }
} {
  printf "[%s/%d] %3ds test.idio ERROR cannot determine .../utils/bin from IDIOLIB=%s\n" (getpid) PID SECONDS IDIOLIB
  exit 1
}

;; at least one test creates a local file then tries to "load" it --
;; so we need PWD on IDIOLIB
OIDIOLIB := IDIOLIB
path-append 'IDIOLIB PWD

;; running tests under Jenkins means we inherit the agent's max open
;; files (eg. 1048576) which means our file descriptor reaping tests
;; blow up.

;; we'll also use a variable, nofiles_lim, that other people --
;; notably the NOFILES test in test-s9.idio -- can use to provoke some
;; effects

nofiles_lim := 256
C_nofiles_lim := C/integer-> nofiles_lim libc/rlim_t
rl := libc/getrlimit libc/RLIMIT_NOFILE
if (C/> (libc/struct-rlimit-ref rl 'rlim_cur) C_nofiles_lim) {
  libc/struct-rlimit-set! rl 'rlim_cur C_nofiles_lim
  libc/setrlimit libc/RLIMIT_NOFILE rl
}

test-load := {
  n := 0

  function (filename) {
    if (not (string? filename)) (error 'load "not a string" filename)

    tests0 := Tests
    tv-before := (libc/gettimeofday)
    load filename
    tv-after := (libc/gettimeofday)
    tv-delta := libc/subtract-struct-timeval tv-after tv-before
    delta := (C/->integer (libc/struct-timeval-ref tv-delta 'tv_sec)) + ((C/->integer (libc/struct-timeval-ref tv-delta 'tv_usec)) / 1000000)
    printf "[%s/%d] %3ds %4d tests in %5.2fs %s\n" (getpid) PID SECONDS (Tests - tests0) delta filename

    ; clean up lost file descriptors
    (gc/collect)
  }
}


test-load "test-read-error.idio"
test-load "test-read-coverage.idio"
test-load "test-evaluation-error.idio"
test-load "test-expander-error.idio"

test-load "test-array-error.idio"
test-load "test-array.idio"
test-load "test-bignum-error.idio"
test-load "test-bignum.idio"
test-load "test-bitset-error.idio"
test-load "test-bitset.idio"
test-load "test-c-type-error.idio"
test-load "test-c-type.idio"
test-load "test-closure-error.idio"
test-load "test-closure.idio"
test-load "test-condition-error.idio"
test-load "test-condition.idio"
test-load "test-continuation.idio"
test-load "test-env.idio"
; test-error ??
test-load "test-file-handle-error.idio"
test-load "test-file-handle.idio"
test-load "test-fixnum-error.idio"
test-load "test-fixnum.idio"
test-load "test-handle-error.idio"
test-load "test-handle.idio"
test-load "test-load-handle.idio"
test-load "test-hash-error.idio"
test-load "test-hash.idio"
test-load "test-keyword-error.idio"
test-load "test-keyword.idio"
test-load "test-libc-wrap-error.idio"
test-load "test-libc-wrap.idio"
test-load "test-module-error.idio"
test-load "test-module.idio"
test-load "test-pair-error.idio"
test-load "test-pair.idio"
test-load "test-path-error.idio"
test-load "test-path.idio"
test-load "test-path-functions.idio"
test-load "test-posix-regex-error.idio"
test-load "test-posix-regex.idio"
test-load "test-primitive-error.idio"
test-load "test-primitive.idio"
test-load "test-string-error.idio"
test-load "test-string.idio"
test-load "test-string-handle-error.idio"
test-load "test-string-handle.idio"
test-load "test-struct-error.idio"
test-load "test-struct.idio"
test-load "test-symbol-error.idio"
test-load "test-symbol.idio"
test-load "test-unicode-error.idio"
test-load "test-unicode.idio"
test-load "test-usi-error.idio"
test-load "test-usi.idio"
test-load "test-utf-8.idio"
test-load "test-util-error.idio"
test-load "test-util.idio"
test-load "test-vm-error.idio"

test-load "test-s9.idio"

test-load "test-operator.idio"
test-load "test-template.idio"
test-load "test-dynamic.idio"
test-load "test-computed.idio"
;;test-load "test-call-cc.idio"

test-load "test-trap.idio"

test-load "test-SRFI-89.idio"
test-load "test-SRFI-115.idio"

extension-tests := make-struct-instance ~path (append-string topdir "/ext/*/tests/test-*.idio")
if (null? extension-tests) {
  eprintf "No extension tests\n"
} {

  for-each (function (etf) {
	      IDIOLIB = OIDIOLIB
	      PATH = OPATH

	      td := #f
	      (regex-case
	       etf
	       ("(.*/tests)/([^/]+)$" {
		 eprintf "extension-tests: %s\n" r.1
		 path-prepend 'IDIOLIB r.1
		 test-load r.2
	       })
	       (else {
		 eprintf "extension-tests: unexpected test-file: \"%s\"\n" etf
	       }))
  }) extension-tests
}

test-load "test-issues.idio"

; test shell-ish things after all the other tests
test-load "test-command-error.idio"
test-load "test-command.idio"

test-load "test-job-control.idio"

;; test that we've seen as many tests as we should have.  How many is
;; that?  Erm, they've not been counted and are dynamic in number so
;; test we've seen at least as many as the largest number we've
;; seen.  Wait, some tests are OS-specific.  Drat!
Tests? 6343

if (e? testfile) (delete-file testfile)

printf "[%s/%d] %3ds test.idio\n" (getpid) PID SECONDS
printf "# src-props %d\n" (length (hash-keys %idio-src-properties))
(if (zero? Errors) (printf "All %d tests passed!\n" Tests)
   {
     printf "%d error%s in %d tests.\n" Errors (if (Errors gt 1) "s" "") Tests
     if (not %idio-interactive) {
       *primitives*/exit 1
     }
   })

IDIOLIB = OIDIOLIB
PATH = OPATH

