;;
;; Copyright (c) 2021-2022 Ian Fitchet <idf(at)idio-lang.org>
;;
;; Licensed under the Apache License, Version 2.0 (the "License"); you
;; may not use this file except in compliance with the License.  You
;; may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;;

;;
;; path-functions.idio -- a rework of some Bash functions
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (path-modify var val act wrt (:sep sep ":") (:once once? #f) (:test test? #f)) "

Modify path `var` in various ways (*append*, *prepend*, *remove*,
*replace*, etc.).  It handles paths with whitespace and various kinds
of separators (Unix's ``:``, Windows' ``;``, Tcl's :literal:`\\ ` --
see note).

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:param val: the path element(s) to be added, `sep` separated
:type val: string
:param act: the action to be performed
:param wrt: the element in the path to be operated on
:type wrt: string
:keyword :sep: the element separator, defaults to ``:``
:type :sep: string, optional
:keyword :once: do the operation once (see below), defaults to ``#f``
:type :once: boolean, optional
:keyword :test: apply the predicate on the path segment
:type :test: predicate (function), optional

`act` can be:

.. csv-table::
   :widths: auto
   :align: left

   ``first`` ``start``, prepend `val`
   ``last`` ``end``, append `val`
   ``verify``, apply the conditional operator
   ``after`` ``before``, insert `val` after/before `wrt`
   ``replace``, replace `wrt` with `val`
   ``remove``, remove `wrt`

If `:once` is `true` then

* if `act` is ``replace`` or ``remove`` perform the action once

* if `act` is one of ``first``, ``last``, ``before``, ``after`` ensure
  that `val` appears once in the result

  In particular, subsequent instances of `val` may be removed or `val`
  may not be appended depending on the current elements of `var`.

The `:test` flag might be one of the standard predicates, :ref:`d?
<d?>`, :ref:`e? <e?>` or :ref:`f? <f?>`, or something bespoke.

.. note::

   Technically, :envvar:`TCLLIBPATH` is a Tcl `list` which can,
   presumably, be whitespace separated.  ``path-modify`` uses
   :ref:`split-string-exactly <split-string-exactly>` to retain
   adjacent separators which will do the wrong thing here with
   adjacent whitespace code points.

   You may want to construct a normalized value with something like:

   .. code-block:: idio

      TCLLIBPATH = join-string \" \" (split-string TCLLIBPATH \" \\t\")

" {
  orig-dirs := split-string-exactly (symbol-value var (current-module)) sep

  if once? {
    (case act
     ((first start last end after before) {
       if (member val orig-dirs) {
	 path-modify var #n 'remove val
	 orig-dirs = split-string-exactly (symbol-value var (current-module)) sep
       }
     }))
  }

  new-dirs := #n
  if (string? val) {
    new-dirs = split-string-exactly val sep
  }

  if test? {
    nval := #n
    for-each (function (e) {
      if (test? e) {
	nval = pair e nval
      }
    }) new-dirs
    new-dirs = reverse nval
  }

  ok := #t

  if (null? new-dirs) {
    (case act
     ((verify replace remove) {
       ok = #t
     })
     (else {
       ok = #f
     }))
  }

  if ok {
    r := (case act
     ((first start) {
       append new-dirs orig-dirs
     })
     ((last end) {
       append orig-dirs new-dirs
     })
     ((verify) {
       new-dirs
     })
     ((after before replace remove) {
       todo := #t
       r := #n
       for-each (function (e) {
	 if (and todo
		 (string=? e wrt)) {
	   (case act
	    ((after) {
	      r = append new-dirs (append (list e) r)
	    })
	    ((before) {
	      r = append (list e) (append new-dirs r)
	    })
	    ((replace) {
	      r = append new-dirs r
	    })
	    ((remove) {
	      r
	    }))

	   if once? {
	     todo = #f
	   }
	 } {
	   r = pair e r
	 }
       }) orig-dirs
       reverse r
     })
     (else {
       orig-dirs
     }))

    evaluate/set-symbol-value! var (join-string sep r) (current-module)
  }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (path-append var val (:sep sep ":") (:once once? #f) (:test test? #f)) "
A wrapper to :ref:`path-modify <path-modify>`'s ``append`` function.

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:param val: the path element(s) to be added, `sep` separated
:type val: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`,
`:once` and `:test`.

:Example:

Append ``\"/usr/local/bin\"`` to :envvar:`PATH` if it is a directory:

.. code-block:: idio

   path-append 'PATH \"/usr/local/bin\" :test d?

" {
  path-modify var val 'last #n :sep sep :once once? :test test?
}

define* (path-append-unique var val (:sep sep ":") (:test test? #f)) "
A wrapper to :ref:`path-modify <path-modify>`'s ``append`` function
with `:once` set to `true`.

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:param val: the path element(s) to be added, `sep` separated
:type val: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`
and `:test`.

" {
  path-modify var val 'last #n :sep sep :once #t :test test?
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (path-prepend var val (:sep sep ":") (:once once? #f) (:test test? #f)) "
A wrapper to :ref:`path-modify <path-modify>`'s ``prepend`` function.

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:param val: the path element(s) to be added, `sep` separated
:type val: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`,
`:once` and `:test`.

:Example:

Prepend ``\"/usr/local/bin\"`` to :envvar:`PATH` if it is a directory:

.. code-block:: idio

   path-prepend 'PATH \"/usr/local/bin\" :test d?

" {
  path-modify var val 'first #n :sep sep :once once? :test test?
}

define* (path-prepend-unique var val (:sep sep ":") (:test test? #f)) "
A wrapper to :ref:`path-modify <path-modify>`'s ``prepend`` function
with `:once` set to true.

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:param val: the path element(s) to be added, `sep` separated
:type val: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`
and `:test`.

" {
  path-modify var val 'first #n :sep sep :once #t :test test?
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (path-verify var (:sep sep ":") (:test test? #f)) "
A wrapper to :ref:`path-modify <path-modify>`'s ``verify`` function.

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:keyword :sep: the element separator, defaults to ``:``
:type :sep: string, optional
:keyword :test: apply the predicate on the path segment
:type :test: predicate (function), **required**

.. note::

   The `:test` keyword argument is required.  It uses the `:test`
   style for consistency.

:Example:

Reduce :envvar:`PATH` to those elements that are directories:

.. code-block:: idio

   path-verify 'PATH :test d?

" {
  if test? {
    path-modify var (symbol-value var (current-module)) 'verify #n :sep sep :test test?
  } {
    error/type ^rt-parameter-error 'path-verify "no :test predicate supplied"
  }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (path-replace var old new (:sep sep ":") (:once once? #f) (:test test? #f)) "
A wrapper to :ref:`path-modify <path-modify>`'s ``replace`` function.

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:param old: the path element to be replaced
:type old: string
:param new: the path element(s) to be substituted, `sep` separated
:type new: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`,
`:once` and `:test`.

:Example:

Append ``\"/usr/local/bin\"`` to :envvar:`PATH` if it is a directory:

.. code-block:: idio

   path-append 'PATH \"/usr/local/bin\" :test d?

" {
  path-modify var new 'replace old :sep sep :once once? :test test?
}

define* (path-replace-first var old new (:sep sep ":") (:test test? #f)) "
A wrapper to :ref:`path-modify <path-modify>`'s ``replace`` function
with `:once` set to `true`.

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:param old: the path element to be replaced
:type old: string
:param new: the path element(s) to be substituted, `sep` separated
:type new: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`
and `:test`.

" {
  path-modify var new 'replace old :sep sep :once #t :test test?
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (path-remove var old (:sep sep ":") (:once once? #f)) "
A wrapper to :ref:`path-modify <path-modify>`'s ``remove`` function.

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:param old: the path element to be removed
:type old: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`
and `:once`.

:Example:

Remove ``\"/usr/local/bin\"`` from :envvar:`PATH`:

.. code-block:: idio

   path-remove 'PATH \"/usr/local/bin\"

" {
  path-modify var #n 'remove old :sep sep :once once?
}

define* (path-remove-first var old (:sep sep ":")) "
A wrapper to :ref:`path-modify <path-modify>`'s ``remove`` function
with `:once` set to `true`.

:param var: the name of the path to be manipulated, eg. PATH, CLASSPATH
:type var: symbol
:param old: the path element to be removed
:type old: string

See :ref:`path-modify <path-modify>` for the keyword argument `:sep`.

" {
  path-modify var #n 'remove old :sep sep :once #t
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (trim-path val (:sep sep ":")) "
Returns a path value with duplicate elements removed after the first.

:param val: the value of the path to be manipulated, eg. PATH, CLASSPATH
:type val: string
:keyword :sep: the element separator, defaults to ``:``
:type :sep: string, optional

" {
  seen := #n

  for-each (function (e) {
    if (not (member e seen)) {
      seen = pair e seen
    }
  }) (split-string-exactly val sep)

  join-string sep (reverse seen)
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (std-paths act val (:sep sep ":") (:once once? #f) (:test test? #f)) "
Call :samp:`path-{act}` for

* :envvar:`PATH` with :file:`{val}/bin`

* :envvar:`MANPATH` with :file:`{val}/share/man` or :file:`{val}/man`
  if either exists

:param act: an `act` for :ref:`path-modify <path-modify>`
:type act: symbol
:param val: the top of the standard hierarchy tree
:type val: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`,
`:once` and `:test`.

:Example:

Append ``\"/usr/local/bin\"`` to :envvar:`PATH` and one of
``\"/usr/local/share/bin\"`` or ``\"/usr/local/man\"`` (if they exist) to
:envvar:`MANPATH`:

.. code-block:: idio

   std-paths 'append \"/usr/local\"

" {
  path-act := symbol-value (string->symbol (append-string "path-" (symbol->string act))) (current-module)
  for-each (function (e) {
    (case act
     ((remove) {
       path-act 'PATH (append-string e "/bin") :sep sep :once once?
     })
     (else {
       path-act 'PATH (append-string e "/bin") :sep sep :once once? :test test?
     }))
    for-each (function (m) {
      md := append-string e m
      if (d? md) {
	(case act
	 ((remove) {
	   path-act 'MANPATH md :sep sep :once once?
	 })
	 (else {
	   path-act 'MANPATH md :sep sep :once once? :test test?
	 }))
      }
    }) '("share/man" "man")
  }) (split-string-exactly val sep)
}

define* (std-paths-unique act val (:sep sep ":") (:test test? #f)) "
Call :samp:`path-{act}` with `:once` set to `true` for

* :envvar:`PATH` with :file:`{val}/bin`

* :envvar:`MANPATH` with :file:`{val}/share/man` or :file:`{val}/man`
  if either exists

:param act: an `act` for :ref:`path-modify <path-modify>`
:type act: symbol
:param val: the top of the standard hierarchy tree
:type val: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`
and `:test`.

:Example:

Append ``\"/usr/local/bin\"`` to :envvar:`PATH` and one of
``\"/usr/local/share/bin\"`` or ``\"/usr/local/man\"`` (if they exist) to
:envvar:`MANPATH`:

.. code-block:: idio

   std-paths 'append \"/usr/local\"

" {
  std-paths act val :sep sep :once #t :test test?
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (all-paths act val (:sep sep ":") (:once once? #f) (:test test? #f)) "
Call :samp:`path-{act}` for

* :envvar:`PATH` with :file:`{val}/bin`

* :envvar:`LD_LIBRARY_PATH` with :file:`{val}/lib`

* :envvar:`MANPATH` with :file:`{val}/share/man` or :file:`{val}/man`
  if either exists

:param act: an `act` for :ref:`path-modify <path-modify>`
:type act: symbol
:param val: the top of the standard hierarchy tree
:type val: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`,
`:once` and `:test`.

:Example:

Append ``\"/usr/local/bin\"`` to :envvar:`PATH`, ``\"/usr/local/lib\"`` to
:envvar:`LI_LIBRARY_PATH` and one of ``\"/usr/local/share/bin\"`` or
``\"/usr/local/man\"`` (if they exist) to :envvar:`MANPATH`:

.. code-block:: idio

   all-paths 'append \"/usr/local\"

" {
  path-act := symbol-value (string->symbol (append-string "path-" (symbol->string act))) (current-module)
  for-each (function (e) {
    (case act
     ((remove) {
       path-act 'PATH (append-string e "/bin") :sep sep :once once?
     })
     (else {
       path-act 'PATH (append-string e "/bin") :sep sep :once once? :test test?
     }))
    for-each (function (m) {
      md := append-string e m
      if (d? md) {
	(case act
	 ((remove) {
	   path-act 'MANPATH md :sep sep :once once?
	 })
	 (else {
	   path-act 'MANPATH md :sep sep :once once? :test test?
	 }))
      }
    }) '("share/man" "man")
    ld := append-string e "/lib"
    if (d? ld) {
      (case act
       ((remove) {
	 path-act 'LD_LIBRARY_PATH ld :sep sep :once once?
       })
       (else {
	 path-act 'LD_LIBRARY_PATH ld :sep sep :once once? :test test?
       }))
    }
  }) (split-string-exactly val sep)
}

define* (all-paths-unique act val (:sep sep ":") (:test test? #f)) "
Call :samp:`path-{act}` with `:once` set to `true` for

* :envvar:`PATH` with :file:`{val}/bin`

* :envvar:`LD_LIBRARY_PATH` with :file:`{val}/lib`

* :envvar:`MANPATH` with :file:`{val}/share/man` or :file:`{val}/man`
  if either exists

:param act: an `act` for :ref:`path-modify <path-modify>`
:type act: symbol
:param val: the top of the standard hierarchy tree
:type val: string

See :ref:`path-modify <path-modify>` for the keyword arguments `:sep`
and `:test`.

:Example:

Append ``\"/usr/local/bin\"`` to :envvar:`PATH`, ``\"/usr/local/lib\"`` to
:envvar:`LI_LIBRARY_PATH` and one of ``\"/usr/local/share/bin\"`` or
``\"/usr/local/man\"`` (if they exist) to :envvar:`MANPATH`:

.. code-block:: idio

   all-paths 'append \"/usr/local\"

" {
  all-paths act val :sep sep :once #t :test test?
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define* (normalize-pathname val (:sep sep "/")) "
Normalize pathname `val` by:

* non-absolute pathnames are made absolute

* removing ``.`` and ``..`` elements as appropriate

:param val: the pathname to be normalized
:type val: string
:keyword :sep: the element separator, defaults to ``/``
:type :sep: string, optional

" {
  r := #n

  if (not (and ((string-length val) gt 0)
	       (eq? (string-ref val 0) #\/))) {
    val = append-string PWD "/" val
  }

  for-each (function (e) {
    (case e
     (("")
      ;; "///foo" -> ("" "" "" "foo" )
      #n)
     ((".") #n)
     (("..") {
       if (pair? r) {
	 r = pt r
       }
     })
     (else {
       r = pair e r
     }))
  }) (split-string-exactly val sep)

  r = reverse r

  if (null? r) {
    "/"
  } {
    append-string "/" (join-string sep r)
  }
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; cd

pushd := #f
popd := #f
setd := #f
dirs := #f

{
  dir-stack := list PWD

  define (test-and-chdir d) {
    if (d? d) {
      dir-stack = pair d dir-stack
      (pattern-case d
		    ("/*" {
		      PWD = d
		    })
		    (else {
		      PWD = normalize-pathname (append-string PWD "/" d)
		    }))
      libc/chdir PWD
    } {
      #f
    }
  }

  pushd = function (d) "

if `d` is a directory then change the working directory to it and push
it onto the top of the directory stack.

:param d: directory to change to
:type d: string
:return: current working directory or ``#f``

This function modifies :ref:`PWD <PWD>`.

" {
    (test-and-chdir d) or {
      eprintf "pushd: %s: %s\n" d (libc/strerror libc/ENOENT)
      #f
    }
  }

  popd = function () "

if the directory stack has more than one entry then pop an element off
the directory stack and change the working directory to the top-most
element

:return: current working directory or ``#f``

This function modifies :ref:`PWD <PWD>`.

" {
    if ((length dir-stack) gt 1) {
      dir-stack = pt dir-stack
      setd (ph dir-stack)
    } {
      eprintf "popd: directory stack empty\n"
      #f
    }
  }

  setd = function (d) "

if `d` is a directory then change the working directory to it and set
the top entry in the directory stack to it.

:param d: directory to change to
:type d: string
:return: current working directory or ``#f``

This function modifies :ref:`PWD <PWD>`.

" {
    (test-and-chdir d) or {
      eprintf "cd: %s: %s\n" d (libc/strerror libc/ENOENT)
      #f
    }
  }

  dirs = function () "
print the directory stack
" {
    printf "%@\n" dir-stack
  }
}

(define-syntax cd
 (syntax-rules (~)
  ((cd)   (cd HOME))
  ((cd ~) (cd HOME))
  ((cd d) (setd d))))

provide path-functions
