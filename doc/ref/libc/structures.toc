(rst "structures-intro" 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;

;; These are all CSI-style structure accessors.  There is no
;; Idio-level knowledge of what lies behind the C/pointer

(rst "struct-group-intro" 0)
(document libc struct-group-ref)
(document libc struct-group-as-string)

(rst "struct-passwd-intro" 0)
(document libc struct-passwd-ref)
(document libc struct-passwd-as-string)

(rst "struct-rlimit-intro" 0)
(document libc struct-rlimit-ref)
(document libc struct-rlimit-set!)
(document libc struct-rlimit-as-string)

(rst "struct-rusage-intro" 0)
(document libc struct-rusage-ref)
(document libc struct-rusage-as-string)

(rst "struct-stat-intro" 0)
(document libc struct-stat-as-string)
(document libc struct-stat-ref)

(rst "struct-termios-intro" 0)
(document libc struct-termios-ref)
(document libc struct-termios-set!)
(document libc struct-termios-as-string)

(rst "struct-timespec-intro" 0)
(document libc struct-timespec-ref)
(document libc struct-timespec-set!)
(document libc struct-timespec-as-string)

(rst "struct-timeval-intro" 0)
(document libc struct-timeval-ref)
(document libc struct-timeval-set!)
(document libc subtract-struct-timeval)
(document libc add-struct-timeval)
(document libc struct-timeval-as-string)

(rst "struct-tm-intro" 0)
(document libc struct-tm-ref)
(document libc struct-tm-set!)
(document libc struct-tm-as-string)

(rst "struct-tms-intro" 0)
(document libc struct-tms-ref)
(document libc struct-tms-as-string)

(rst "struct-utsname-intro" 0)
(document libc struct-utsname-ref)
(document libc struct-utsname-as-string)
