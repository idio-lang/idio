include Makefile.common

ifdef MAKE_DEBUG
CDEBUG		:= -g
else
CDEBUG		:=
endif

CFLAGS		:= -std=c99 -Wall -Wno-unused-function -fPIC -DIDIO_MALLOC -I$(SRCDIR) -I$(SRCDIR)/build-bootstrap $(CDEBUG) $(CFLAGS) $(LIBFFI_INC)
LDFLAGS		:= $(LDFLAGS)
LIBS		:= $(LIBS)

ifneq ($(OS),Darwin)
DLIBS		:= libos.so libposix-regex.so
endif

# We'll build a bootstrap idio executable in $(BINDIR) in order that
# we can run idio-c-api-gen.  $(BINDIR) is entirely the wrong place
# and, indeed, a place the idio executable can't derive its own
# libraries correctly from so we have to set IDIOLIB to $(LIBDIR) for
# it.

# We don't want to generate $(LI_BINDIR)/idio as if the generation of
# the libc code fails then others might think that $(LI_BINDIR)/idio
# is good to go.  How could they tell it is the bootstrap version?

# In addition we also have to set IDIOLIB to include
# $(LIBDIR)/build-boostrap otherwise we won't get anywhere at all!

# Finally delete $(BINDIR)/idio so no-one gets confused.  Probably.

all : $(BINDIR)/idio

$(BINDIR)/idio : $(objects) | $(BINDIR)
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)

$(BINDIR):
	@mkdir -p $(BINDIR)

# XXX Put the bootstrap idio on the PATH first otherwise we won't
# manage to find the ext subdirectories if IDIOLIB is set by the
# production version, say, /usr/bin/idio, which won't be pointing at
# this source distribution.

libc-api.h : $(BINDIR)/idio
	PATH="$(BINDIR):$(PATH)" IDIOLIB=$(LIBDIR):$(LIBDIR)/build-bootstrap idio-c-api-gen libc
	cp $(EXTDIR)/libc/gen/libc-api.h $(SRCDIR)
	cp $(EXTDIR)/libc/gen/libc-api.idio $(LIBDIR)
	rm -f $(deps)
	rm -f $(BINDIR)/idio
